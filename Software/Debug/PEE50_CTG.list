
PEE50_CTG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800a488  0800a488  0001a488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8ec  0800a8ec  00020260  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8ec  0800a8ec  0001a8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8f4  0800a8f4  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8f4  0800a8f4  0001a8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8f8  0800a8f8  0001a8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800a8fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000260  0800ab5c  00020260  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  0800ab5c  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b2d  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f79  00000000  00000000  00039dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  0003cd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f8  00000000  00000000  0003e258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a910  00000000  00000000  0003f650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016953  00000000  00000000  00069f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a8a7  00000000  00000000  000808b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018b15a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c2c  00000000  00000000  0018b1b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000260 	.word	0x20000260
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a46c 	.word	0x0800a46c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000264 	.word	0x20000264
 80001cc:	0800a46c 	.word	0x0800a46c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <ctg_print>:

/* @brief	uart print function with newline
 * @param	huart: pointer to the uart handle
 * @param	buffer: pointer to a char or string */
void ctg_print(UART_HandleTypeDef *huart, char * buffer)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), 10);
 8000eea:	6838      	ldr	r0, [r7, #0]
 8000eec:	f7ff f970 	bl	80001d0 <strlen>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f005 ff51 	bl	8006da0 <HAL_UART_Transmit>
	//HAL_UART_Transmit_IT(huart, (uint8_t *)buffer, strlen(buffer));
	/* print newline */
	char newline[2] = "\r\n";
 8000efe:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000f02:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t *)newline, 2, 10);
 8000f04:	f107 010c 	add.w	r1, r7, #12
 8000f08:	230a      	movs	r3, #10
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f005 ff47 	bl	8006da0 <HAL_UART_Transmit>
	//HAL_UART_Transmit_IT(huart, (uint8_t *)buffer, strlen(buffer));
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <ctg_read_adc>:

void ctg_read_adc(ADC_HandleTypeDef *hadc, float *voltage)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
	  /* (re)start ADC sampling */
	  HAL_ADC_Start(hadc);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f001 fe08 	bl	8002b3c <HAL_ADC_Start>

	  /* poll 1ms for conversion */
	  HAL_ADC_PollForConversion(hadc, 1);
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f001 febe 	bl	8002cb0 <HAL_ADC_PollForConversion>

	  /* read ADC value */
	  uint32_t sample = HAL_ADC_GetValue(hadc);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f001 ff93 	bl	8002e60 <HAL_ADC_GetValue>
 8000f3a:	60f8      	str	r0, [r7, #12]

	  /* convert to voltage */
	  *voltage = ((float)sample * (float)3.3);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	ee07 3a90 	vmov	s15, r3
 8000f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f46:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000f70 <ctg_read_adc+0x54>
 8000f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	edc3 7a00 	vstr	s15, [r3]
	  /* divide voltage by 4096  */
	  *voltage = *voltage / 4096;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	ed93 7a00 	vldr	s14, [r3]
 8000f5a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8000f74 <ctg_read_adc+0x58>
 8000f5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	edc3 7a00 	vstr	s15, [r3]
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40533333 	.word	0x40533333
 8000f74:	45800000 	.word	0x45800000

08000f78 <shift>:
uint16_t resp_level		= (0.09 * 1000);
uint16_t current_level	= 0;

/* shift list with one npde */
void shift(float sample)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0a01 	vstr	s0, [r7, #4]
	/* init node */
	node_t *n = (node_t*) malloc(sizeof(node_t));
 8000f82:	2008      	movs	r0, #8
 8000f84:	f006 fbbc 	bl	8007700 <malloc>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60fb      	str	r3, [r7, #12]
	n->sample = sample;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	601a      	str	r2, [r3, #0]
	n->next = NULL;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]

	/* add to tail */
	tail->next = n;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <shift+0x4c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	605a      	str	r2, [r3, #4]
	tail = n;
 8000fa0:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <shift+0x4c>)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6013      	str	r3, [r2, #0]

	/* remove first node */
	node_t *temp = head;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <shift+0x50>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	60bb      	str	r3, [r7, #8]
	head = head->next;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <shift+0x50>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <shift+0x50>)
 8000fb4:	6013      	str	r3, [r2, #0]
	free(temp);
 8000fb6:	68b8      	ldr	r0, [r7, #8]
 8000fb8:	f006 fbaa 	bl	8007710 <free>
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000280 	.word	0x20000280
 8000fc8:	2000027c 	.word	0x2000027c

08000fcc <shift2>:

void shift2(float sample)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	ed87 0a01 	vstr	s0, [r7, #4]
	/* init node */
	node_t *n = (node_t*) malloc(sizeof(node_t));
 8000fd6:	2008      	movs	r0, #8
 8000fd8:	f006 fb92 	bl	8007700 <malloc>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60fb      	str	r3, [r7, #12]
	n->sample = sample;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	601a      	str	r2, [r3, #0]
	n->next = NULL;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	605a      	str	r2, [r3, #4]

	/* add to tail */
	leaf->next = n;
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <shift2+0x4c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	605a      	str	r2, [r3, #4]
	leaf = n;
 8000ff4:	4a08      	ldr	r2, [pc, #32]	; (8001018 <shift2+0x4c>)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6013      	str	r3, [r2, #0]

	/* remove first node */
	node_t *temp = root;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <shift2+0x50>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	60bb      	str	r3, [r7, #8]
	root = root->next;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <shift2+0x50>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <shift2+0x50>)
 8001008:	6013      	str	r3, [r2, #0]
	free(temp);
 800100a:	68b8      	ldr	r0, [r7, #8]
 800100c:	f006 fb80 	bl	8007710 <free>
}
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000288 	.word	0x20000288
 800101c:	20000284 	.word	0x20000284

08001020 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN PFP */
int k = 0;

/* Timer interrupt for heart rate and respitory rate */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	//Every 1ms it will go in this interrupt.
		/* uart send rate is equal to the timer 4 freq */
	if(htim == &htim4){ bHeart = true; }
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a95      	ldr	r2, [pc, #596]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d102      	bne.n	8001036 <HAL_TIM_PeriodElapsedCallback+0x16>
 8001030:	4b94      	ldr	r3, [pc, #592]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
//		}
//	}
//
	//Every 1ms it will go in this interrupt.
	/* uart send rate is equal to the timer 4 freq */
	if(htim == &htim4) { bHeart = true; }
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a91      	ldr	r2, [pc, #580]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d102      	bne.n	8001044 <HAL_TIM_PeriodElapsedCallback+0x24>
 800103e:	4b91      	ldr	r3, [pc, #580]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
	bEcg = false;
 8001044:	4b90      	ldr	r3, [pc, #576]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
	if(bEcg)
 800104a:	4b8f      	ldr	r3, [pc, #572]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 808d 	beq.w	8001170 <HAL_TIM_PeriodElapsedCallback+0x150>
	{
		/* read adc */
		ctg_read_adc(&hadc1,&voltage);
 8001056:	498d      	ldr	r1, [pc, #564]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001058:	488d      	ldr	r0, [pc, #564]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800105a:	f7ff ff5f 	bl	8000f1c <ctg_read_adc>

		/* the only difference betweeen previous sums is
		 * the first and last index */
		shift(voltage);
 800105e:	4b8b      	ldr	r3, [pc, #556]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001060:	edd3 7a00 	vldr	s15, [r3]
 8001064:	eeb0 0a67 	vmov.f32	s0, s15
 8001068:	f7ff ff86 	bl	8000f78 <shift>
		sum_voltage -= head->sample;
 800106c:	4b89      	ldr	r3, [pc, #548]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800106e:	ed93 7a00 	vldr	s14, [r3]
 8001072:	4b89      	ldr	r3, [pc, #548]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800107e:	4b85      	ldr	r3, [pc, #532]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001080:	edc3 7a00 	vstr	s15, [r3]
		sum_voltage += tail->sample;
 8001084:	4b85      	ldr	r3, [pc, #532]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	ed93 7a00 	vldr	s14, [r3]
 800108c:	4b81      	ldr	r3, [pc, #516]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001096:	4b7f      	ldr	r3, [pc, #508]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001098:	edc3 7a00 	vstr	s15, [r3]

		avg_voltage = (sum_voltage / 30);
 800109c:	4b7d      	ldr	r3, [pc, #500]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800109e:	ed93 7a00 	vldr	s14, [r3]
 80010a2:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 80010a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010aa:	4b7d      	ldr	r3, [pc, #500]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80010ac:	edc3 7a00 	vstr	s15, [r3]

		i++;
 80010b0:	4b7c      	ldr	r3, [pc, #496]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	3301      	adds	r3, #1
 80010b6:	4a7b      	ldr	r2, [pc, #492]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80010b8:	6013      	str	r3, [r2, #0]
		if(i % 20 == 0)
 80010ba:	4b7a      	ldr	r3, [pc, #488]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80010bc:	6819      	ldr	r1, [r3, #0]
 80010be:	4b7a      	ldr	r3, [pc, #488]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80010c0:	fb83 2301 	smull	r2, r3, r3, r1
 80010c4:	10da      	asrs	r2, r3, #3
 80010c6:	17cb      	asrs	r3, r1, #31
 80010c8:	1ad2      	subs	r2, r2, r3
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	1aca      	subs	r2, r1, r3
 80010d4:	2a00      	cmp	r2, #0
 80010d6:	d11e      	bne.n	8001116 <HAL_TIM_PeriodElapsedCallback+0xf6>
		{
			shift2(avg_voltage);
 80010d8:	4b71      	ldr	r3, [pc, #452]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80010da:	edd3 7a00 	vldr	s15, [r3]
 80010de:	eeb0 0a67 	vmov.f32	s0, s15
 80010e2:	f7ff ff73 	bl	8000fcc <shift2>
			sum_center -= root->sample;
 80010e6:	4b71      	ldr	r3, [pc, #452]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80010e8:	ed93 7a00 	vldr	s14, [r3]
 80010ec:	4b70      	ldr	r3, [pc, #448]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	edd3 7a00 	vldr	s15, [r3]
 80010f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f8:	4b6c      	ldr	r3, [pc, #432]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80010fa:	edc3 7a00 	vstr	s15, [r3]
			sum_center += leaf->sample;
 80010fe:	4b6d      	ldr	r3, [pc, #436]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	ed93 7a00 	vldr	s14, [r3]
 8001106:	4b69      	ldr	r3, [pc, #420]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001110:	4b66      	ldr	r3, [pc, #408]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001112:	edc3 7a00 	vstr	s15, [r3]
		}
		if(i % 2000 == 0 && k != 1)
 8001116:	4b63      	ldr	r3, [pc, #396]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4b67      	ldr	r3, [pc, #412]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800111c:	fb83 1302 	smull	r1, r3, r3, r2
 8001120:	11d9      	asrs	r1, r3, #7
 8001122:	17d3      	asrs	r3, r2, #31
 8001124:	1acb      	subs	r3, r1, r3
 8001126:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800112a:	fb01 f303 	mul.w	r3, r1, r3
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d109      	bne.n	8001148 <HAL_TIM_PeriodElapsedCallback+0x128>
 8001134:	4b61      	ldr	r3, [pc, #388]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d005      	beq.n	8001148 <HAL_TIM_PeriodElapsedCallback+0x128>
		{
			k = 1;
 800113c:	4b5f      	ldr	r3, [pc, #380]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800113e:	2201      	movs	r2, #1
 8001140:	601a      	str	r2, [r3, #0]
			i = 0;
 8001142:	4b58      	ldr	r3, [pc, #352]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
		}

		float center = sum_center / AVG;
 8001148:	4b58      	ldr	r3, [pc, #352]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800114a:	ed93 7a00 	vldr	s14, [r3]
 800114e:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80012c0 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8001152:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001156:	edc7 7a05 	vstr	s15, [r7, #20]

		/* center voltage to 0V */
		avg_voltage -= center;
 800115a:	4b51      	ldr	r3, [pc, #324]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800115c:	ed93 7a00 	vldr	s14, [r3]
 8001160:	edd7 7a05 	vldr	s15, [r7, #20]
 8001164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001168:	4b4d      	ldr	r3, [pc, #308]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800116a:	edc3 7a00 	vstr	s15, [r3]
 800116e:	e007      	b.n	8001180 <HAL_TIM_PeriodElapsedCallback+0x160>
	}
	else
	{
		ctg_read_adc(&hadc2,&voltage);
 8001170:	4946      	ldr	r1, [pc, #280]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001172:	4854      	ldr	r0, [pc, #336]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001174:	f7ff fed2 	bl	8000f1c <ctg_read_adc>
		avg_voltage = voltage;
 8001178:	4b44      	ldr	r3, [pc, #272]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a48      	ldr	r2, [pc, #288]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800117e:	6013      	str	r3, [r2, #0]
	ctg_print(&huart2, array);
	strncpy(array,"            ",14);
#endif

	//if(avg_voltage > 0.2)
	if(avg_voltage > 0.47)
 8001180:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f9df 	bl	8000548 <__aeabi_f2d>
 800118a:	a33b      	add	r3, pc, #236	; (adr r3, 8001278 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001190:	f7ff fcc2 	bl	8000b18 <__aeabi_dcmpgt>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d100      	bne.n	800119c <HAL_TIM_PeriodElapsedCallback+0x17c>
				bpm = 0;
				bHeart = false;
			}
		}
	}
}
 800119a:	e069      	b.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x250>
		new_time = HAL_GetTick();
 800119c:	f001 f964 	bl	8002468 <HAL_GetTick>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a49      	ldr	r2, [pc, #292]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80011a4:	6013      	str	r3, [r2, #0]
		current_time = new_time - previous_time;
 80011a6:	4b48      	ldr	r3, [pc, #288]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4b48      	ldr	r3, [pc, #288]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	4a47      	ldr	r2, [pc, #284]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80011b2:	6013      	str	r3, [r2, #0]
		if(current_time > 200)
 80011b4:	4b46      	ldr	r3, [pc, #280]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2bc8      	cmp	r3, #200	; 0xc8
 80011ba:	d959      	bls.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x250>
			previous_time = new_time;
 80011bc:	4b42      	ldr	r3, [pc, #264]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a42      	ldr	r2, [pc, #264]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80011c2:	6013      	str	r3, [r2, #0]
			if(bHeart)
 80011c4:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d050      	beq.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x250>
				bpm = (1.0 / (current_time / 1000.0) ) * 60;
 80011ce:	4b40      	ldr	r3, [pc, #256]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f996 	bl	8000504 <__aeabi_ui2d>
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80011de:	f7ff fb35 	bl	800084c <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	f04f 0000 	mov.w	r0, #0
 80011ea:	493b      	ldr	r1, [pc, #236]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80011ec:	f7ff fb2e 	bl	800084c <__aeabi_ddiv>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	4b37      	ldr	r3, [pc, #220]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80011fe:	f7ff f9fb 	bl	80005f8 <__aeabi_dmul>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f7ff fccd 	bl	8000ba8 <__aeabi_d2uiz>
 800120e:	4603      	mov	r3, r0
 8001210:	b29a      	uxth	r2, r3
 8001212:	4b33      	ldr	r3, [pc, #204]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001214:	801a      	strh	r2, [r3, #0]
				if(bEcg)
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00a      	beq.n	8001236 <HAL_TIM_PeriodElapsedCallback+0x216>
					sprintf(array,"X%d",bpm);
 8001220:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	461a      	mov	r2, r3
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	492d      	ldr	r1, [pc, #180]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800122e:	4618      	mov	r0, r3
 8001230:	f006 ffa2 	bl	8008178 <siprintf>
 8001234:	e009      	b.n	800124a <HAL_TIM_PeriodElapsedCallback+0x22a>
					sprintf(array,"R%d",bpm);
 8001236:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	b29b      	uxth	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	4929      	ldr	r1, [pc, #164]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001244:	4618      	mov	r0, r3
 8001246:	f006 ff97 	bl	8008178 <siprintf>
				ctg_print(&huart2, array);
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	4619      	mov	r1, r3
 8001250:	4826      	ldr	r0, [pc, #152]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001252:	f7ff fe45 	bl	8000ee0 <ctg_print>
				strncpy(array,"",7);
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	2207      	movs	r2, #7
 800125c:	4924      	ldr	r1, [pc, #144]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800125e:	4618      	mov	r0, r3
 8001260:	f006 ffaa 	bl	80081b8 <strncpy>
				bpm = 0;
 8001264:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001266:	2200      	movs	r2, #0
 8001268:	801a      	strh	r2, [r3, #0]
				bHeart = false;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	e147ae14 	.word	0xe147ae14
 800127c:	3fde147a 	.word	0x3fde147a
 8001280:	200002c8 	.word	0x200002c8
 8001284:	200002a8 	.word	0x200002a8
 8001288:	200002a9 	.word	0x200002a9
 800128c:	2000028c 	.word	0x2000028c
 8001290:	20000420 	.word	0x20000420
 8001294:	20000294 	.word	0x20000294
 8001298:	2000027c 	.word	0x2000027c
 800129c:	20000280 	.word	0x20000280
 80012a0:	20000290 	.word	0x20000290
 80012a4:	200002ac 	.word	0x200002ac
 80012a8:	66666667 	.word	0x66666667
 80012ac:	20000298 	.word	0x20000298
 80012b0:	20000284 	.word	0x20000284
 80012b4:	20000288 	.word	0x20000288
 80012b8:	10624dd3 	.word	0x10624dd3
 80012bc:	200002b4 	.word	0x200002b4
 80012c0:	42c80000 	.word	0x42c80000
 80012c4:	20000328 	.word	0x20000328
 80012c8:	2000029c 	.word	0x2000029c
 80012cc:	200002a4 	.word	0x200002a4
 80012d0:	200002a0 	.word	0x200002a0
 80012d4:	408f4000 	.word	0x408f4000
 80012d8:	3ff00000 	.word	0x3ff00000
 80012dc:	404e0000 	.word	0x404e0000
 80012e0:	200002b0 	.word	0x200002b0
 80012e4:	0800a488 	.word	0x0800a488
 80012e8:	0800a48c 	.word	0x0800a48c
 80012ec:	200004d0 	.word	0x200004d0
 80012f0:	0800a490 	.word	0x0800a490

080012f4 <HAL_GPIO_EXTI_Callback>:
bool bSwitch = true;
/* button interrupt callback function */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001304:	d138      	bne.n	8001378 <HAL_GPIO_EXTI_Callback+0x84>
	{
		if(bSwitch == true)
 8001306:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d018      	beq.n	8001340 <HAL_GPIO_EXTI_Callback+0x4c>
		{
			ctg_print(&huart2, "Hartslag");
 800130e:	491d      	ldr	r1, [pc, #116]	; (8001384 <HAL_GPIO_EXTI_Callback+0x90>)
 8001310:	481d      	ldr	r0, [pc, #116]	; (8001388 <HAL_GPIO_EXTI_Callback+0x94>)
 8001312:	f7ff fde5 	bl	8000ee0 <ctg_print>

			/* stop timer and dma for dac */
			HAL_TIM_Base_Stop_IT(&htim2);
 8001316:	481d      	ldr	r0, [pc, #116]	; (800138c <HAL_GPIO_EXTI_Callback+0x98>)
 8001318:	f004 fec4 	bl	80060a4 <HAL_TIM_Base_Stop_IT>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800131c:	2100      	movs	r1, #0
 800131e:	481c      	ldr	r0, [pc, #112]	; (8001390 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001320:	f002 fcd4 	bl	8003ccc <HAL_DAC_Stop_DMA>

			/* switch multiplexer to ecg */
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800132a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132e:	f003 fab5 	bl	800489c <HAL_GPIO_WritePin>

			bEcg = true;
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]

			bSwitch = false;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_GPIO_EXTI_Callback+0x8c>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
			bEcg = false;

			bSwitch = true;
		}
	}
}
 800133e:	e01b      	b.n	8001378 <HAL_GPIO_EXTI_Callback+0x84>
			ctg_print(&huart2, "Ademhaling");
 8001340:	4915      	ldr	r1, [pc, #84]	; (8001398 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001342:	4811      	ldr	r0, [pc, #68]	; (8001388 <HAL_GPIO_EXTI_Callback+0x94>)
 8001344:	f7ff fdcc 	bl	8000ee0 <ctg_print>
			HAL_TIM_Base_Start_IT(&htim2);
 8001348:	4810      	ldr	r0, [pc, #64]	; (800138c <HAL_GPIO_EXTI_Callback+0x98>)
 800134a:	f004 fe3b 	bl	8005fc4 <HAL_TIM_Base_Start_IT>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sinewave32, 32, DAC_ALIGN_12B_R);
 800134e:	2300      	movs	r3, #0
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2320      	movs	r3, #32
 8001354:	4a11      	ldr	r2, [pc, #68]	; (800139c <HAL_GPIO_EXTI_Callback+0xa8>)
 8001356:	2100      	movs	r1, #0
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <HAL_GPIO_EXTI_Callback+0x9c>)
 800135a:	f002 fbeb 	bl	8003b34 <HAL_DAC_Start_DMA>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800135e:	2201      	movs	r2, #1
 8001360:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001368:	f003 fa98 	bl	800489c <HAL_GPIO_WritePin>
			bEcg = false;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_GPIO_EXTI_Callback+0xa0>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
			bSwitch = true;
 8001372:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000080 	.word	0x20000080
 8001384:	0800a494 	.word	0x0800a494
 8001388:	200004d0 	.word	0x200004d0
 800138c:	20000484 	.word	0x20000484
 8001390:	20000314 	.word	0x20000314
 8001394:	200002a9 	.word	0x200002a9
 8001398:	0800a4a0 	.word	0x0800a4a0
 800139c:	20000000 	.word	0x20000000

080013a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	/* initialise linked list with 30 empty nodes */
	for(int i = 0; i < FREQ; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e021      	b.n	80013f0 <main+0x50>
	{
		node_t *n = (node_t*) malloc(sizeof(node_t));
 80013ac:	2008      	movs	r0, #8
 80013ae:	f006 f9a7 	bl	8007700 <malloc>
 80013b2:	4603      	mov	r3, r0
 80013b4:	603b      	str	r3, [r7, #0]
		n->sample = 0.0;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
		n->next = NULL;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	2200      	movs	r2, #0
 80013c2:	605a      	str	r2, [r3, #4]

		if(head == NULL)
 80013c4:	4b42      	ldr	r3, [pc, #264]	; (80014d0 <main+0x130>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d107      	bne.n	80013dc <main+0x3c>
		{
			head = n;
 80013cc:	4a40      	ldr	r2, [pc, #256]	; (80014d0 <main+0x130>)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	6013      	str	r3, [r2, #0]
			tail = head;
 80013d2:	4b3f      	ldr	r3, [pc, #252]	; (80014d0 <main+0x130>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a3f      	ldr	r2, [pc, #252]	; (80014d4 <main+0x134>)
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e006      	b.n	80013ea <main+0x4a>
		}
		else
		{
			n->next = head;
 80013dc:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <main+0x130>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	605a      	str	r2, [r3, #4]
			head = n;
 80013e4:	4a3a      	ldr	r2, [pc, #232]	; (80014d0 <main+0x130>)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < FREQ; i++)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	3301      	adds	r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b25      	cmp	r3, #37	; 0x25
 80013f4:	ddda      	ble.n	80013ac <main+0xc>
		}
	}

	for(int i = 0; i < AVG; i++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	e021      	b.n	8001440 <main+0xa0>
	{
		node_t *n = (node_t*) malloc(sizeof(node_t));
 80013fc:	2008      	movs	r0, #8
 80013fe:	f006 f97f 	bl	8007700 <malloc>
 8001402:	4603      	mov	r3, r0
 8001404:	607b      	str	r3, [r7, #4]
		n->sample = 0.0;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
		n->next = NULL;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]

		if(root == NULL)
 8001414:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <main+0x138>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d107      	bne.n	800142c <main+0x8c>
		{
			root = n;
 800141c:	4a2e      	ldr	r2, [pc, #184]	; (80014d8 <main+0x138>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
			leaf = root;
 8001422:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <main+0x138>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a2d      	ldr	r2, [pc, #180]	; (80014dc <main+0x13c>)
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e006      	b.n	800143a <main+0x9a>
		}
		else
		{
			n->next = root;
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <main+0x138>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	605a      	str	r2, [r3, #4]
			root = n;
 8001434:	4a28      	ldr	r2, [pc, #160]	; (80014d8 <main+0x138>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < AVG; i++)
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3301      	adds	r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b63      	cmp	r3, #99	; 0x63
 8001444:	ddda      	ble.n	80013fc <main+0x5c>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001446:	f000 ff9f 	bl	8002388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144a:	f000 f85d 	bl	8001508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144e:	f000 fb93 	bl	8001b78 <MX_GPIO_Init>
  MX_DMA_Init();
 8001452:	f000 fb73 	bl	8001b3c <MX_DMA_Init>
  MX_DAC1_Init();
 8001456:	f000 f9b9 	bl	80017cc <MX_DAC1_Init>
  MX_TIM2_Init();
 800145a:	f000 f9e9 	bl	8001830 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800145e:	f000 fb3d 	bl	8001adc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001462:	f000 f8d9 	bl	8001618 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001466:	f000 fa53 	bl	8001910 <MX_TIM3_Init>
  MX_TIM4_Init();
 800146a:	f000 fac3 	bl	80019f4 <MX_TIM4_Init>
  MX_ADC2_Init();
 800146e:	f000 f949 	bl	8001704 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /* start timer with interrupt for adc */
  HAL_TIM_Base_Start_IT(&htim3);
 8001472:	481b      	ldr	r0, [pc, #108]	; (80014e0 <main+0x140>)
 8001474:	f004 fda6 	bl	8005fc4 <HAL_TIM_Base_Start_IT>

  /* start timer for uart sending*/
  HAL_TIM_Base_Start_IT(&htim4);
 8001478:	481a      	ldr	r0, [pc, #104]	; (80014e4 <main+0x144>)
 800147a:	f004 fda3 	bl	8005fc4 <HAL_TIM_Base_Start_IT>

  /* test print */
  ctg_print(&huart2, "PEE50 cardiotacograph");
 800147e:	491a      	ldr	r1, [pc, #104]	; (80014e8 <main+0x148>)
 8001480:	481a      	ldr	r0, [pc, #104]	; (80014ec <main+0x14c>)
 8001482:	f7ff fd2d 	bl	8000ee0 <ctg_print>

  /* start with measuring heart rate */
  ctg_print(&huart2, "Hartslag");
 8001486:	491a      	ldr	r1, [pc, #104]	; (80014f0 <main+0x150>)
 8001488:	4818      	ldr	r0, [pc, #96]	; (80014ec <main+0x14c>)
 800148a:	f7ff fd29 	bl	8000ee0 <ctg_print>

  /* stop timer and dma for dac */
  HAL_TIM_Base_Stop_IT(&htim2);
 800148e:	4819      	ldr	r0, [pc, #100]	; (80014f4 <main+0x154>)
 8001490:	f004 fe08 	bl	80060a4 <HAL_TIM_Base_Stop_IT>
  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001494:	2100      	movs	r1, #0
 8001496:	4818      	ldr	r0, [pc, #96]	; (80014f8 <main+0x158>)
 8001498:	f002 fc18 	bl	8003ccc <HAL_DAC_Stop_DMA>

  /* start timer and dma for dac */
  HAL_TIM_Base_Start_IT(&htim2);
 800149c:	4815      	ldr	r0, [pc, #84]	; (80014f4 <main+0x154>)
 800149e:	f004 fd91 	bl	8005fc4 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sinewave32, 32, DAC_ALIGN_12B_R);
 80014a2:	2300      	movs	r3, #0
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2320      	movs	r3, #32
 80014a8:	4a14      	ldr	r2, [pc, #80]	; (80014fc <main+0x15c>)
 80014aa:	2100      	movs	r1, #0
 80014ac:	4812      	ldr	r0, [pc, #72]	; (80014f8 <main+0x158>)
 80014ae:	f002 fb41 	bl	8003b34 <HAL_DAC_Start_DMA>

  /* switch multiplexer to ecg */
  //reset is:
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014bc:	f003 f9ee 	bl	800489c <HAL_GPIO_WritePin>

  bEcg = true;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <main+0x160>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]

  bSwitch = false;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <main+0x164>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <main+0x12c>
 80014ce:	bf00      	nop
 80014d0:	2000027c 	.word	0x2000027c
 80014d4:	20000280 	.word	0x20000280
 80014d8:	20000284 	.word	0x20000284
 80014dc:	20000288 	.word	0x20000288
 80014e0:	2000038c 	.word	0x2000038c
 80014e4:	200002c8 	.word	0x200002c8
 80014e8:	0800a4ac 	.word	0x0800a4ac
 80014ec:	200004d0 	.word	0x200004d0
 80014f0:	0800a494 	.word	0x0800a494
 80014f4:	20000484 	.word	0x20000484
 80014f8:	20000314 	.word	0x20000314
 80014fc:	20000000 	.word	0x20000000
 8001500:	200002a9 	.word	0x200002a9
 8001504:	20000080 	.word	0x20000080

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b0b8      	sub	sp, #224	; 0xe0
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001512:	2244      	movs	r2, #68	; 0x44
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f006 f902 	bl	8007720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800152c:	463b      	mov	r3, r7
 800152e:	2288      	movs	r2, #136	; 0x88
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f006 f8f4 	bl	8007720 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001538:	2302      	movs	r3, #2
 800153a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800153e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001542:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001546:	2310      	movs	r3, #16
 8001548:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154c:	2302      	movs	r3, #2
 800154e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001552:	2302      	movs	r3, #2
 8001554:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001558:	2301      	movs	r3, #1
 800155a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800155e:	230a      	movs	r3, #10
 8001560:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001564:	2307      	movs	r3, #7
 8001566:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800156a:	2302      	movs	r3, #2
 800156c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001570:	2302      	movs	r3, #2
 8001572:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001576:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fa22 	bl	80049c4 <HAL_RCC_OscConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001586:	f000 fb67 	bl	8001c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158a:	230f      	movs	r3, #15
 800158c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001590:	2303      	movs	r3, #3
 8001592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80015ac:	2104      	movs	r1, #4
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 fdee 	bl	8005190 <HAL_RCC_ClockConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80015ba:	f000 fb4d 	bl	8001c58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80015be:	f244 0302 	movw	r3, #16386	; 0x4002
 80015c2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80015c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015cc:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80015ce:	2302      	movs	r3, #2
 80015d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80015d2:	2301      	movs	r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80015d6:	2308      	movs	r3, #8
 80015d8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80015da:	2307      	movs	r3, #7
 80015dc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80015de:	2302      	movs	r3, #2
 80015e0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80015e2:	2302      	movs	r3, #2
 80015e4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80015e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015ea:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ec:	463b      	mov	r3, r7
 80015ee:	4618      	mov	r0, r3
 80015f0:	f003 ffd4 	bl	800559c <HAL_RCCEx_PeriphCLKConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80015fa:	f000 fb2d 	bl	8001c58 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001602:	f003 f989 	bl	8004918 <HAL_PWREx_ControlVoltageScaling>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0x108>
  {
    Error_Handler();
 800160c:	f000 fb24 	bl	8001c58 <Error_Handler>
  }
}
 8001610:	bf00      	nop
 8001612:	37e0      	adds	r7, #224	; 0xe0
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
 8001638:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800163a:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <MX_ADC1_Init+0xe0>)
 800163c:	4a2f      	ldr	r2, [pc, #188]	; (80016fc <MX_ADC1_Init+0xe4>)
 800163e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001640:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <MX_ADC1_Init+0xe0>)
 8001642:	2200      	movs	r2, #0
 8001644:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001646:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <MX_ADC1_Init+0xe0>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800164c:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <MX_ADC1_Init+0xe0>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <MX_ADC1_Init+0xe0>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001658:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <MX_ADC1_Init+0xe0>)
 800165a:	2204      	movs	r2, #4
 800165c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800165e:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <MX_ADC1_Init+0xe0>)
 8001660:	2200      	movs	r2, #0
 8001662:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001664:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <MX_ADC1_Init+0xe0>)
 8001666:	2200      	movs	r2, #0
 8001668:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <MX_ADC1_Init+0xe0>)
 800166c:	2201      	movs	r2, #1
 800166e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <MX_ADC1_Init+0xe0>)
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001678:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <MX_ADC1_Init+0xe0>)
 800167a:	2200      	movs	r2, #0
 800167c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800167e:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <MX_ADC1_Init+0xe0>)
 8001680:	2200      	movs	r2, #0
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_ADC1_Init+0xe0>)
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_ADC1_Init+0xe0>)
 800168e:	2200      	movs	r2, #0
 8001690:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <MX_ADC1_Init+0xe0>)
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800169a:	4817      	ldr	r0, [pc, #92]	; (80016f8 <MX_ADC1_Init+0xe0>)
 800169c:	f001 f8f8 	bl	8002890 <HAL_ADC_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80016a6:	f000 fad7 	bl	8001c58 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	4810      	ldr	r0, [pc, #64]	; (80016f8 <MX_ADC1_Init+0xe0>)
 80016b6:	f002 f859 	bl	800376c <HAL_ADCEx_MultiModeConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80016c0:	f000 faca 	bl	8001c58 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_ADC1_Init+0xe8>)
 80016c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016c8:	2306      	movs	r3, #6
 80016ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016d0:	237f      	movs	r3, #127	; 0x7f
 80016d2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016d4:	2304      	movs	r3, #4
 80016d6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_ADC1_Init+0xe0>)
 80016e2:	f001 fbcb 	bl	8002e7c <HAL_ADC_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80016ec:	f000 fab4 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	3728      	adds	r7, #40	; 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000420 	.word	0x20000420
 80016fc:	50040000 	.word	0x50040000
 8001700:	14f00020 	.word	0x14f00020

08001704 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800170a:	463b      	mov	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800171a:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <MX_ADC2_Init+0xbc>)
 800171c:	4a29      	ldr	r2, [pc, #164]	; (80017c4 <MX_ADC2_Init+0xc0>)
 800171e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001720:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <MX_ADC2_Init+0xbc>)
 8001722:	2200      	movs	r2, #0
 8001724:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <MX_ADC2_Init+0xbc>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800172c:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <MX_ADC2_Init+0xbc>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <MX_ADC2_Init+0xbc>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001738:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <MX_ADC2_Init+0xbc>)
 800173a:	2204      	movs	r2, #4
 800173c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <MX_ADC2_Init+0xbc>)
 8001740:	2200      	movs	r2, #0
 8001742:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <MX_ADC2_Init+0xbc>)
 8001746:	2200      	movs	r2, #0
 8001748:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800174a:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <MX_ADC2_Init+0xbc>)
 800174c:	2201      	movs	r2, #1
 800174e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <MX_ADC2_Init+0xbc>)
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <MX_ADC2_Init+0xbc>)
 800175a:	2200      	movs	r2, #0
 800175c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800175e:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_ADC2_Init+0xbc>)
 8001760:	2200      	movs	r2, #0
 8001762:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_ADC2_Init+0xbc>)
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_ADC2_Init+0xbc>)
 800176e:	2200      	movs	r2, #0
 8001770:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <MX_ADC2_Init+0xbc>)
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800177a:	4811      	ldr	r0, [pc, #68]	; (80017c0 <MX_ADC2_Init+0xbc>)
 800177c:	f001 f888 	bl	8002890 <HAL_ADC_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8001786:	f000 fa67 	bl	8001c58 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_ADC2_Init+0xc4>)
 800178c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800178e:	2306      	movs	r3, #6
 8001790:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001796:	237f      	movs	r3, #127	; 0x7f
 8001798:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800179a:	2304      	movs	r3, #4
 800179c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017a2:	463b      	mov	r3, r7
 80017a4:	4619      	mov	r1, r3
 80017a6:	4806      	ldr	r0, [pc, #24]	; (80017c0 <MX_ADC2_Init+0xbc>)
 80017a8:	f001 fb68 	bl	8002e7c <HAL_ADC_ConfigChannel>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80017b2:	f000 fa51 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000328 	.word	0x20000328
 80017c4:	50040100 	.word	0x50040100
 80017c8:	3ef08000 	.word	0x3ef08000

080017cc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2224      	movs	r2, #36	; 0x24
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f005 ffa1 	bl	8007720 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <MX_DAC1_Init+0x5c>)
 80017e0:	4a12      	ldr	r2, [pc, #72]	; (800182c <MX_DAC1_Init+0x60>)
 80017e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80017e4:	4810      	ldr	r0, [pc, #64]	; (8001828 <MX_DAC1_Init+0x5c>)
 80017e6:	f002 f982 	bl	8003aee <HAL_DAC_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80017f0:	f000 fa32 	bl	8001c58 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80017f8:	2324      	movs	r3, #36	; 0x24
 80017fa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	2200      	movs	r2, #0
 800180c:	4619      	mov	r1, r3
 800180e:	4806      	ldr	r0, [pc, #24]	; (8001828 <MX_DAC1_Init+0x5c>)
 8001810:	f002 fabf 	bl	8003d92 <HAL_DAC_ConfigChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800181a:	f000 fa1d 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	3728      	adds	r7, #40	; 0x28
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000314 	.word	0x20000314
 800182c:	40007400 	.word	0x40007400

08001830 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	; 0x30
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001836:	f107 0320 	add.w	r3, r7, #32
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <MX_TIM2_Init+0xdc>)
 800185e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001862:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001864:	4b29      	ldr	r3, [pc, #164]	; (800190c <MX_TIM2_Init+0xdc>)
 8001866:	2200      	movs	r2, #0
 8001868:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186a:	4b28      	ldr	r3, [pc, #160]	; (800190c <MX_TIM2_Init+0xdc>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24;
 8001870:	4b26      	ldr	r3, [pc, #152]	; (800190c <MX_TIM2_Init+0xdc>)
 8001872:	2218      	movs	r2, #24
 8001874:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001876:	4b25      	ldr	r3, [pc, #148]	; (800190c <MX_TIM2_Init+0xdc>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800187c:	4b23      	ldr	r3, [pc, #140]	; (800190c <MX_TIM2_Init+0xdc>)
 800187e:	2280      	movs	r2, #128	; 0x80
 8001880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001882:	4822      	ldr	r0, [pc, #136]	; (800190c <MX_TIM2_Init+0xdc>)
 8001884:	f004 fb46 	bl	8005f14 <HAL_TIM_Base_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800188e:	f000 f9e3 	bl	8001c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001896:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001898:	f107 0320 	add.w	r3, r7, #32
 800189c:	4619      	mov	r1, r3
 800189e:	481b      	ldr	r0, [pc, #108]	; (800190c <MX_TIM2_Init+0xdc>)
 80018a0:	f004 fe43 	bl	800652a <HAL_TIM_ConfigClockSource>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80018aa:	f000 f9d5 	bl	8001c58 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80018ae:	4817      	ldr	r0, [pc, #92]	; (800190c <MX_TIM2_Init+0xdc>)
 80018b0:	f004 fc27 	bl	8006102 <HAL_TIM_IC_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80018ba:	f000 f9cd 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018be:	2320      	movs	r3, #32
 80018c0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	4619      	mov	r1, r3
 80018cc:	480f      	ldr	r0, [pc, #60]	; (800190c <MX_TIM2_Init+0xdc>)
 80018ce:	f005 f973 	bl	8006bb8 <HAL_TIMEx_MasterConfigSynchronization>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80018d8:	f000 f9be 	bl	8001c58 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018e0:	2301      	movs	r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	2200      	movs	r2, #0
 80018f0:	4619      	mov	r1, r3
 80018f2:	4806      	ldr	r0, [pc, #24]	; (800190c <MX_TIM2_Init+0xdc>)
 80018f4:	f004 fd85 	bl	8006402 <HAL_TIM_IC_ConfigChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80018fe:	f000 f9ab 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	3730      	adds	r7, #48	; 0x30
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000484 	.word	0x20000484

08001910 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08c      	sub	sp, #48	; 0x30
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001916:	f107 0320 	add.w	r3, r7, #32
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800193c:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <MX_TIM3_Init+0xdc>)
 800193e:	4a2c      	ldr	r2, [pc, #176]	; (80019f0 <MX_TIM3_Init+0xe0>)
 8001940:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001942:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <MX_TIM3_Init+0xdc>)
 8001944:	2200      	movs	r2, #0
 8001946:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	4b28      	ldr	r3, [pc, #160]	; (80019ec <MX_TIM3_Init+0xdc>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 800194e:	4b27      	ldr	r3, [pc, #156]	; (80019ec <MX_TIM3_Init+0xdc>)
 8001950:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001954:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001956:	4b25      	ldr	r3, [pc, #148]	; (80019ec <MX_TIM3_Init+0xdc>)
 8001958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800195c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800195e:	4b23      	ldr	r3, [pc, #140]	; (80019ec <MX_TIM3_Init+0xdc>)
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001964:	4821      	ldr	r0, [pc, #132]	; (80019ec <MX_TIM3_Init+0xdc>)
 8001966:	f004 fad5 	bl	8005f14 <HAL_TIM_Base_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001970:	f000 f972 	bl	8001c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001978:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800197a:	f107 0320 	add.w	r3, r7, #32
 800197e:	4619      	mov	r1, r3
 8001980:	481a      	ldr	r0, [pc, #104]	; (80019ec <MX_TIM3_Init+0xdc>)
 8001982:	f004 fdd2 	bl	800652a <HAL_TIM_ConfigClockSource>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800198c:	f000 f964 	bl	8001c58 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001990:	4816      	ldr	r0, [pc, #88]	; (80019ec <MX_TIM3_Init+0xdc>)
 8001992:	f004 fbb6 	bl	8006102 <HAL_TIM_IC_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800199c:	f000 f95c 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4619      	mov	r1, r3
 80019ae:	480f      	ldr	r0, [pc, #60]	; (80019ec <MX_TIM3_Init+0xdc>)
 80019b0:	f005 f902 	bl	8006bb8 <HAL_TIMEx_MasterConfigSynchronization>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80019ba:	f000 f94d 	bl	8001c58 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019be:	2300      	movs	r3, #0
 80019c0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019c2:	2301      	movs	r3, #1
 80019c4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	2200      	movs	r2, #0
 80019d2:	4619      	mov	r1, r3
 80019d4:	4805      	ldr	r0, [pc, #20]	; (80019ec <MX_TIM3_Init+0xdc>)
 80019d6:	f004 fd14 	bl	8006402 <HAL_TIM_IC_ConfigChannel>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80019e0:	f000 f93a 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	3730      	adds	r7, #48	; 0x30
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	2000038c 	.word	0x2000038c
 80019f0:	40000400 	.word	0x40000400

080019f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08c      	sub	sp, #48	; 0x30
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fa:	f107 0320 	add.w	r3, r7, #32
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a20:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <MX_TIM4_Init+0xe0>)
 8001a22:	4a2d      	ldr	r2, [pc, #180]	; (8001ad8 <MX_TIM4_Init+0xe4>)
 8001a24:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20000;
 8001a26:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <MX_TIM4_Init+0xe0>)
 8001a28:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a2c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <MX_TIM4_Init+0xe0>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4000;
 8001a34:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <MX_TIM4_Init+0xe0>)
 8001a36:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001a3a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <MX_TIM4_Init+0xe0>)
 8001a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <MX_TIM4_Init+0xe0>)
 8001a46:	2280      	movs	r2, #128	; 0x80
 8001a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a4a:	4822      	ldr	r0, [pc, #136]	; (8001ad4 <MX_TIM4_Init+0xe0>)
 8001a4c:	f004 fa62 	bl	8005f14 <HAL_TIM_Base_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001a56:	f000 f8ff 	bl	8001c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a60:	f107 0320 	add.w	r3, r7, #32
 8001a64:	4619      	mov	r1, r3
 8001a66:	481b      	ldr	r0, [pc, #108]	; (8001ad4 <MX_TIM4_Init+0xe0>)
 8001a68:	f004 fd5f 	bl	800652a <HAL_TIM_ConfigClockSource>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001a72:	f000 f8f1 	bl	8001c58 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001a76:	4817      	ldr	r0, [pc, #92]	; (8001ad4 <MX_TIM4_Init+0xe0>)
 8001a78:	f004 fb43 	bl	8006102 <HAL_TIM_IC_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001a82:	f000 f8e9 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	480f      	ldr	r0, [pc, #60]	; (8001ad4 <MX_TIM4_Init+0xe0>)
 8001a96:	f005 f88f 	bl	8006bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001aa0:	f000 f8da 	bl	8001c58 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <MX_TIM4_Init+0xe0>)
 8001abc:	f004 fca1 	bl	8006402 <HAL_TIM_IC_ConfigChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001ac6:	f000 f8c7 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	3730      	adds	r7, #48	; 0x30
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200002c8 	.word	0x200002c8
 8001ad8:	40000800 	.word	0x40000800

08001adc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001ae2:	4a15      	ldr	r2, [pc, #84]	; (8001b38 <MX_USART2_UART_Init+0x5c>)
 8001ae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b02:	2208      	movs	r2, #8
 8001b04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b20:	f005 f8f0 	bl	8006d04 <HAL_UART_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b2a:	f000 f895 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200004d0 	.word	0x200004d0
 8001b38:	40004400 	.word	0x40004400

08001b3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <MX_DMA_Init+0x38>)
 8001b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b46:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <MX_DMA_Init+0x38>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6493      	str	r3, [r2, #72]	; 0x48
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <MX_DMA_Init+0x38>)
 8001b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	200d      	movs	r0, #13
 8001b60:	f001 ff8f 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001b64:	200d      	movs	r0, #13
 8001b66:	f001 ffa8 	bl	8003aba <HAL_NVIC_EnableIRQ>

}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000

08001b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8e:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <MX_GPIO_Init+0xd4>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	4a2e      	ldr	r2, [pc, #184]	; (8001c4c <MX_GPIO_Init+0xd4>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b9a:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <MX_GPIO_Init+0xd4>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ba6:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <MX_GPIO_Init+0xd4>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	4a28      	ldr	r2, [pc, #160]	; (8001c4c <MX_GPIO_Init+0xd4>)
 8001bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bb2:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <MX_GPIO_Init+0xd4>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	4b23      	ldr	r3, [pc, #140]	; (8001c4c <MX_GPIO_Init+0xd4>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	4a22      	ldr	r2, [pc, #136]	; (8001c4c <MX_GPIO_Init+0xd4>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <MX_GPIO_Init+0xd4>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <MX_GPIO_Init+0xd4>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <MX_GPIO_Init+0xd4>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be2:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <MX_GPIO_Init+0xd4>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2120      	movs	r1, #32
 8001bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf6:	f002 fe51 	bl	800489c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <MX_GPIO_Init+0xd8>)
 8001c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4811      	ldr	r0, [pc, #68]	; (8001c54 <MX_GPIO_Init+0xdc>)
 8001c10:	f002 fc9a 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c14:	2320      	movs	r3, #32
 8001c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c2e:	f002 fc8b 	bl	8004548 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	2028      	movs	r0, #40	; 0x28
 8001c38:	f001 ff23 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c3c:	2028      	movs	r0, #40	; 0x28
 8001c3e:	f001 ff3c 	bl	8003aba <HAL_NVIC_EnableIRQ>

}
 8001c42:	bf00      	nop
 8001c44:	3728      	adds	r7, #40	; 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	10210000 	.word	0x10210000
 8001c54:	48000800 	.word	0x48000800

08001c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c5c:	b672      	cpsid	i
}
 8001c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <Error_Handler+0x8>
	...

08001c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6613      	str	r3, [r2, #96]	; 0x60
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000

08001cac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08c      	sub	sp, #48	; 0x30
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a3f      	ldr	r2, [pc, #252]	; (8001dc8 <HAL_ADC_MspInit+0x11c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d146      	bne.n	8001d5c <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001cce:	4b3f      	ldr	r3, [pc, #252]	; (8001dcc <HAL_ADC_MspInit+0x120>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	4a3d      	ldr	r2, [pc, #244]	; (8001dcc <HAL_ADC_MspInit+0x120>)
 8001cd6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001cd8:	4b3c      	ldr	r3, [pc, #240]	; (8001dcc <HAL_ADC_MspInit+0x120>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d10b      	bne.n	8001cf8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001ce0:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <HAL_ADC_MspInit+0x124>)
 8001ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce4:	4a3a      	ldr	r2, [pc, #232]	; (8001dd0 <HAL_ADC_MspInit+0x124>)
 8001ce6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cec:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <HAL_ADC_MspInit+0x124>)
 8001cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf8:	4b35      	ldr	r3, [pc, #212]	; (8001dd0 <HAL_ADC_MspInit+0x124>)
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfc:	4a34      	ldr	r2, [pc, #208]	; (8001dd0 <HAL_ADC_MspInit+0x124>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d04:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <HAL_ADC_MspInit+0x124>)
 8001d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d10:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <HAL_ADC_MspInit+0x124>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d14:	4a2e      	ldr	r2, [pc, #184]	; (8001dd0 <HAL_ADC_MspInit+0x124>)
 8001d16:	f043 0302 	orr.w	r3, r3, #2
 8001d1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1c:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <HAL_ADC_MspInit+0x124>)
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d2c:	230b      	movs	r3, #11
 8001d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d34:	f107 031c 	add.w	r3, r7, #28
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3e:	f002 fc03 	bl	8004548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d42:	2301      	movs	r3, #1
 8001d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d46:	230b      	movs	r3, #11
 8001d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4e:	f107 031c 	add.w	r3, r7, #28
 8001d52:	4619      	mov	r1, r3
 8001d54:	481f      	ldr	r0, [pc, #124]	; (8001dd4 <HAL_ADC_MspInit+0x128>)
 8001d56:	f002 fbf7 	bl	8004548 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001d5a:	e031      	b.n	8001dc0 <HAL_ADC_MspInit+0x114>
  else if(hadc->Instance==ADC2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1d      	ldr	r2, [pc, #116]	; (8001dd8 <HAL_ADC_MspInit+0x12c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d12c      	bne.n	8001dc0 <HAL_ADC_MspInit+0x114>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001d66:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_ADC_MspInit+0x120>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	4a17      	ldr	r2, [pc, #92]	; (8001dcc <HAL_ADC_MspInit+0x120>)
 8001d6e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_ADC_MspInit+0x120>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d10b      	bne.n	8001d90 <HAL_ADC_MspInit+0xe4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001d78:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_ADC_MspInit+0x124>)
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7c:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <HAL_ADC_MspInit+0x124>)
 8001d7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_ADC_MspInit+0x124>)
 8001d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_ADC_MspInit+0x124>)
 8001d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d94:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <HAL_ADC_MspInit+0x124>)
 8001d96:	f043 0302 	orr.w	r3, r3, #2
 8001d9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <HAL_ADC_MspInit+0x124>)
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001da8:	2301      	movs	r3, #1
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001dac:	230b      	movs	r3, #11
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db4:	f107 031c 	add.w	r3, r7, #28
 8001db8:	4619      	mov	r1, r3
 8001dba:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <HAL_ADC_MspInit+0x128>)
 8001dbc:	f002 fbc4 	bl	8004548 <HAL_GPIO_Init>
}
 8001dc0:	bf00      	nop
 8001dc2:	3730      	adds	r7, #48	; 0x30
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	50040000 	.word	0x50040000
 8001dcc:	200002b8 	.word	0x200002b8
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	48000400 	.word	0x48000400
 8001dd8:	50040100 	.word	0x50040100

08001ddc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a2b      	ldr	r2, [pc, #172]	; (8001ea8 <HAL_DAC_MspInit+0xcc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d150      	bne.n	8001ea0 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <HAL_DAC_MspInit+0xd0>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	4a2a      	ldr	r2, [pc, #168]	; (8001eac <HAL_DAC_MspInit+0xd0>)
 8001e04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e08:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0a:	4b28      	ldr	r3, [pc, #160]	; (8001eac <HAL_DAC_MspInit+0xd0>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	4b25      	ldr	r3, [pc, #148]	; (8001eac <HAL_DAC_MspInit+0xd0>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	4a24      	ldr	r2, [pc, #144]	; (8001eac <HAL_DAC_MspInit+0xd0>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e22:	4b22      	ldr	r3, [pc, #136]	; (8001eac <HAL_DAC_MspInit+0xd0>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e2e:	2310      	movs	r3, #16
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e32:	2303      	movs	r3, #3
 8001e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e44:	f002 fb80 	bl	8004548 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001e48:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_DAC_MspInit+0xd4>)
 8001e4a:	4a1a      	ldr	r2, [pc, #104]	; (8001eb4 <HAL_DAC_MspInit+0xd8>)
 8001e4c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001e4e:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <HAL_DAC_MspInit+0xd4>)
 8001e50:	2206      	movs	r2, #6
 8001e52:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e54:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_DAC_MspInit+0xd4>)
 8001e56:	2210      	movs	r2, #16
 8001e58:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <HAL_DAC_MspInit+0xd4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_DAC_MspInit+0xd4>)
 8001e62:	2280      	movs	r2, #128	; 0x80
 8001e64:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e66:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_DAC_MspInit+0xd4>)
 8001e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e6c:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <HAL_DAC_MspInit+0xd4>)
 8001e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e74:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_DAC_MspInit+0xd4>)
 8001e78:	2220      	movs	r2, #32
 8001e7a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_DAC_MspInit+0xd4>)
 8001e7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001e84:	480a      	ldr	r0, [pc, #40]	; (8001eb0 <HAL_DAC_MspInit+0xd4>)
 8001e86:	f002 f929 	bl	80040dc <HAL_DMA_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001e90:	f7ff fee2 	bl	8001c58 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a06      	ldr	r2, [pc, #24]	; (8001eb0 <HAL_DAC_MspInit+0xd4>)
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <HAL_DAC_MspInit+0xd4>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001ea0:	bf00      	nop
 8001ea2:	3728      	adds	r7, #40	; 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40007400 	.word	0x40007400
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	200003d8 	.word	0x200003d8
 8001eb4:	40020030 	.word	0x40020030

08001eb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08e      	sub	sp, #56	; 0x38
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed8:	d12a      	bne.n	8001f30 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eda:	4b4d      	ldr	r3, [pc, #308]	; (8002010 <HAL_TIM_Base_MspInit+0x158>)
 8001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ede:	4a4c      	ldr	r2, [pc, #304]	; (8002010 <HAL_TIM_Base_MspInit+0x158>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee6:	4b4a      	ldr	r3, [pc, #296]	; (8002010 <HAL_TIM_Base_MspInit+0x158>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	623b      	str	r3, [r7, #32]
 8001ef0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef2:	4b47      	ldr	r3, [pc, #284]	; (8002010 <HAL_TIM_Base_MspInit+0x158>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	4a46      	ldr	r2, [pc, #280]	; (8002010 <HAL_TIM_Base_MspInit+0x158>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001efe:	4b44      	ldr	r3, [pc, #272]	; (8002010 <HAL_TIM_Base_MspInit+0x158>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f24:	4619      	mov	r1, r3
 8001f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f2a:	f002 fb0d 	bl	8004548 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f2e:	e06b      	b.n	8002008 <HAL_TIM_Base_MspInit+0x150>
  else if(htim_base->Instance==TIM3)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a37      	ldr	r2, [pc, #220]	; (8002014 <HAL_TIM_Base_MspInit+0x15c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d131      	bne.n	8001f9e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f3a:	4b35      	ldr	r3, [pc, #212]	; (8002010 <HAL_TIM_Base_MspInit+0x158>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	4a34      	ldr	r2, [pc, #208]	; (8002010 <HAL_TIM_Base_MspInit+0x158>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	6593      	str	r3, [r2, #88]	; 0x58
 8001f46:	4b32      	ldr	r3, [pc, #200]	; (8002010 <HAL_TIM_Base_MspInit+0x158>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	4b2f      	ldr	r3, [pc, #188]	; (8002010 <HAL_TIM_Base_MspInit+0x158>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	4a2e      	ldr	r2, [pc, #184]	; (8002010 <HAL_TIM_Base_MspInit+0x158>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5e:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <HAL_TIM_Base_MspInit+0x158>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f6a:	2340      	movs	r3, #64	; 0x40
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f82:	4619      	mov	r1, r3
 8001f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f88:	f002 fade 	bl	8004548 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	201d      	movs	r0, #29
 8001f92:	f001 fd76 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f96:	201d      	movs	r0, #29
 8001f98:	f001 fd8f 	bl	8003aba <HAL_NVIC_EnableIRQ>
}
 8001f9c:	e034      	b.n	8002008 <HAL_TIM_Base_MspInit+0x150>
  else if(htim_base->Instance==TIM4)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <HAL_TIM_Base_MspInit+0x160>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d12f      	bne.n	8002008 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fa8:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_TIM_Base_MspInit+0x158>)
 8001faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fac:	4a18      	ldr	r2, [pc, #96]	; (8002010 <HAL_TIM_Base_MspInit+0x158>)
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb4:	4b16      	ldr	r3, [pc, #88]	; (8002010 <HAL_TIM_Base_MspInit+0x158>)
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <HAL_TIM_Base_MspInit+0x158>)
 8001fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc4:	4a12      	ldr	r2, [pc, #72]	; (8002010 <HAL_TIM_Base_MspInit+0x158>)
 8001fc6:	f043 0302 	orr.w	r3, r3, #2
 8001fca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fcc:	4b10      	ldr	r3, [pc, #64]	; (8002010 <HAL_TIM_Base_MspInit+0x158>)
 8001fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fd8:	2340      	movs	r3, #64	; 0x40
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	480a      	ldr	r0, [pc, #40]	; (800201c <HAL_TIM_Base_MspInit+0x164>)
 8001ff4:	f002 faa8 	bl	8004548 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	201e      	movs	r0, #30
 8001ffe:	f001 fd40 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002002:	201e      	movs	r0, #30
 8002004:	f001 fd59 	bl	8003aba <HAL_NVIC_EnableIRQ>
}
 8002008:	bf00      	nop
 800200a:	3738      	adds	r7, #56	; 0x38
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40021000 	.word	0x40021000
 8002014:	40000400 	.word	0x40000400
 8002018:	40000800 	.word	0x40000800
 800201c:	48000400 	.word	0x48000400

08002020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a17      	ldr	r2, [pc, #92]	; (800209c <HAL_UART_MspInit+0x7c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d128      	bne.n	8002094 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <HAL_UART_MspInit+0x80>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	4a16      	ldr	r2, [pc, #88]	; (80020a0 <HAL_UART_MspInit+0x80>)
 8002048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800204c:	6593      	str	r3, [r2, #88]	; 0x58
 800204e:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <HAL_UART_MspInit+0x80>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <HAL_UART_MspInit+0x80>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	4a10      	ldr	r2, [pc, #64]	; (80020a0 <HAL_UART_MspInit+0x80>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_UART_MspInit+0x80>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002072:	230c      	movs	r3, #12
 8002074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207e:	2303      	movs	r3, #3
 8002080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002082:	2307      	movs	r3, #7
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	4619      	mov	r1, r3
 800208c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002090:	f002 fa5a 	bl	8004548 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002094:	bf00      	nop
 8002096:	3728      	adds	r7, #40	; 0x28
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40004400 	.word	0x40004400
 80020a0:	40021000 	.word	0x40021000

080020a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <NMI_Handler+0x4>

080020aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <HardFault_Handler+0x4>

080020b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <MemManage_Handler+0x4>

080020b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ba:	e7fe      	b.n	80020ba <BusFault_Handler+0x4>

080020bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <UsageFault_Handler+0x4>

080020c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f0:	f000 f9a6 	bl	8002440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <DMA1_Channel3_IRQHandler+0x10>)
 80020fe:	f002 f943 	bl	8004388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200003d8 	.word	0x200003d8

0800210c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <TIM3_IRQHandler+0x10>)
 8002112:	f004 f857 	bl	80061c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	2000038c 	.word	0x2000038c

08002120 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <TIM4_IRQHandler+0x10>)
 8002126:	f004 f84d 	bl	80061c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200002c8 	.word	0x200002c8

08002134 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002138:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800213c:	f002 fbc6 	bl	80048cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}

08002144 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
	return 1;
 8002148:	2301      	movs	r3, #1
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <_kill>:

int _kill(int pid, int sig)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800215e:	f005 faa5 	bl	80076ac <__errno>
 8002162:	4603      	mov	r3, r0
 8002164:	2216      	movs	r2, #22
 8002166:	601a      	str	r2, [r3, #0]
	return -1;
 8002168:	f04f 33ff 	mov.w	r3, #4294967295
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_exit>:

void _exit (int status)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800217c:	f04f 31ff 	mov.w	r1, #4294967295
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff ffe7 	bl	8002154 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002186:	e7fe      	b.n	8002186 <_exit+0x12>

08002188 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	e00a      	b.n	80021b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800219a:	f3af 8000 	nop.w
 800219e:	4601      	mov	r1, r0
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	60ba      	str	r2, [r7, #8]
 80021a6:	b2ca      	uxtb	r2, r1
 80021a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	3301      	adds	r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	dbf0      	blt.n	800219a <_read+0x12>
	}

return len;
 80021b8:	687b      	ldr	r3, [r7, #4]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	e009      	b.n	80021e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	60ba      	str	r2, [r7, #8]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	3301      	adds	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	dbf1      	blt.n	80021d4 <_write+0x12>
	}
	return len;
 80021f0:	687b      	ldr	r3, [r7, #4]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <_close>:

int _close(int file)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
	return -1;
 8002202:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002222:	605a      	str	r2, [r3, #4]
	return 0;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <_isatty>:

int _isatty(int file)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
	return 1;
 800223a:	2301      	movs	r3, #1
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
	return 0;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800226c:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <_sbrk+0x5c>)
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <_sbrk+0x60>)
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <_sbrk+0x64>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d102      	bne.n	8002286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002280:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <_sbrk+0x64>)
 8002282:	4a12      	ldr	r2, [pc, #72]	; (80022cc <_sbrk+0x68>)
 8002284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <_sbrk+0x64>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	429a      	cmp	r2, r3
 8002292:	d207      	bcs.n	80022a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002294:	f005 fa0a 	bl	80076ac <__errno>
 8002298:	4603      	mov	r3, r0
 800229a:	220c      	movs	r2, #12
 800229c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
 80022a2:	e009      	b.n	80022b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <_sbrk+0x64>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <_sbrk+0x64>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	4a05      	ldr	r2, [pc, #20]	; (80022c8 <_sbrk+0x64>)
 80022b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022b6:	68fb      	ldr	r3, [r7, #12]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20018000 	.word	0x20018000
 80022c4:	00000400 	.word	0x00000400
 80022c8:	200002bc 	.word	0x200002bc
 80022cc:	20000568 	.word	0x20000568

080022d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022d4:	4b15      	ldr	r3, [pc, #84]	; (800232c <SystemInit+0x5c>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022da:	4a14      	ldr	r2, [pc, #80]	; (800232c <SystemInit+0x5c>)
 80022dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <SystemInit+0x60>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a11      	ldr	r2, [pc, #68]	; (8002330 <SystemInit+0x60>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80022f0:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <SystemInit+0x60>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <SystemInit+0x60>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <SystemInit+0x60>)
 80022fc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002300:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002304:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002306:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <SystemInit+0x60>)
 8002308:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800230c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <SystemInit+0x60>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a07      	ldr	r2, [pc, #28]	; (8002330 <SystemInit+0x60>)
 8002314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002318:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800231a:	4b05      	ldr	r3, [pc, #20]	; (8002330 <SystemInit+0x60>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000ed00 	.word	0xe000ed00
 8002330:	40021000 	.word	0x40021000

08002334 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002334:	f8df d034 	ldr.w	sp, [pc, #52]	; 800236c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002338:	f7ff ffca 	bl	80022d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800233c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800233e:	e003      	b.n	8002348 <LoopCopyDataInit>

08002340 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002342:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002344:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002346:	3104      	adds	r1, #4

08002348 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002348:	480a      	ldr	r0, [pc, #40]	; (8002374 <LoopForever+0xa>)
	ldr	r3, =_edata
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <LoopForever+0xe>)
	adds	r2, r0, r1
 800234c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800234e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002350:	d3f6      	bcc.n	8002340 <CopyDataInit>
	ldr	r2, =_sbss
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002354:	e002      	b.n	800235c <LoopFillZerobss>

08002356 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002356:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002358:	f842 3b04 	str.w	r3, [r2], #4

0800235c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <LoopForever+0x16>)
	cmp	r2, r3
 800235e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002360:	d3f9      	bcc.n	8002356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002362:	f005 f9a9 	bl	80076b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002366:	f7ff f81b 	bl	80013a0 <main>

0800236a <LoopForever>:

LoopForever:
    b LoopForever
 800236a:	e7fe      	b.n	800236a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800236c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002370:	0800a8fc 	.word	0x0800a8fc
	ldr	r0, =_sdata
 8002374:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002378:	20000260 	.word	0x20000260
	ldr	r2, =_sbss
 800237c:	20000260 	.word	0x20000260
	ldr	r3, = _ebss
 8002380:	20000568 	.word	0x20000568

08002384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002384:	e7fe      	b.n	8002384 <ADC1_2_IRQHandler>
	...

08002388 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <HAL_Init+0x3c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <HAL_Init+0x3c>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800239e:	2003      	movs	r0, #3
 80023a0:	f001 fb64 	bl	8003a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023a4:	2000      	movs	r0, #0
 80023a6:	f000 f80f 	bl	80023c8 <HAL_InitTick>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	71fb      	strb	r3, [r7, #7]
 80023b4:	e001      	b.n	80023ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023b6:	f7ff fc55 	bl	8001c64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023ba:	79fb      	ldrb	r3, [r7, #7]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40022000 	.word	0x40022000

080023c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023d4:	4b17      	ldr	r3, [pc, #92]	; (8002434 <HAL_InitTick+0x6c>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d023      	beq.n	8002424 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023dc:	4b16      	ldr	r3, [pc, #88]	; (8002438 <HAL_InitTick+0x70>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b14      	ldr	r3, [pc, #80]	; (8002434 <HAL_InitTick+0x6c>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	4619      	mov	r1, r3
 80023e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f2:	4618      	mov	r0, r3
 80023f4:	f001 fb6f 	bl	8003ad6 <HAL_SYSTICK_Config>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10f      	bne.n	800241e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b0f      	cmp	r3, #15
 8002402:	d809      	bhi.n	8002418 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002404:	2200      	movs	r2, #0
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	f001 fb39 	bl	8003a82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002410:	4a0a      	ldr	r2, [pc, #40]	; (800243c <HAL_InitTick+0x74>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e007      	b.n	8002428 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
 800241c:	e004      	b.n	8002428 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	e001      	b.n	8002428 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002428:	7bfb      	ldrb	r3, [r7, #15]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	2000008c 	.word	0x2000008c
 8002438:	20000084 	.word	0x20000084
 800243c:	20000088 	.word	0x20000088

08002440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_IncTick+0x20>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_IncTick+0x24>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4413      	add	r3, r2
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <HAL_IncTick+0x24>)
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	2000008c 	.word	0x2000008c
 8002464:	20000554 	.word	0x20000554

08002468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return uwTick;
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <HAL_GetTick+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000554 	.word	0x20000554

08002480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002488:	f7ff ffee 	bl	8002468 <HAL_GetTick>
 800248c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002498:	d005      	beq.n	80024a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_Delay+0x44>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024a6:	bf00      	nop
 80024a8:	f7ff ffde 	bl	8002468 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d8f7      	bhi.n	80024a8 <HAL_Delay+0x28>
  {
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	2000008c 	.word	0x2000008c

080024c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	609a      	str	r2, [r3, #8]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	609a      	str	r2, [r3, #8]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3360      	adds	r3, #96	; 0x60
 8002542:	461a      	mov	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <LL_ADC_SetOffset+0x44>)
 8002552:	4013      	ands	r3, r2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	4313      	orrs	r3, r2
 8002560:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002568:	bf00      	nop
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	03fff000 	.word	0x03fff000

08002578 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3360      	adds	r3, #96	; 0x60
 8002586:	461a      	mov	r2, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3360      	adds	r3, #96	; 0x60
 80025b4:	461a      	mov	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025ce:	bf00      	nop
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3330      	adds	r3, #48	; 0x30
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	4413      	add	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f003 031f 	and.w	r3, r3, #31
 800262a:	211f      	movs	r1, #31
 800262c:	fa01 f303 	lsl.w	r3, r1, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	401a      	ands	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	0e9b      	lsrs	r3, r3, #26
 8002638:	f003 011f 	and.w	r1, r3, #31
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	431a      	orrs	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800264c:	bf00      	nop
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3314      	adds	r3, #20
 8002668:	461a      	mov	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	0e5b      	lsrs	r3, r3, #25
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	4413      	add	r3, r2
 8002676:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	0d1b      	lsrs	r3, r3, #20
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	2107      	movs	r1, #7
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	401a      	ands	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	0d1b      	lsrs	r3, r3, #20
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	431a      	orrs	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026a2:	bf00      	nop
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c8:	43db      	mvns	r3, r3
 80026ca:	401a      	ands	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f003 0318 	and.w	r3, r3, #24
 80026d2:	4908      	ldr	r1, [pc, #32]	; (80026f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80026d4:	40d9      	lsrs	r1, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	400b      	ands	r3, r1
 80026da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026de:	431a      	orrs	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	0007ffff 	.word	0x0007ffff

080026f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 031f 	and.w	r3, r3, #31
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002740:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6093      	str	r3, [r2, #8]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002768:	d101      	bne.n	800276e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800278c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002790:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027b8:	d101      	bne.n	80027be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027e0:	f043 0201 	orr.w	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <LL_ADC_IsEnabled+0x18>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <LL_ADC_IsEnabled+0x1a>
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800282a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800282e:	f043 0204 	orr.w	r2, r3, #4
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b04      	cmp	r3, #4
 8002854:	d101      	bne.n	800285a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b08      	cmp	r3, #8
 800287a:	d101      	bne.n	8002880 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b089      	sub	sp, #36	; 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800289c:	2300      	movs	r3, #0
 800289e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e136      	b.n	8002b18 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d109      	bne.n	80028cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff f9f7 	bl	8001cac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff3f 	bl	8002754 <LL_ADC_IsDeepPowerDownEnabled>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d004      	beq.n	80028e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff25 	bl	8002730 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff ff5a 	bl	80027a4 <LL_ADC_IsInternalRegulatorEnabled>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d115      	bne.n	8002922 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff3e 	bl	800277c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002900:	4b87      	ldr	r3, [pc, #540]	; (8002b20 <HAL_ADC_Init+0x290>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	099b      	lsrs	r3, r3, #6
 8002906:	4a87      	ldr	r2, [pc, #540]	; (8002b24 <HAL_ADC_Init+0x294>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	3301      	adds	r3, #1
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002914:	e002      	b.n	800291c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	3b01      	subs	r3, #1
 800291a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f9      	bne.n	8002916 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ff3c 	bl	80027a4 <LL_ADC_IsInternalRegulatorEnabled>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10d      	bne.n	800294e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002936:	f043 0210 	orr.w	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	f043 0201 	orr.w	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff75 	bl	8002842 <LL_ADC_REG_IsConversionOngoing>
 8002958:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 80cf 	bne.w	8002b06 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2b00      	cmp	r3, #0
 800296c:	f040 80cb 	bne.w	8002b06 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002974:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002978:	f043 0202 	orr.w	r2, r3, #2
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff35 	bl	80027f4 <LL_ADC_IsEnabled>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d115      	bne.n	80029bc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002990:	4865      	ldr	r0, [pc, #404]	; (8002b28 <HAL_ADC_Init+0x298>)
 8002992:	f7ff ff2f 	bl	80027f4 <LL_ADC_IsEnabled>
 8002996:	4604      	mov	r4, r0
 8002998:	4864      	ldr	r0, [pc, #400]	; (8002b2c <HAL_ADC_Init+0x29c>)
 800299a:	f7ff ff2b 	bl	80027f4 <LL_ADC_IsEnabled>
 800299e:	4603      	mov	r3, r0
 80029a0:	431c      	orrs	r4, r3
 80029a2:	4863      	ldr	r0, [pc, #396]	; (8002b30 <HAL_ADC_Init+0x2a0>)
 80029a4:	f7ff ff26 	bl	80027f4 <LL_ADC_IsEnabled>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4323      	orrs	r3, r4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	4619      	mov	r1, r3
 80029b6:	485f      	ldr	r0, [pc, #380]	; (8002b34 <HAL_ADC_Init+0x2a4>)
 80029b8:	f7ff fd86 	bl	80024c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	7e5b      	ldrb	r3, [r3, #25]
 80029c0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029c6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80029cc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80029d2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029da:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d106      	bne.n	80029f8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	3b01      	subs	r3, #1
 80029f0:	045b      	lsls	r3, r3, #17
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d009      	beq.n	8002a14 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	4b47      	ldr	r3, [pc, #284]	; (8002b38 <HAL_ADC_Init+0x2a8>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	69b9      	ldr	r1, [r7, #24]
 8002a24:	430b      	orrs	r3, r1
 8002a26:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff08 	bl	8002842 <LL_ADC_REG_IsConversionOngoing>
 8002a32:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff15 	bl	8002868 <LL_ADC_INJ_IsConversionOngoing>
 8002a3e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d13d      	bne.n	8002ac2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d13a      	bne.n	8002ac2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a50:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a58:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a68:	f023 0302 	bic.w	r3, r3, #2
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	69b9      	ldr	r1, [r7, #24]
 8002a72:	430b      	orrs	r3, r1
 8002a74:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d118      	bne.n	8002ab2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a8a:	f023 0304 	bic.w	r3, r3, #4
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a96:	4311      	orrs	r1, r2
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a9c:	4311      	orrs	r1, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	611a      	str	r2, [r3, #16]
 8002ab0:	e007      	b.n	8002ac2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0201 	bic.w	r2, r2, #1
 8002ac0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	f023 010f 	bic.w	r1, r3, #15
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	1e5a      	subs	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ae2:	e007      	b.n	8002af4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 020f 	bic.w	r2, r2, #15
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af8:	f023 0303 	bic.w	r3, r3, #3
 8002afc:	f043 0201 	orr.w	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54
 8002b04:	e007      	b.n	8002b16 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0a:	f043 0210 	orr.w	r2, r3, #16
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b16:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3724      	adds	r7, #36	; 0x24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd90      	pop	{r4, r7, pc}
 8002b20:	20000084 	.word	0x20000084
 8002b24:	053e2d63 	.word	0x053e2d63
 8002b28:	50040000 	.word	0x50040000
 8002b2c:	50040100 	.word	0x50040100
 8002b30:	50040200 	.word	0x50040200
 8002b34:	50040300 	.word	0x50040300
 8002b38:	fff0c007 	.word	0xfff0c007

08002b3c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b44:	4857      	ldr	r0, [pc, #348]	; (8002ca4 <HAL_ADC_Start+0x168>)
 8002b46:	f7ff fdd7 	bl	80026f8 <LL_ADC_GetMultimode>
 8002b4a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fe76 	bl	8002842 <LL_ADC_REG_IsConversionOngoing>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f040 809c 	bne.w	8002c96 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_ADC_Start+0x30>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e097      	b.n	8002c9c <HAL_ADC_Start+0x160>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fd71 	bl	800365c <ADC_Enable>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f040 8083 	bne.w	8002c8c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a42      	ldr	r2, [pc, #264]	; (8002ca8 <HAL_ADC_Start+0x16c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d002      	beq.n	8002baa <HAL_ADC_Start+0x6e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	e000      	b.n	8002bac <HAL_ADC_Start+0x70>
 8002baa:	4b40      	ldr	r3, [pc, #256]	; (8002cac <HAL_ADC_Start+0x170>)
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6812      	ldr	r2, [r2, #0]
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d002      	beq.n	8002bba <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d105      	bne.n	8002bc6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd2:	d106      	bne.n	8002be2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	f023 0206 	bic.w	r2, r3, #6
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	659a      	str	r2, [r3, #88]	; 0x58
 8002be0:	e002      	b.n	8002be8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	221c      	movs	r2, #28
 8002bee:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a2a      	ldr	r2, [pc, #168]	; (8002ca8 <HAL_ADC_Start+0x16c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d002      	beq.n	8002c08 <HAL_ADC_Start+0xcc>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	e000      	b.n	8002c0a <HAL_ADC_Start+0xce>
 8002c08:	4b28      	ldr	r3, [pc, #160]	; (8002cac <HAL_ADC_Start+0x170>)
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6812      	ldr	r2, [r2, #0]
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d008      	beq.n	8002c24 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	2b05      	cmp	r3, #5
 8002c1c:	d002      	beq.n	8002c24 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	2b09      	cmp	r3, #9
 8002c22:	d114      	bne.n	8002c4e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d007      	beq.n	8002c42 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fde7 	bl	800281a <LL_ADC_REG_StartConversion>
 8002c4c:	e025      	b.n	8002c9a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <HAL_ADC_Start+0x16c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d002      	beq.n	8002c6a <HAL_ADC_Start+0x12e>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	e000      	b.n	8002c6c <HAL_ADC_Start+0x130>
 8002c6a:	4b10      	ldr	r3, [pc, #64]	; (8002cac <HAL_ADC_Start+0x170>)
 8002c6c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00f      	beq.n	8002c9a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	655a      	str	r2, [r3, #84]	; 0x54
 8002c8a:	e006      	b.n	8002c9a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002c94:	e001      	b.n	8002c9a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c96:	2302      	movs	r3, #2
 8002c98:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	50040300 	.word	0x50040300
 8002ca8:	50040100 	.word	0x50040100
 8002cac:	50040000 	.word	0x50040000

08002cb0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cba:	4866      	ldr	r0, [pc, #408]	; (8002e54 <HAL_ADC_PollForConversion+0x1a4>)
 8002cbc:	f7ff fd1c 	bl	80026f8 <LL_ADC_GetMultimode>
 8002cc0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d102      	bne.n	8002cd0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002cca:	2308      	movs	r3, #8
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	e02a      	b.n	8002d26 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b05      	cmp	r3, #5
 8002cda:	d002      	beq.n	8002ce2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b09      	cmp	r3, #9
 8002ce0:	d111      	bne.n	8002d06 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d007      	beq.n	8002d00 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	f043 0220 	orr.w	r2, r3, #32
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0a4      	b.n	8002e4a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002d00:	2304      	movs	r3, #4
 8002d02:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002d04:	e00f      	b.n	8002d26 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002d06:	4853      	ldr	r0, [pc, #332]	; (8002e54 <HAL_ADC_PollForConversion+0x1a4>)
 8002d08:	f7ff fd04 	bl	8002714 <LL_ADC_GetMultiDMATransfer>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d007      	beq.n	8002d22 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d16:	f043 0220 	orr.w	r2, r3, #32
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e093      	b.n	8002e4a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002d22:	2304      	movs	r3, #4
 8002d24:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d26:	f7ff fb9f 	bl	8002468 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d2c:	e021      	b.n	8002d72 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d01d      	beq.n	8002d72 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002d36:	f7ff fb97 	bl	8002468 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d302      	bcc.n	8002d4c <HAL_ADC_PollForConversion+0x9c>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d112      	bne.n	8002d72 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10b      	bne.n	8002d72 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	f043 0204 	orr.w	r2, r3, #4
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e06b      	b.n	8002e4a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0d6      	beq.n	8002d2e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fc22 	bl	80025da <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01c      	beq.n	8002dd6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7e5b      	ldrb	r3, [r3, #25]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d118      	bne.n	8002dd6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d111      	bne.n	8002dd6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d105      	bne.n	8002dd6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	f043 0201 	orr.w	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a1f      	ldr	r2, [pc, #124]	; (8002e58 <HAL_ADC_PollForConversion+0x1a8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d002      	beq.n	8002de6 <HAL_ADC_PollForConversion+0x136>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	e000      	b.n	8002de8 <HAL_ADC_PollForConversion+0x138>
 8002de6:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <HAL_ADC_PollForConversion+0x1ac>)
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d008      	beq.n	8002e02 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b05      	cmp	r3, #5
 8002dfa:	d002      	beq.n	8002e02 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2b09      	cmp	r3, #9
 8002e00:	d104      	bne.n	8002e0c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	e00c      	b.n	8002e26 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a11      	ldr	r2, [pc, #68]	; (8002e58 <HAL_ADC_PollForConversion+0x1a8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d002      	beq.n	8002e1c <HAL_ADC_PollForConversion+0x16c>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	e000      	b.n	8002e1e <HAL_ADC_PollForConversion+0x16e>
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <HAL_ADC_PollForConversion+0x1ac>)
 8002e1e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d104      	bne.n	8002e36 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2208      	movs	r2, #8
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	e008      	b.n	8002e48 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d103      	bne.n	8002e48 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	220c      	movs	r2, #12
 8002e46:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3720      	adds	r7, #32
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	50040300 	.word	0x50040300
 8002e58:	50040100 	.word	0x50040100
 8002e5c:	50040000 	.word	0x50040000

08002e60 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b0b6      	sub	sp, #216	; 0xd8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x22>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e3c7      	b.n	800362e <HAL_ADC_ConfigChannel+0x7b2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fcc9 	bl	8002842 <LL_ADC_REG_IsConversionOngoing>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f040 83a8 	bne.w	8003608 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	d824      	bhi.n	8002f0a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	3b02      	subs	r3, #2
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d81b      	bhi.n	8002f02 <HAL_ADC_ConfigChannel+0x86>
 8002eca:	a201      	add	r2, pc, #4	; (adr r2, 8002ed0 <HAL_ADC_ConfigChannel+0x54>)
 8002ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed0:	08002ee1 	.word	0x08002ee1
 8002ed4:	08002ee9 	.word	0x08002ee9
 8002ed8:	08002ef1 	.word	0x08002ef1
 8002edc:	08002ef9 	.word	0x08002ef9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	220c      	movs	r2, #12
 8002ee4:	605a      	str	r2, [r3, #4]
          break;
 8002ee6:	e011      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2212      	movs	r2, #18
 8002eec:	605a      	str	r2, [r3, #4]
          break;
 8002eee:	e00d      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2218      	movs	r2, #24
 8002ef4:	605a      	str	r2, [r3, #4]
          break;
 8002ef6:	e009      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002efe:	605a      	str	r2, [r3, #4]
          break;
 8002f00:	e004      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2206      	movs	r2, #6
 8002f06:	605a      	str	r2, [r3, #4]
          break;
 8002f08:	e000      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002f0a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	6859      	ldr	r1, [r3, #4]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f7ff fb71 	bl	8002600 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fc8d 	bl	8002842 <LL_ADC_REG_IsConversionOngoing>
 8002f28:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fc99 	bl	8002868 <LL_ADC_INJ_IsConversionOngoing>
 8002f36:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f040 81a6 	bne.w	8003290 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f040 81a1 	bne.w	8003290 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6819      	ldr	r1, [r3, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f7ff fb7c 	bl	8002658 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	08db      	lsrs	r3, r3, #3
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d00a      	beq.n	8002f98 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6919      	ldr	r1, [r3, #16]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f92:	f7ff facd 	bl	8002530 <LL_ADC_SetOffset>
 8002f96:	e17b      	b.n	8003290 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff faea 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10a      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x148>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fadf 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	0e9b      	lsrs	r3, r3, #26
 8002fbe:	f003 021f 	and.w	r2, r3, #31
 8002fc2:	e01e      	b.n	8003002 <HAL_ADC_ConfigChannel+0x186>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fad4 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fe2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fe6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002ff2:	2320      	movs	r3, #32
 8002ff4:	e004      	b.n	8003000 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002ff6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300a:	2b00      	cmp	r3, #0
 800300c:	d105      	bne.n	800301a <HAL_ADC_ConfigChannel+0x19e>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	0e9b      	lsrs	r3, r3, #26
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	e018      	b.n	800304c <HAL_ADC_ConfigChannel+0x1d0>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800302e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003032:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003036:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800303e:	2320      	movs	r3, #32
 8003040:	e004      	b.n	800304c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003042:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800304c:	429a      	cmp	r2, r3
 800304e:	d106      	bne.n	800305e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2200      	movs	r2, #0
 8003056:	2100      	movs	r1, #0
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff faa3 	bl	80025a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2101      	movs	r1, #1
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fa87 	bl	8002578 <LL_ADC_GetOffsetChannel>
 800306a:	4603      	mov	r3, r0
 800306c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <HAL_ADC_ConfigChannel+0x20e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2101      	movs	r1, #1
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fa7c 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8003080:	4603      	mov	r3, r0
 8003082:	0e9b      	lsrs	r3, r3, #26
 8003084:	f003 021f 	and.w	r2, r3, #31
 8003088:	e01e      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x24c>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2101      	movs	r1, #1
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fa71 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8003096:	4603      	mov	r3, r0
 8003098:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80030a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80030b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80030b8:	2320      	movs	r3, #32
 80030ba:	e004      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80030bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d105      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x264>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	0e9b      	lsrs	r3, r3, #26
 80030da:	f003 031f 	and.w	r3, r3, #31
 80030de:	e018      	b.n	8003112 <HAL_ADC_ConfigChannel+0x296>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80030f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80030fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003104:	2320      	movs	r3, #32
 8003106:	e004      	b.n	8003112 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003108:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003112:	429a      	cmp	r2, r3
 8003114:	d106      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2200      	movs	r2, #0
 800311c:	2101      	movs	r1, #1
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fa40 	bl	80025a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2102      	movs	r1, #2
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fa24 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8003130:	4603      	mov	r3, r0
 8003132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x2d4>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2102      	movs	r1, #2
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fa19 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8003146:	4603      	mov	r3, r0
 8003148:	0e9b      	lsrs	r3, r3, #26
 800314a:	f003 021f 	and.w	r2, r3, #31
 800314e:	e01e      	b.n	800318e <HAL_ADC_ConfigChannel+0x312>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2102      	movs	r1, #2
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff fa0e 	bl	8002578 <LL_ADC_GetOffsetChannel>
 800315c:	4603      	mov	r3, r0
 800315e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800316e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003176:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800317e:	2320      	movs	r3, #32
 8003180:	e004      	b.n	800318c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003182:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003196:	2b00      	cmp	r3, #0
 8003198:	d105      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x32a>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	0e9b      	lsrs	r3, r3, #26
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	e016      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x358>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031b2:	fa93 f3a3 	rbit	r3, r3
 80031b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80031b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80031be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80031c6:	2320      	movs	r3, #32
 80031c8:	e004      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80031ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031ce:	fab3 f383 	clz	r3, r3
 80031d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d106      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2200      	movs	r2, #0
 80031de:	2102      	movs	r1, #2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff f9df 	bl	80025a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2103      	movs	r1, #3
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff f9c3 	bl	8002578 <LL_ADC_GetOffsetChannel>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10a      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x396>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2103      	movs	r1, #3
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff f9b8 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8003208:	4603      	mov	r3, r0
 800320a:	0e9b      	lsrs	r3, r3, #26
 800320c:	f003 021f 	and.w	r2, r3, #31
 8003210:	e017      	b.n	8003242 <HAL_ADC_ConfigChannel+0x3c6>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2103      	movs	r1, #3
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff f9ad 	bl	8002578 <LL_ADC_GetOffsetChannel>
 800321e:	4603      	mov	r3, r0
 8003220:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003224:	fa93 f3a3 	rbit	r3, r3
 8003228:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800322a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800322c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800322e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003234:	2320      	movs	r3, #32
 8003236:	e003      	b.n	8003240 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800323a:	fab3 f383 	clz	r3, r3
 800323e:	b2db      	uxtb	r3, r3
 8003240:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324a:	2b00      	cmp	r3, #0
 800324c:	d105      	bne.n	800325a <HAL_ADC_ConfigChannel+0x3de>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	0e9b      	lsrs	r3, r3, #26
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	e011      	b.n	800327e <HAL_ADC_ConfigChannel+0x402>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003262:	fa93 f3a3 	rbit	r3, r3
 8003266:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800326a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800326c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003272:	2320      	movs	r3, #32
 8003274:	e003      	b.n	800327e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003278:	fab3 f383 	clz	r3, r3
 800327c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800327e:	429a      	cmp	r2, r3
 8003280:	d106      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2200      	movs	r2, #0
 8003288:	2103      	movs	r1, #3
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff f98a 	bl	80025a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff faad 	bl	80027f4 <LL_ADC_IsEnabled>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	f040 813f 	bne.w	8003520 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	6819      	ldr	r1, [r3, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	461a      	mov	r2, r3
 80032b0:	f7ff f9fe 	bl	80026b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4a8e      	ldr	r2, [pc, #568]	; (80034f4 <HAL_ADC_ConfigChannel+0x678>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	f040 8130 	bne.w	8003520 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10b      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x46c>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	0e9b      	lsrs	r3, r3, #26
 80032d6:	3301      	adds	r3, #1
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	2b09      	cmp	r3, #9
 80032de:	bf94      	ite	ls
 80032e0:	2301      	movls	r3, #1
 80032e2:	2300      	movhi	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	e019      	b.n	800331c <HAL_ADC_ConfigChannel+0x4a0>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f0:	fa93 f3a3 	rbit	r3, r3
 80032f4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80032f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032f8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80032fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003300:	2320      	movs	r3, #32
 8003302:	e003      	b.n	800330c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003304:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	3301      	adds	r3, #1
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2b09      	cmp	r3, #9
 8003314:	bf94      	ite	ls
 8003316:	2301      	movls	r3, #1
 8003318:	2300      	movhi	r3, #0
 800331a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800331c:	2b00      	cmp	r3, #0
 800331e:	d079      	beq.n	8003414 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003328:	2b00      	cmp	r3, #0
 800332a:	d107      	bne.n	800333c <HAL_ADC_ConfigChannel+0x4c0>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0e9b      	lsrs	r3, r3, #26
 8003332:	3301      	adds	r3, #1
 8003334:	069b      	lsls	r3, r3, #26
 8003336:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800333a:	e015      	b.n	8003368 <HAL_ADC_ConfigChannel+0x4ec>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800334a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800334c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800334e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003354:	2320      	movs	r3, #32
 8003356:	e003      	b.n	8003360 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800335a:	fab3 f383 	clz	r3, r3
 800335e:	b2db      	uxtb	r3, r3
 8003360:	3301      	adds	r3, #1
 8003362:	069b      	lsls	r3, r3, #26
 8003364:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003370:	2b00      	cmp	r3, #0
 8003372:	d109      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x50c>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	0e9b      	lsrs	r3, r3, #26
 800337a:	3301      	adds	r3, #1
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2101      	movs	r1, #1
 8003382:	fa01 f303 	lsl.w	r3, r1, r3
 8003386:	e017      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x53c>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003390:	fa93 f3a3 	rbit	r3, r3
 8003394:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003398:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800339a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80033a0:	2320      	movs	r3, #32
 80033a2:	e003      	b.n	80033ac <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80033a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	3301      	adds	r3, #1
 80033ae:	f003 031f 	and.w	r3, r3, #31
 80033b2:	2101      	movs	r1, #1
 80033b4:	fa01 f303 	lsl.w	r3, r1, r3
 80033b8:	ea42 0103 	orr.w	r1, r2, r3
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10a      	bne.n	80033de <HAL_ADC_ConfigChannel+0x562>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	0e9b      	lsrs	r3, r3, #26
 80033ce:	3301      	adds	r3, #1
 80033d0:	f003 021f 	and.w	r2, r3, #31
 80033d4:	4613      	mov	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	051b      	lsls	r3, r3, #20
 80033dc:	e018      	b.n	8003410 <HAL_ADC_ConfigChannel+0x594>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80033ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80033f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80033f6:	2320      	movs	r3, #32
 80033f8:	e003      	b.n	8003402 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80033fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033fc:	fab3 f383 	clz	r3, r3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	3301      	adds	r3, #1
 8003404:	f003 021f 	and.w	r2, r3, #31
 8003408:	4613      	mov	r3, r2
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	4413      	add	r3, r2
 800340e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003410:	430b      	orrs	r3, r1
 8003412:	e080      	b.n	8003516 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800341c:	2b00      	cmp	r3, #0
 800341e:	d107      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x5b4>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	0e9b      	lsrs	r3, r3, #26
 8003426:	3301      	adds	r3, #1
 8003428:	069b      	lsls	r3, r3, #26
 800342a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800342e:	e015      	b.n	800345c <HAL_ADC_ConfigChannel+0x5e0>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	fa93 f3a3 	rbit	r3, r3
 800343c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003440:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003448:	2320      	movs	r3, #32
 800344a:	e003      	b.n	8003454 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	3301      	adds	r3, #1
 8003456:	069b      	lsls	r3, r3, #26
 8003458:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003464:	2b00      	cmp	r3, #0
 8003466:	d109      	bne.n	800347c <HAL_ADC_ConfigChannel+0x600>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	0e9b      	lsrs	r3, r3, #26
 800346e:	3301      	adds	r3, #1
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	e017      	b.n	80034ac <HAL_ADC_ConfigChannel+0x630>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	fa93 f3a3 	rbit	r3, r3
 8003488:	61fb      	str	r3, [r7, #28]
  return result;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003494:	2320      	movs	r3, #32
 8003496:	e003      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	3301      	adds	r3, #1
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	2101      	movs	r1, #1
 80034a8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ac:	ea42 0103 	orr.w	r1, r2, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10d      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x65c>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	0e9b      	lsrs	r3, r3, #26
 80034c2:	3301      	adds	r3, #1
 80034c4:	f003 021f 	and.w	r2, r3, #31
 80034c8:	4613      	mov	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4413      	add	r3, r2
 80034ce:	3b1e      	subs	r3, #30
 80034d0:	051b      	lsls	r3, r3, #20
 80034d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034d6:	e01d      	b.n	8003514 <HAL_ADC_ConfigChannel+0x698>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	fa93 f3a3 	rbit	r3, r3
 80034e4:	613b      	str	r3, [r7, #16]
  return result;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d103      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80034f0:	2320      	movs	r3, #32
 80034f2:	e005      	b.n	8003500 <HAL_ADC_ConfigChannel+0x684>
 80034f4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	fab3 f383 	clz	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	3301      	adds	r3, #1
 8003502:	f003 021f 	and.w	r2, r3, #31
 8003506:	4613      	mov	r3, r2
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	4413      	add	r3, r2
 800350c:	3b1e      	subs	r3, #30
 800350e:	051b      	lsls	r3, r3, #20
 8003510:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003514:	430b      	orrs	r3, r1
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	6892      	ldr	r2, [r2, #8]
 800351a:	4619      	mov	r1, r3
 800351c:	f7ff f89c 	bl	8002658 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b44      	ldr	r3, [pc, #272]	; (8003638 <HAL_ADC_ConfigChannel+0x7bc>)
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d07a      	beq.n	8003622 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800352c:	4843      	ldr	r0, [pc, #268]	; (800363c <HAL_ADC_ConfigChannel+0x7c0>)
 800352e:	f7fe fff1 	bl	8002514 <LL_ADC_GetCommonPathInternalCh>
 8003532:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a41      	ldr	r2, [pc, #260]	; (8003640 <HAL_ADC_ConfigChannel+0x7c4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d12c      	bne.n	800359a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003540:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003544:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d126      	bne.n	800359a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a3c      	ldr	r2, [pc, #240]	; (8003644 <HAL_ADC_ConfigChannel+0x7c8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d004      	beq.n	8003560 <HAL_ADC_ConfigChannel+0x6e4>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a3b      	ldr	r2, [pc, #236]	; (8003648 <HAL_ADC_ConfigChannel+0x7cc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d15d      	bne.n	800361c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003560:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003564:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003568:	4619      	mov	r1, r3
 800356a:	4834      	ldr	r0, [pc, #208]	; (800363c <HAL_ADC_ConfigChannel+0x7c0>)
 800356c:	f7fe ffbf 	bl	80024ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003570:	4b36      	ldr	r3, [pc, #216]	; (800364c <HAL_ADC_ConfigChannel+0x7d0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	099b      	lsrs	r3, r3, #6
 8003576:	4a36      	ldr	r2, [pc, #216]	; (8003650 <HAL_ADC_ConfigChannel+0x7d4>)
 8003578:	fba2 2303 	umull	r2, r3, r2, r3
 800357c:	099b      	lsrs	r3, r3, #6
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	4613      	mov	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800358a:	e002      	b.n	8003592 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3b01      	subs	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f9      	bne.n	800358c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003598:	e040      	b.n	800361c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a2d      	ldr	r2, [pc, #180]	; (8003654 <HAL_ADC_ConfigChannel+0x7d8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d118      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x75a>
 80035a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d112      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a23      	ldr	r2, [pc, #140]	; (8003644 <HAL_ADC_ConfigChannel+0x7c8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d004      	beq.n	80035c4 <HAL_ADC_ConfigChannel+0x748>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a22      	ldr	r2, [pc, #136]	; (8003648 <HAL_ADC_ConfigChannel+0x7cc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d12d      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035cc:	4619      	mov	r1, r3
 80035ce:	481b      	ldr	r0, [pc, #108]	; (800363c <HAL_ADC_ConfigChannel+0x7c0>)
 80035d0:	f7fe ff8d 	bl	80024ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035d4:	e024      	b.n	8003620 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1f      	ldr	r2, [pc, #124]	; (8003658 <HAL_ADC_ConfigChannel+0x7dc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d120      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d11a      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a14      	ldr	r2, [pc, #80]	; (8003644 <HAL_ADC_ConfigChannel+0x7c8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d115      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035fe:	4619      	mov	r1, r3
 8003600:	480e      	ldr	r0, [pc, #56]	; (800363c <HAL_ADC_ConfigChannel+0x7c0>)
 8003602:	f7fe ff74 	bl	80024ee <LL_ADC_SetCommonPathInternalCh>
 8003606:	e00c      	b.n	8003622 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800361a:	e002      	b.n	8003622 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800361c:	bf00      	nop
 800361e:	e000      	b.n	8003622 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003620:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800362a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800362e:	4618      	mov	r0, r3
 8003630:	37d8      	adds	r7, #216	; 0xd8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	80080000 	.word	0x80080000
 800363c:	50040300 	.word	0x50040300
 8003640:	c7520000 	.word	0xc7520000
 8003644:	50040000 	.word	0x50040000
 8003648:	50040200 	.word	0x50040200
 800364c:	20000084 	.word	0x20000084
 8003650:	053e2d63 	.word	0x053e2d63
 8003654:	cb840000 	.word	0xcb840000
 8003658:	80000001 	.word	0x80000001

0800365c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff f8c3 	bl	80027f4 <LL_ADC_IsEnabled>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d14d      	bne.n	8003710 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	4b28      	ldr	r3, [pc, #160]	; (800371c <ADC_Enable+0xc0>)
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00d      	beq.n	800369e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003686:	f043 0210 	orr.w	r2, r3, #16
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	f043 0201 	orr.w	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e039      	b.n	8003712 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff f892 	bl	80027cc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036a8:	f7fe fede 	bl	8002468 <HAL_GetTick>
 80036ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036ae:	e028      	b.n	8003702 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff f89d 	bl	80027f4 <LL_ADC_IsEnabled>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d104      	bne.n	80036ca <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff f881 	bl	80027cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036ca:	f7fe fecd 	bl	8002468 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d914      	bls.n	8003702 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d00d      	beq.n	8003702 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	f043 0210 	orr.w	r2, r3, #16
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	f043 0201 	orr.w	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e007      	b.n	8003712 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b01      	cmp	r3, #1
 800370e:	d1cf      	bne.n	80036b0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	8000003f 	.word	0x8000003f

08003720 <LL_ADC_IsEnabled>:
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <LL_ADC_IsEnabled+0x18>
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <LL_ADC_IsEnabled+0x1a>
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <LL_ADC_REG_IsConversionOngoing>:
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b04      	cmp	r3, #4
 8003758:	d101      	bne.n	800375e <LL_ADC_REG_IsConversionOngoing+0x18>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800376c:	b590      	push	{r4, r7, lr}
 800376e:	b09f      	sub	sp, #124	; 0x7c
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003786:	2302      	movs	r3, #2
 8003788:	e093      	b.n	80038b2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003792:	2300      	movs	r3, #0
 8003794:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003796:	2300      	movs	r3, #0
 8003798:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a47      	ldr	r2, [pc, #284]	; (80038bc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d102      	bne.n	80037aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80037a4:	4b46      	ldr	r3, [pc, #280]	; (80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	e001      	b.n	80037ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80037aa:	2300      	movs	r3, #0
 80037ac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10b      	bne.n	80037cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e072      	b.n	80038b2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff ffb9 	bl	8003746 <LL_ADC_REG_IsConversionOngoing>
 80037d4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff ffb3 	bl	8003746 <LL_ADC_REG_IsConversionOngoing>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d154      	bne.n	8003890 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80037e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d151      	bne.n	8003890 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80037ec:	4b35      	ldr	r3, [pc, #212]	; (80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80037ee:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d02c      	beq.n	8003852 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80037f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	6859      	ldr	r1, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800380a:	035b      	lsls	r3, r3, #13
 800380c:	430b      	orrs	r3, r1
 800380e:	431a      	orrs	r2, r3
 8003810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003812:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003814:	4829      	ldr	r0, [pc, #164]	; (80038bc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003816:	f7ff ff83 	bl	8003720 <LL_ADC_IsEnabled>
 800381a:	4604      	mov	r4, r0
 800381c:	4828      	ldr	r0, [pc, #160]	; (80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800381e:	f7ff ff7f 	bl	8003720 <LL_ADC_IsEnabled>
 8003822:	4603      	mov	r3, r0
 8003824:	431c      	orrs	r4, r3
 8003826:	4828      	ldr	r0, [pc, #160]	; (80038c8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003828:	f7ff ff7a 	bl	8003720 <LL_ADC_IsEnabled>
 800382c:	4603      	mov	r3, r0
 800382e:	4323      	orrs	r3, r4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d137      	bne.n	80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800383c:	f023 030f 	bic.w	r3, r3, #15
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	6811      	ldr	r1, [r2, #0]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	6892      	ldr	r2, [r2, #8]
 8003848:	430a      	orrs	r2, r1
 800384a:	431a      	orrs	r2, r3
 800384c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800384e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003850:	e028      	b.n	80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800385a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800385c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800385e:	4817      	ldr	r0, [pc, #92]	; (80038bc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003860:	f7ff ff5e 	bl	8003720 <LL_ADC_IsEnabled>
 8003864:	4604      	mov	r4, r0
 8003866:	4816      	ldr	r0, [pc, #88]	; (80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003868:	f7ff ff5a 	bl	8003720 <LL_ADC_IsEnabled>
 800386c:	4603      	mov	r3, r0
 800386e:	431c      	orrs	r4, r3
 8003870:	4815      	ldr	r0, [pc, #84]	; (80038c8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003872:	f7ff ff55 	bl	8003720 <LL_ADC_IsEnabled>
 8003876:	4603      	mov	r3, r0
 8003878:	4323      	orrs	r3, r4
 800387a:	2b00      	cmp	r3, #0
 800387c:	d112      	bne.n	80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800387e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003886:	f023 030f 	bic.w	r3, r3, #15
 800388a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800388c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800388e:	e009      	b.n	80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003894:	f043 0220 	orr.w	r2, r3, #32
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80038a2:	e000      	b.n	80038a6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80038ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	377c      	adds	r7, #124	; 0x7c
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd90      	pop	{r4, r7, pc}
 80038ba:	bf00      	nop
 80038bc:	50040000 	.word	0x50040000
 80038c0:	50040100 	.word	0x50040100
 80038c4:	50040300 	.word	0x50040300
 80038c8:	50040200 	.word	0x50040200

080038cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <__NVIC_SetPriorityGrouping+0x44>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038e8:	4013      	ands	r3, r2
 80038ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038fe:	4a04      	ldr	r2, [pc, #16]	; (8003910 <__NVIC_SetPriorityGrouping+0x44>)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	60d3      	str	r3, [r2, #12]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003918:	4b04      	ldr	r3, [pc, #16]	; (800392c <__NVIC_GetPriorityGrouping+0x18>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	0a1b      	lsrs	r3, r3, #8
 800391e:	f003 0307 	and.w	r3, r3, #7
}
 8003922:	4618      	mov	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	2b00      	cmp	r3, #0
 8003940:	db0b      	blt.n	800395a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	f003 021f 	and.w	r2, r3, #31
 8003948:	4907      	ldr	r1, [pc, #28]	; (8003968 <__NVIC_EnableIRQ+0x38>)
 800394a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	2001      	movs	r0, #1
 8003952:	fa00 f202 	lsl.w	r2, r0, r2
 8003956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	e000e100 	.word	0xe000e100

0800396c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	6039      	str	r1, [r7, #0]
 8003976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397c:	2b00      	cmp	r3, #0
 800397e:	db0a      	blt.n	8003996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	b2da      	uxtb	r2, r3
 8003984:	490c      	ldr	r1, [pc, #48]	; (80039b8 <__NVIC_SetPriority+0x4c>)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	0112      	lsls	r2, r2, #4
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	440b      	add	r3, r1
 8003990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003994:	e00a      	b.n	80039ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	4908      	ldr	r1, [pc, #32]	; (80039bc <__NVIC_SetPriority+0x50>)
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	3b04      	subs	r3, #4
 80039a4:	0112      	lsls	r2, r2, #4
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	440b      	add	r3, r1
 80039aa:	761a      	strb	r2, [r3, #24]
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000e100 	.word	0xe000e100
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b089      	sub	sp, #36	; 0x24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f1c3 0307 	rsb	r3, r3, #7
 80039da:	2b04      	cmp	r3, #4
 80039dc:	bf28      	it	cs
 80039de:	2304      	movcs	r3, #4
 80039e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3304      	adds	r3, #4
 80039e6:	2b06      	cmp	r3, #6
 80039e8:	d902      	bls.n	80039f0 <NVIC_EncodePriority+0x30>
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	3b03      	subs	r3, #3
 80039ee:	e000      	b.n	80039f2 <NVIC_EncodePriority+0x32>
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f4:	f04f 32ff 	mov.w	r2, #4294967295
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43da      	mvns	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	401a      	ands	r2, r3
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a08:	f04f 31ff 	mov.w	r1, #4294967295
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a12:	43d9      	mvns	r1, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a18:	4313      	orrs	r3, r2
         );
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3724      	adds	r7, #36	; 0x24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a38:	d301      	bcc.n	8003a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e00f      	b.n	8003a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a3e:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <SysTick_Config+0x40>)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a46:	210f      	movs	r1, #15
 8003a48:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4c:	f7ff ff8e 	bl	800396c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <SysTick_Config+0x40>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a56:	4b04      	ldr	r3, [pc, #16]	; (8003a68 <SysTick_Config+0x40>)
 8003a58:	2207      	movs	r2, #7
 8003a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	e000e010 	.word	0xe000e010

08003a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff ff29 	bl	80038cc <__NVIC_SetPriorityGrouping>
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b086      	sub	sp, #24
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	4603      	mov	r3, r0
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a94:	f7ff ff3e 	bl	8003914 <__NVIC_GetPriorityGrouping>
 8003a98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	68b9      	ldr	r1, [r7, #8]
 8003a9e:	6978      	ldr	r0, [r7, #20]
 8003aa0:	f7ff ff8e 	bl	80039c0 <NVIC_EncodePriority>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aaa:	4611      	mov	r1, r2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ff5d 	bl	800396c <__NVIC_SetPriority>
}
 8003ab2:	bf00      	nop
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ff31 	bl	8003930 <__NVIC_EnableIRQ>
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff ffa2 	bl	8003a28 <SysTick_Config>
 8003ae4:	4603      	mov	r3, r0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e014      	b.n	8003b2a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	791b      	ldrb	r3, [r3, #4]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d105      	bne.n	8003b16 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7fe f963 	bl	8001ddc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	795b      	ldrb	r3, [r3, #5]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_DAC_Start_DMA+0x1e>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e0ab      	b.n	8003caa <HAL_DAC_Start_DMA+0x176>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d12f      	bne.n	8003bc4 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4a52      	ldr	r2, [pc, #328]	; (8003cb4 <HAL_DAC_Start_DMA+0x180>)
 8003b6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4a51      	ldr	r2, [pc, #324]	; (8003cb8 <HAL_DAC_Start_DMA+0x184>)
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	4a50      	ldr	r2, [pc, #320]	; (8003cbc <HAL_DAC_Start_DMA+0x188>)
 8003b7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b8a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d013      	beq.n	8003bba <HAL_DAC_Start_DMA+0x86>
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d845      	bhi.n	8003c24 <HAL_DAC_Start_DMA+0xf0>
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_DAC_Start_DMA+0x72>
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d005      	beq.n	8003bb0 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003ba4:	e03e      	b.n	8003c24 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3308      	adds	r3, #8
 8003bac:	613b      	str	r3, [r7, #16]
        break;
 8003bae:	e03c      	b.n	8003c2a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	613b      	str	r3, [r7, #16]
        break;
 8003bb8:	e037      	b.n	8003c2a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3310      	adds	r3, #16
 8003bc0:	613b      	str	r3, [r7, #16]
        break;
 8003bc2:	e032      	b.n	8003c2a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	4a3d      	ldr	r2, [pc, #244]	; (8003cc0 <HAL_DAC_Start_DMA+0x18c>)
 8003bca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4a3c      	ldr	r2, [pc, #240]	; (8003cc4 <HAL_DAC_Start_DMA+0x190>)
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4a3b      	ldr	r2, [pc, #236]	; (8003cc8 <HAL_DAC_Start_DMA+0x194>)
 8003bda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003bea:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d013      	beq.n	8003c1a <HAL_DAC_Start_DMA+0xe6>
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d817      	bhi.n	8003c28 <HAL_DAC_Start_DMA+0xf4>
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_DAC_Start_DMA+0xd2>
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d005      	beq.n	8003c10 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003c04:	e010      	b.n	8003c28 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3314      	adds	r3, #20
 8003c0c:	613b      	str	r3, [r7, #16]
        break;
 8003c0e:	e00c      	b.n	8003c2a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3318      	adds	r3, #24
 8003c16:	613b      	str	r3, [r7, #16]
        break;
 8003c18:	e007      	b.n	8003c2a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	331c      	adds	r3, #28
 8003c20:	613b      	str	r3, [r7, #16]
        break;
 8003c22:	e002      	b.n	8003c2a <HAL_DAC_Start_DMA+0xf6>
        break;
 8003c24:	bf00      	nop
 8003c26:	e000      	b.n	8003c2a <HAL_DAC_Start_DMA+0xf6>
        break;
 8003c28:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d111      	bne.n	8003c54 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c3e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6898      	ldr	r0, [r3, #8]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	f000 faff 	bl	800424c <HAL_DMA_Start_IT>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	75fb      	strb	r3, [r7, #23]
 8003c52:	e010      	b.n	8003c76 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003c62:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	68d8      	ldr	r0, [r3, #12]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	f000 faed 	bl	800424c <HAL_DMA_Start_IT>
 8003c72:	4603      	mov	r3, r0
 8003c74:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10c      	bne.n	8003c9c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6819      	ldr	r1, [r3, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f003 0310 	and.w	r3, r3, #16
 8003c8e:	2201      	movs	r2, #1
 8003c90:	409a      	lsls	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	e005      	b.n	8003ca8 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	f043 0204 	orr.w	r2, r3, #4
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	08003fc7 	.word	0x08003fc7
 8003cb8:	08003fe9 	.word	0x08003fe9
 8003cbc:	08004005 	.word	0x08004005
 8003cc0:	0800406f 	.word	0x0800406f
 8003cc4:	08004091 	.word	0x08004091
 8003cc8:	080040ad 	.word	0x080040ad

08003ccc <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6819      	ldr	r1, [r3, #0]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43da      	mvns	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	400a      	ands	r2, r1
 8003cf2:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6819      	ldr	r1, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	f003 0310 	and.w	r3, r3, #16
 8003d00:	2201      	movs	r2, #1
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43da      	mvns	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10d      	bne.n	8003d32 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 faf6 	bl	800430c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	e00c      	b.n	8003d4c <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fae8 	bl	800430c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003d4a:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b088      	sub	sp, #32
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	795b      	ldrb	r3, [r3, #5]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_DAC_ConfigChannel+0x1c>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e107      	b.n	8003fbe <HAL_DAC_ConfigChannel+0x22c>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2202      	movs	r2, #2
 8003db8:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d174      	bne.n	8003eac <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003dc2:	f7fe fb51 	bl	8002468 <HAL_GetTick>
 8003dc6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d134      	bne.n	8003e38 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003dce:	e011      	b.n	8003df4 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003dd0:	f7fe fb4a 	bl	8002468 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d90a      	bls.n	8003df4 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f043 0208 	orr.w	r2, r3, #8
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2203      	movs	r2, #3
 8003dee:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e0e4      	b.n	8003fbe <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1e6      	bne.n	8003dd0 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003e02:	2001      	movs	r0, #1
 8003e04:	f7fe fb3c 	bl	8002480 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	6992      	ldr	r2, [r2, #24]
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40
 8003e12:	e01e      	b.n	8003e52 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003e14:	f7fe fb28 	bl	8002468 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d90a      	bls.n	8003e38 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f043 0208 	orr.w	r2, r3, #8
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2203      	movs	r2, #3
 8003e32:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e0c2      	b.n	8003fbe <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	dbe8      	blt.n	8003e14 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003e42:	2001      	movs	r0, #1
 8003e44:	f7fe fb1c 	bl	8002480 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	6992      	ldr	r2, [r2, #24]
 8003e50:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003e62:	fa01 f303 	lsl.w	r3, r1, r3
 8003e66:	43db      	mvns	r3, r3
 8003e68:	ea02 0103 	and.w	r1, r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	409a      	lsls	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f003 0310 	and.w	r3, r3, #16
 8003e8c:	21ff      	movs	r1, #255	; 0xff
 8003e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e92:	43db      	mvns	r3, r3
 8003e94:	ea02 0103 	and.w	r1, r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	6a1a      	ldr	r2, [r3, #32]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f003 0310 	and.w	r3, r3, #16
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d11d      	bne.n	8003ef0 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	221f      	movs	r2, #31
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2207      	movs	r2, #7
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	431a      	orrs	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6819      	ldr	r1, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43da      	mvns	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	400a      	ands	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4013      	ands	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f003 0310 	and.w	r3, r3, #16
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6819      	ldr	r1, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	22c0      	movs	r2, #192	; 0xc0
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43da      	mvns	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	400a      	ands	r2, r1
 8003fae:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3720      	adds	r7, #32
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f7ff febe 	bl	8003d56 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	711a      	strb	r2, [r3, #4]
}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f7ff feb7 	bl	8003d6a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f043 0204 	orr.w	r2, r3, #4
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f7ff fead 	bl	8003d7e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	711a      	strb	r2, [r3, #4]
}
 800402a:	bf00      	nop
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f7ff ffd8 	bl	8004032 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2201      	movs	r2, #1
 8004086:	711a      	strb	r2, [r3, #4]
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f7ff ffd1 	bl	8004046 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80040a4:	bf00      	nop
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f043 0204 	orr.w	r2, r3, #4
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f7ff ffc7 	bl	800405a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	711a      	strb	r2, [r3, #4]
}
 80040d2:	bf00      	nop
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e098      	b.n	8004220 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	4b4d      	ldr	r3, [pc, #308]	; (800422c <HAL_DMA_Init+0x150>)
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d80f      	bhi.n	800411a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	4b4b      	ldr	r3, [pc, #300]	; (8004230 <HAL_DMA_Init+0x154>)
 8004102:	4413      	add	r3, r2
 8004104:	4a4b      	ldr	r2, [pc, #300]	; (8004234 <HAL_DMA_Init+0x158>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	091b      	lsrs	r3, r3, #4
 800410c:	009a      	lsls	r2, r3, #2
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a48      	ldr	r2, [pc, #288]	; (8004238 <HAL_DMA_Init+0x15c>)
 8004116:	641a      	str	r2, [r3, #64]	; 0x40
 8004118:	e00e      	b.n	8004138 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	4b46      	ldr	r3, [pc, #280]	; (800423c <HAL_DMA_Init+0x160>)
 8004122:	4413      	add	r3, r2
 8004124:	4a43      	ldr	r2, [pc, #268]	; (8004234 <HAL_DMA_Init+0x158>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	009a      	lsls	r2, r3, #2
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a42      	ldr	r2, [pc, #264]	; (8004240 <HAL_DMA_Init+0x164>)
 8004136:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800414e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004152:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800415c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004168:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004174:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004192:	d039      	beq.n	8004208 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	4a27      	ldr	r2, [pc, #156]	; (8004238 <HAL_DMA_Init+0x15c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d11a      	bne.n	80041d4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800419e:	4b29      	ldr	r3, [pc, #164]	; (8004244 <HAL_DMA_Init+0x168>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a6:	f003 031c 	and.w	r3, r3, #28
 80041aa:	210f      	movs	r1, #15
 80041ac:	fa01 f303 	lsl.w	r3, r1, r3
 80041b0:	43db      	mvns	r3, r3
 80041b2:	4924      	ldr	r1, [pc, #144]	; (8004244 <HAL_DMA_Init+0x168>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80041b8:	4b22      	ldr	r3, [pc, #136]	; (8004244 <HAL_DMA_Init+0x168>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6859      	ldr	r1, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c4:	f003 031c 	and.w	r3, r3, #28
 80041c8:	fa01 f303 	lsl.w	r3, r1, r3
 80041cc:	491d      	ldr	r1, [pc, #116]	; (8004244 <HAL_DMA_Init+0x168>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	600b      	str	r3, [r1, #0]
 80041d2:	e019      	b.n	8004208 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80041d4:	4b1c      	ldr	r3, [pc, #112]	; (8004248 <HAL_DMA_Init+0x16c>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041dc:	f003 031c 	and.w	r3, r3, #28
 80041e0:	210f      	movs	r1, #15
 80041e2:	fa01 f303 	lsl.w	r3, r1, r3
 80041e6:	43db      	mvns	r3, r3
 80041e8:	4917      	ldr	r1, [pc, #92]	; (8004248 <HAL_DMA_Init+0x16c>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80041ee:	4b16      	ldr	r3, [pc, #88]	; (8004248 <HAL_DMA_Init+0x16c>)
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6859      	ldr	r1, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fa:	f003 031c 	and.w	r3, r3, #28
 80041fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004202:	4911      	ldr	r1, [pc, #68]	; (8004248 <HAL_DMA_Init+0x16c>)
 8004204:	4313      	orrs	r3, r2
 8004206:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	40020407 	.word	0x40020407
 8004230:	bffdfff8 	.word	0xbffdfff8
 8004234:	cccccccd 	.word	0xcccccccd
 8004238:	40020000 	.word	0x40020000
 800423c:	bffdfbf8 	.word	0xbffdfbf8
 8004240:	40020400 	.word	0x40020400
 8004244:	400200a8 	.word	0x400200a8
 8004248:	400204a8 	.word	0x400204a8

0800424c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_DMA_Start_IT+0x20>
 8004268:	2302      	movs	r3, #2
 800426a:	e04b      	b.n	8004304 <HAL_DMA_Start_IT+0xb8>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	d13a      	bne.n	80042f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0201 	bic.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	68b9      	ldr	r1, [r7, #8]
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f91e 	bl	80044e6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d008      	beq.n	80042c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 020e 	orr.w	r2, r2, #14
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	e00f      	b.n	80042e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0204 	bic.w	r2, r2, #4
 80042d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 020a 	orr.w	r2, r2, #10
 80042e2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0201 	orr.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	e005      	b.n	8004302 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
 8004300:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004302:	7dfb      	ldrb	r3, [r7, #23]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d008      	beq.n	8004336 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2204      	movs	r2, #4
 8004328:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e022      	b.n	800437c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 020e 	bic.w	r2, r2, #14
 8004344:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0201 	bic.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	f003 021c 	and.w	r2, r3, #28
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	2101      	movs	r1, #1
 8004364:	fa01 f202 	lsl.w	r2, r1, r2
 8004368:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800437a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a4:	f003 031c 	and.w	r3, r3, #28
 80043a8:	2204      	movs	r2, #4
 80043aa:	409a      	lsls	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d026      	beq.n	8004402 <HAL_DMA_IRQHandler+0x7a>
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d021      	beq.n	8004402 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d107      	bne.n	80043dc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0204 	bic.w	r2, r2, #4
 80043da:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	f003 021c 	and.w	r2, r3, #28
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	2104      	movs	r1, #4
 80043ea:	fa01 f202 	lsl.w	r2, r1, r2
 80043ee:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d071      	beq.n	80044dc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004400:	e06c      	b.n	80044dc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	f003 031c 	and.w	r3, r3, #28
 800440a:	2202      	movs	r2, #2
 800440c:	409a      	lsls	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4013      	ands	r3, r2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d02e      	beq.n	8004474 <HAL_DMA_IRQHandler+0xec>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d029      	beq.n	8004474 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10b      	bne.n	8004446 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 020a 	bic.w	r2, r2, #10
 800443c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444a:	f003 021c 	and.w	r2, r3, #28
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	2102      	movs	r1, #2
 8004454:	fa01 f202 	lsl.w	r2, r1, r2
 8004458:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	2b00      	cmp	r3, #0
 8004468:	d038      	beq.n	80044dc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004472:	e033      	b.n	80044dc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	f003 031c 	and.w	r3, r3, #28
 800447c:	2208      	movs	r2, #8
 800447e:	409a      	lsls	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4013      	ands	r3, r2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d02a      	beq.n	80044de <HAL_DMA_IRQHandler+0x156>
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d025      	beq.n	80044de <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 020e 	bic.w	r2, r2, #14
 80044a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	f003 021c 	and.w	r2, r3, #28
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	2101      	movs	r1, #1
 80044b0:	fa01 f202 	lsl.w	r2, r1, r2
 80044b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044dc:	bf00      	nop
 80044de:	bf00      	nop
}
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b085      	sub	sp, #20
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	607a      	str	r2, [r7, #4]
 80044f2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f8:	f003 021c 	and.w	r2, r3, #28
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	2101      	movs	r1, #1
 8004502:	fa01 f202 	lsl.w	r2, r1, r2
 8004506:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b10      	cmp	r3, #16
 8004516:	d108      	bne.n	800452a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004528:	e007      	b.n	800453a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	60da      	str	r2, [r3, #12]
}
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
	...

08004548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004556:	e17f      	b.n	8004858 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	2101      	movs	r1, #1
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	fa01 f303 	lsl.w	r3, r1, r3
 8004564:	4013      	ands	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 8171 	beq.w	8004852 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d00b      	beq.n	8004590 <HAL_GPIO_Init+0x48>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d007      	beq.n	8004590 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004584:	2b11      	cmp	r3, #17
 8004586:	d003      	beq.n	8004590 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2b12      	cmp	r3, #18
 800458e:	d130      	bne.n	80045f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	2203      	movs	r2, #3
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4013      	ands	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045c6:	2201      	movs	r2, #1
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	43db      	mvns	r3, r3
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4013      	ands	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	091b      	lsrs	r3, r3, #4
 80045dc:	f003 0201 	and.w	r2, r3, #1
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d118      	bne.n	8004630 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004604:	2201      	movs	r2, #1
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	43db      	mvns	r3, r3
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4013      	ands	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	08db      	lsrs	r3, r3, #3
 800461a:	f003 0201 	and.w	r2, r3, #1
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	2203      	movs	r2, #3
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	43db      	mvns	r3, r3
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4013      	ands	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b02      	cmp	r3, #2
 8004666:	d003      	beq.n	8004670 <HAL_GPIO_Init+0x128>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b12      	cmp	r3, #18
 800466e:	d123      	bne.n	80046b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	08da      	lsrs	r2, r3, #3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3208      	adds	r2, #8
 8004678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800467c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	220f      	movs	r2, #15
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	43db      	mvns	r3, r3
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4013      	ands	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	08da      	lsrs	r2, r3, #3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3208      	adds	r2, #8
 80046b2:	6939      	ldr	r1, [r7, #16]
 80046b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	2203      	movs	r2, #3
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	43db      	mvns	r3, r3
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4013      	ands	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 0203 	and.w	r2, r3, #3
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80ac 	beq.w	8004852 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046fa:	4b5f      	ldr	r3, [pc, #380]	; (8004878 <HAL_GPIO_Init+0x330>)
 80046fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046fe:	4a5e      	ldr	r2, [pc, #376]	; (8004878 <HAL_GPIO_Init+0x330>)
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	6613      	str	r3, [r2, #96]	; 0x60
 8004706:	4b5c      	ldr	r3, [pc, #368]	; (8004878 <HAL_GPIO_Init+0x330>)
 8004708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	60bb      	str	r3, [r7, #8]
 8004710:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004712:	4a5a      	ldr	r2, [pc, #360]	; (800487c <HAL_GPIO_Init+0x334>)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	089b      	lsrs	r3, r3, #2
 8004718:	3302      	adds	r3, #2
 800471a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800471e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	220f      	movs	r2, #15
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	43db      	mvns	r3, r3
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4013      	ands	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800473c:	d025      	beq.n	800478a <HAL_GPIO_Init+0x242>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a4f      	ldr	r2, [pc, #316]	; (8004880 <HAL_GPIO_Init+0x338>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d01f      	beq.n	8004786 <HAL_GPIO_Init+0x23e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a4e      	ldr	r2, [pc, #312]	; (8004884 <HAL_GPIO_Init+0x33c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d019      	beq.n	8004782 <HAL_GPIO_Init+0x23a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a4d      	ldr	r2, [pc, #308]	; (8004888 <HAL_GPIO_Init+0x340>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <HAL_GPIO_Init+0x236>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a4c      	ldr	r2, [pc, #304]	; (800488c <HAL_GPIO_Init+0x344>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00d      	beq.n	800477a <HAL_GPIO_Init+0x232>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a4b      	ldr	r2, [pc, #300]	; (8004890 <HAL_GPIO_Init+0x348>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <HAL_GPIO_Init+0x22e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a4a      	ldr	r2, [pc, #296]	; (8004894 <HAL_GPIO_Init+0x34c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d101      	bne.n	8004772 <HAL_GPIO_Init+0x22a>
 800476e:	2306      	movs	r3, #6
 8004770:	e00c      	b.n	800478c <HAL_GPIO_Init+0x244>
 8004772:	2307      	movs	r3, #7
 8004774:	e00a      	b.n	800478c <HAL_GPIO_Init+0x244>
 8004776:	2305      	movs	r3, #5
 8004778:	e008      	b.n	800478c <HAL_GPIO_Init+0x244>
 800477a:	2304      	movs	r3, #4
 800477c:	e006      	b.n	800478c <HAL_GPIO_Init+0x244>
 800477e:	2303      	movs	r3, #3
 8004780:	e004      	b.n	800478c <HAL_GPIO_Init+0x244>
 8004782:	2302      	movs	r3, #2
 8004784:	e002      	b.n	800478c <HAL_GPIO_Init+0x244>
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_GPIO_Init+0x244>
 800478a:	2300      	movs	r3, #0
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	f002 0203 	and.w	r2, r2, #3
 8004792:	0092      	lsls	r2, r2, #2
 8004794:	4093      	lsls	r3, r2
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800479c:	4937      	ldr	r1, [pc, #220]	; (800487c <HAL_GPIO_Init+0x334>)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	089b      	lsrs	r3, r3, #2
 80047a2:	3302      	adds	r3, #2
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047aa:	4b3b      	ldr	r3, [pc, #236]	; (8004898 <HAL_GPIO_Init+0x350>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	43db      	mvns	r3, r3
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4013      	ands	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047ce:	4a32      	ldr	r2, [pc, #200]	; (8004898 <HAL_GPIO_Init+0x350>)
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80047d4:	4b30      	ldr	r3, [pc, #192]	; (8004898 <HAL_GPIO_Init+0x350>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	43db      	mvns	r3, r3
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	4013      	ands	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047f8:	4a27      	ldr	r2, [pc, #156]	; (8004898 <HAL_GPIO_Init+0x350>)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047fe:	4b26      	ldr	r3, [pc, #152]	; (8004898 <HAL_GPIO_Init+0x350>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	43db      	mvns	r3, r3
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4013      	ands	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004822:	4a1d      	ldr	r2, [pc, #116]	; (8004898 <HAL_GPIO_Init+0x350>)
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004828:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <HAL_GPIO_Init+0x350>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	43db      	mvns	r3, r3
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4013      	ands	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800484c:	4a12      	ldr	r2, [pc, #72]	; (8004898 <HAL_GPIO_Init+0x350>)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	3301      	adds	r3, #1
 8004856:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	fa22 f303 	lsr.w	r3, r2, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	f47f ae78 	bne.w	8004558 <HAL_GPIO_Init+0x10>
  }
}
 8004868:	bf00      	nop
 800486a:	bf00      	nop
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40021000 	.word	0x40021000
 800487c:	40010000 	.word	0x40010000
 8004880:	48000400 	.word	0x48000400
 8004884:	48000800 	.word	0x48000800
 8004888:	48000c00 	.word	0x48000c00
 800488c:	48001000 	.word	0x48001000
 8004890:	48001400 	.word	0x48001400
 8004894:	48001800 	.word	0x48001800
 8004898:	40010400 	.word	0x40010400

0800489c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	807b      	strh	r3, [r7, #2]
 80048a8:	4613      	mov	r3, r2
 80048aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048ac:	787b      	ldrb	r3, [r7, #1]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048b2:	887a      	ldrh	r2, [r7, #2]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048b8:	e002      	b.n	80048c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048ba:	887a      	ldrh	r2, [r7, #2]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048d6:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048d8:	695a      	ldr	r2, [r3, #20]
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	4013      	ands	r3, r2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d006      	beq.n	80048f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048e2:	4a05      	ldr	r2, [pc, #20]	; (80048f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048e4:	88fb      	ldrh	r3, [r7, #6]
 80048e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048e8:	88fb      	ldrh	r3, [r7, #6]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fc fd02 	bl	80012f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80048f0:	bf00      	nop
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40010400 	.word	0x40010400

080048fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004900:	4b04      	ldr	r3, [pc, #16]	; (8004914 <HAL_PWREx_GetVoltageRange+0x18>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004908:	4618      	mov	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40007000 	.word	0x40007000

08004918 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004926:	d130      	bne.n	800498a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004928:	4b23      	ldr	r3, [pc, #140]	; (80049b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004934:	d038      	beq.n	80049a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004936:	4b20      	ldr	r3, [pc, #128]	; (80049b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800493e:	4a1e      	ldr	r2, [pc, #120]	; (80049b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004940:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004944:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004946:	4b1d      	ldr	r3, [pc, #116]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2232      	movs	r2, #50	; 0x32
 800494c:	fb02 f303 	mul.w	r3, r2, r3
 8004950:	4a1b      	ldr	r2, [pc, #108]	; (80049c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	0c9b      	lsrs	r3, r3, #18
 8004958:	3301      	adds	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800495c:	e002      	b.n	8004964 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3b01      	subs	r3, #1
 8004962:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004964:	4b14      	ldr	r3, [pc, #80]	; (80049b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800496c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004970:	d102      	bne.n	8004978 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1f2      	bne.n	800495e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004978:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004984:	d110      	bne.n	80049a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e00f      	b.n	80049aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800498a:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004996:	d007      	beq.n	80049a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004998:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049a0:	4a05      	ldr	r2, [pc, #20]	; (80049b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40007000 	.word	0x40007000
 80049bc:	20000084 	.word	0x20000084
 80049c0:	431bde83 	.word	0x431bde83

080049c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e3d4      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049d6:	4ba1      	ldr	r3, [pc, #644]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
 80049de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049e0:	4b9e      	ldr	r3, [pc, #632]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0310 	and.w	r3, r3, #16
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 80e4 	beq.w	8004bc0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d007      	beq.n	8004a0e <HAL_RCC_OscConfig+0x4a>
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b0c      	cmp	r3, #12
 8004a02:	f040 808b 	bne.w	8004b1c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	f040 8087 	bne.w	8004b1c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a0e:	4b93      	ldr	r3, [pc, #588]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <HAL_RCC_OscConfig+0x62>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e3ac      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1a      	ldr	r2, [r3, #32]
 8004a2a:	4b8c      	ldr	r3, [pc, #560]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d004      	beq.n	8004a40 <HAL_RCC_OscConfig+0x7c>
 8004a36:	4b89      	ldr	r3, [pc, #548]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a3e:	e005      	b.n	8004a4c <HAL_RCC_OscConfig+0x88>
 8004a40:	4b86      	ldr	r3, [pc, #536]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d223      	bcs.n	8004a98 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fd41 	bl	80054dc <RCC_SetFlashLatencyFromMSIRange>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e38d      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a64:	4b7d      	ldr	r3, [pc, #500]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a7c      	ldr	r2, [pc, #496]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004a6a:	f043 0308 	orr.w	r3, r3, #8
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	4b7a      	ldr	r3, [pc, #488]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	4977      	ldr	r1, [pc, #476]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a82:	4b76      	ldr	r3, [pc, #472]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	4972      	ldr	r1, [pc, #456]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	604b      	str	r3, [r1, #4]
 8004a96:	e025      	b.n	8004ae4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a98:	4b70      	ldr	r3, [pc, #448]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a6f      	ldr	r2, [pc, #444]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004a9e:	f043 0308 	orr.w	r3, r3, #8
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	4b6d      	ldr	r3, [pc, #436]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	496a      	ldr	r1, [pc, #424]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ab6:	4b69      	ldr	r3, [pc, #420]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	4965      	ldr	r1, [pc, #404]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d109      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fd01 	bl	80054dc <RCC_SetFlashLatencyFromMSIRange>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e34d      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ae4:	f000 fc36 	bl	8005354 <HAL_RCC_GetSysClockFreq>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	4b5c      	ldr	r3, [pc, #368]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	091b      	lsrs	r3, r3, #4
 8004af0:	f003 030f 	and.w	r3, r3, #15
 8004af4:	495a      	ldr	r1, [pc, #360]	; (8004c60 <HAL_RCC_OscConfig+0x29c>)
 8004af6:	5ccb      	ldrb	r3, [r1, r3]
 8004af8:	f003 031f 	and.w	r3, r3, #31
 8004afc:	fa22 f303 	lsr.w	r3, r2, r3
 8004b00:	4a58      	ldr	r2, [pc, #352]	; (8004c64 <HAL_RCC_OscConfig+0x2a0>)
 8004b02:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b04:	4b58      	ldr	r3, [pc, #352]	; (8004c68 <HAL_RCC_OscConfig+0x2a4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fd fc5d 	bl	80023c8 <HAL_InitTick>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d052      	beq.n	8004bbe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	e331      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d032      	beq.n	8004b8a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b24:	4b4d      	ldr	r3, [pc, #308]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a4c      	ldr	r2, [pc, #304]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004b2a:	f043 0301 	orr.w	r3, r3, #1
 8004b2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b30:	f7fd fc9a 	bl	8002468 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b38:	f7fd fc96 	bl	8002468 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e31a      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b4a:	4b44      	ldr	r3, [pc, #272]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b56:	4b41      	ldr	r3, [pc, #260]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a40      	ldr	r2, [pc, #256]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004b5c:	f043 0308 	orr.w	r3, r3, #8
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	4b3e      	ldr	r3, [pc, #248]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	493b      	ldr	r1, [pc, #236]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b74:	4b39      	ldr	r3, [pc, #228]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	4936      	ldr	r1, [pc, #216]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	604b      	str	r3, [r1, #4]
 8004b88:	e01a      	b.n	8004bc0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b8a:	4b34      	ldr	r3, [pc, #208]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a33      	ldr	r2, [pc, #204]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004b90:	f023 0301 	bic.w	r3, r3, #1
 8004b94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b96:	f7fd fc67 	bl	8002468 <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b9e:	f7fd fc63 	bl	8002468 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e2e7      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bb0:	4b2a      	ldr	r3, [pc, #168]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1f0      	bne.n	8004b9e <HAL_RCC_OscConfig+0x1da>
 8004bbc:	e000      	b.n	8004bc0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bbe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d074      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d005      	beq.n	8004bde <HAL_RCC_OscConfig+0x21a>
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b0c      	cmp	r3, #12
 8004bd6:	d10e      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d10b      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bde:	4b1f      	ldr	r3, [pc, #124]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d064      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x2f0>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d160      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e2c4      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfe:	d106      	bne.n	8004c0e <HAL_RCC_OscConfig+0x24a>
 8004c00:	4b16      	ldr	r3, [pc, #88]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a15      	ldr	r2, [pc, #84]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	e01d      	b.n	8004c4a <HAL_RCC_OscConfig+0x286>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c16:	d10c      	bne.n	8004c32 <HAL_RCC_OscConfig+0x26e>
 8004c18:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a0f      	ldr	r2, [pc, #60]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004c1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	4b0d      	ldr	r3, [pc, #52]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a0c      	ldr	r2, [pc, #48]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	e00b      	b.n	8004c4a <HAL_RCC_OscConfig+0x286>
 8004c32:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a06      	ldr	r2, [pc, #24]	; (8004c5c <HAL_RCC_OscConfig+0x298>)
 8004c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c48:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d01c      	beq.n	8004c8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c52:	f7fd fc09 	bl	8002468 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c58:	e011      	b.n	8004c7e <HAL_RCC_OscConfig+0x2ba>
 8004c5a:	bf00      	nop
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	0800a4c4 	.word	0x0800a4c4
 8004c64:	20000084 	.word	0x20000084
 8004c68:	20000088 	.word	0x20000088
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c6c:	f7fd fbfc 	bl	8002468 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b64      	cmp	r3, #100	; 0x64
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e280      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c7e:	4baf      	ldr	r3, [pc, #700]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f0      	beq.n	8004c6c <HAL_RCC_OscConfig+0x2a8>
 8004c8a:	e014      	b.n	8004cb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8c:	f7fd fbec 	bl	8002468 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c94:	f7fd fbe8 	bl	8002468 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b64      	cmp	r3, #100	; 0x64
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e26c      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ca6:	4ba5      	ldr	r3, [pc, #660]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0x2d0>
 8004cb2:	e000      	b.n	8004cb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d060      	beq.n	8004d84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d005      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x310>
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	2b0c      	cmp	r3, #12
 8004ccc:	d119      	bne.n	8004d02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d116      	bne.n	8004d02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cd4:	4b99      	ldr	r3, [pc, #612]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_RCC_OscConfig+0x328>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e249      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cec:	4b93      	ldr	r3, [pc, #588]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	061b      	lsls	r3, r3, #24
 8004cfa:	4990      	ldr	r1, [pc, #576]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d00:	e040      	b.n	8004d84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d023      	beq.n	8004d52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d0a:	4b8c      	ldr	r3, [pc, #560]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a8b      	ldr	r2, [pc, #556]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d16:	f7fd fba7 	bl	8002468 <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d1e:	f7fd fba3 	bl	8002468 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e227      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d30:	4b82      	ldr	r3, [pc, #520]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f0      	beq.n	8004d1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3c:	4b7f      	ldr	r3, [pc, #508]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	061b      	lsls	r3, r3, #24
 8004d4a:	497c      	ldr	r1, [pc, #496]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	604b      	str	r3, [r1, #4]
 8004d50:	e018      	b.n	8004d84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d52:	4b7a      	ldr	r3, [pc, #488]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a79      	ldr	r2, [pc, #484]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5e:	f7fd fb83 	bl	8002468 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d66:	f7fd fb7f 	bl	8002468 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e203      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d78:	4b70      	ldr	r3, [pc, #448]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f0      	bne.n	8004d66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d03c      	beq.n	8004e0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d01c      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d98:	4b68      	ldr	r3, [pc, #416]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d9e:	4a67      	ldr	r2, [pc, #412]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da8:	f7fd fb5e 	bl	8002468 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db0:	f7fd fb5a 	bl	8002468 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e1de      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dc2:	4b5e      	ldr	r3, [pc, #376]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0ef      	beq.n	8004db0 <HAL_RCC_OscConfig+0x3ec>
 8004dd0:	e01b      	b.n	8004e0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dd2:	4b5a      	ldr	r3, [pc, #360]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dd8:	4a58      	ldr	r2, [pc, #352]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004dda:	f023 0301 	bic.w	r3, r3, #1
 8004dde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de2:	f7fd fb41 	bl	8002468 <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dea:	f7fd fb3d 	bl	8002468 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e1c1      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dfc:	4b4f      	ldr	r3, [pc, #316]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1ef      	bne.n	8004dea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 80a6 	beq.w	8004f64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e1c:	4b47      	ldr	r3, [pc, #284]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10d      	bne.n	8004e44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e28:	4b44      	ldr	r3, [pc, #272]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2c:	4a43      	ldr	r2, [pc, #268]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e32:	6593      	str	r3, [r2, #88]	; 0x58
 8004e34:	4b41      	ldr	r3, [pc, #260]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e40:	2301      	movs	r3, #1
 8004e42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e44:	4b3e      	ldr	r3, [pc, #248]	; (8004f40 <HAL_RCC_OscConfig+0x57c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d118      	bne.n	8004e82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e50:	4b3b      	ldr	r3, [pc, #236]	; (8004f40 <HAL_RCC_OscConfig+0x57c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a3a      	ldr	r2, [pc, #232]	; (8004f40 <HAL_RCC_OscConfig+0x57c>)
 8004e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e5c:	f7fd fb04 	bl	8002468 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e64:	f7fd fb00 	bl	8002468 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e184      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e76:	4b32      	ldr	r3, [pc, #200]	; (8004f40 <HAL_RCC_OscConfig+0x57c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0f0      	beq.n	8004e64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d108      	bne.n	8004e9c <HAL_RCC_OscConfig+0x4d8>
 8004e8a:	4b2c      	ldr	r3, [pc, #176]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e90:	4a2a      	ldr	r2, [pc, #168]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e9a:	e024      	b.n	8004ee6 <HAL_RCC_OscConfig+0x522>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	2b05      	cmp	r3, #5
 8004ea2:	d110      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x502>
 8004ea4:	4b25      	ldr	r3, [pc, #148]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eaa:	4a24      	ldr	r2, [pc, #144]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004eac:	f043 0304 	orr.w	r3, r3, #4
 8004eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004eb4:	4b21      	ldr	r3, [pc, #132]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eba:	4a20      	ldr	r2, [pc, #128]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ec4:	e00f      	b.n	8004ee6 <HAL_RCC_OscConfig+0x522>
 8004ec6:	4b1d      	ldr	r3, [pc, #116]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ecc:	4a1b      	ldr	r2, [pc, #108]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ed6:	4b19      	ldr	r3, [pc, #100]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004edc:	4a17      	ldr	r2, [pc, #92]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004ede:	f023 0304 	bic.w	r3, r3, #4
 8004ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d016      	beq.n	8004f1c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eee:	f7fd fabb 	bl	8002468 <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef4:	e00a      	b.n	8004f0c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef6:	f7fd fab7 	bl	8002468 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e139      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f0c:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <HAL_RCC_OscConfig+0x578>)
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0ed      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x532>
 8004f1a:	e01a      	b.n	8004f52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1c:	f7fd faa4 	bl	8002468 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f22:	e00f      	b.n	8004f44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f24:	f7fd faa0 	bl	8002468 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d906      	bls.n	8004f44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e122      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
 8004f3a:	bf00      	nop
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f44:	4b90      	ldr	r3, [pc, #576]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 8004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e8      	bne.n	8004f24 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f52:	7ffb      	ldrb	r3, [r7, #31]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d105      	bne.n	8004f64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f58:	4b8b      	ldr	r3, [pc, #556]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 8004f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5c:	4a8a      	ldr	r2, [pc, #552]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 8004f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f62:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 8108 	beq.w	800517e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	f040 80d0 	bne.w	8005118 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f78:	4b83      	ldr	r3, [pc, #524]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f003 0203 	and.w	r2, r3, #3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d130      	bne.n	8004fee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	3b01      	subs	r3, #1
 8004f98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d127      	bne.n	8004fee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d11f      	bne.n	8004fee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fb8:	2a07      	cmp	r2, #7
 8004fba:	bf14      	ite	ne
 8004fbc:	2201      	movne	r2, #1
 8004fbe:	2200      	moveq	r2, #0
 8004fc0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d113      	bne.n	8004fee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd0:	085b      	lsrs	r3, r3, #1
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d109      	bne.n	8004fee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d06e      	beq.n	80050cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	2b0c      	cmp	r3, #12
 8004ff2:	d069      	beq.n	80050c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ff4:	4b64      	ldr	r3, [pc, #400]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d105      	bne.n	800500c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005000:	4b61      	ldr	r3, [pc, #388]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0b7      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005010:	4b5d      	ldr	r3, [pc, #372]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a5c      	ldr	r2, [pc, #368]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 8005016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800501a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800501c:	f7fd fa24 	bl	8002468 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005024:	f7fd fa20 	bl	8002468 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e0a4      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005036:	4b54      	ldr	r3, [pc, #336]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005042:	4b51      	ldr	r3, [pc, #324]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	4b51      	ldr	r3, [pc, #324]	; (800518c <HAL_RCC_OscConfig+0x7c8>)
 8005048:	4013      	ands	r3, r2
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005052:	3a01      	subs	r2, #1
 8005054:	0112      	lsls	r2, r2, #4
 8005056:	4311      	orrs	r1, r2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800505c:	0212      	lsls	r2, r2, #8
 800505e:	4311      	orrs	r1, r2
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005064:	0852      	lsrs	r2, r2, #1
 8005066:	3a01      	subs	r2, #1
 8005068:	0552      	lsls	r2, r2, #21
 800506a:	4311      	orrs	r1, r2
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005070:	0852      	lsrs	r2, r2, #1
 8005072:	3a01      	subs	r2, #1
 8005074:	0652      	lsls	r2, r2, #25
 8005076:	4311      	orrs	r1, r2
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800507c:	0912      	lsrs	r2, r2, #4
 800507e:	0452      	lsls	r2, r2, #17
 8005080:	430a      	orrs	r2, r1
 8005082:	4941      	ldr	r1, [pc, #260]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 8005084:	4313      	orrs	r3, r2
 8005086:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005088:	4b3f      	ldr	r3, [pc, #252]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a3e      	ldr	r2, [pc, #248]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 800508e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005092:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005094:	4b3c      	ldr	r3, [pc, #240]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4a3b      	ldr	r2, [pc, #236]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 800509a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800509e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050a0:	f7fd f9e2 	bl	8002468 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a8:	f7fd f9de 	bl	8002468 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e062      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ba:	4b33      	ldr	r3, [pc, #204]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050c6:	e05a      	b.n	800517e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e059      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050cc:	4b2e      	ldr	r3, [pc, #184]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d152      	bne.n	800517e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050d8:	4b2b      	ldr	r3, [pc, #172]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a2a      	ldr	r2, [pc, #168]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 80050de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050e4:	4b28      	ldr	r3, [pc, #160]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	4a27      	ldr	r2, [pc, #156]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 80050ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050f0:	f7fd f9ba 	bl	8002468 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f8:	f7fd f9b6 	bl	8002468 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e03a      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800510a:	4b1f      	ldr	r3, [pc, #124]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCC_OscConfig+0x734>
 8005116:	e032      	b.n	800517e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	2b0c      	cmp	r3, #12
 800511c:	d02d      	beq.n	800517a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800511e:	4b1a      	ldr	r3, [pc, #104]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a19      	ldr	r2, [pc, #100]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 8005124:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005128:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800512a:	4b17      	ldr	r3, [pc, #92]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d105      	bne.n	8005142 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005136:	4b14      	ldr	r3, [pc, #80]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	4a13      	ldr	r2, [pc, #76]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 800513c:	f023 0303 	bic.w	r3, r3, #3
 8005140:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005142:	4b11      	ldr	r3, [pc, #68]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	4a10      	ldr	r2, [pc, #64]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 8005148:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800514c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005150:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005152:	f7fd f989 	bl	8002468 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800515a:	f7fd f985 	bl	8002468 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e009      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <HAL_RCC_OscConfig+0x7c4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f0      	bne.n	800515a <HAL_RCC_OscConfig+0x796>
 8005178:	e001      	b.n	800517e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3720      	adds	r7, #32
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40021000 	.word	0x40021000
 800518c:	f99d808c 	.word	0xf99d808c

08005190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e0c8      	b.n	8005336 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051a4:	4b66      	ldr	r3, [pc, #408]	; (8005340 <HAL_RCC_ClockConfig+0x1b0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d910      	bls.n	80051d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b2:	4b63      	ldr	r3, [pc, #396]	; (8005340 <HAL_RCC_ClockConfig+0x1b0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f023 0207 	bic.w	r2, r3, #7
 80051ba:	4961      	ldr	r1, [pc, #388]	; (8005340 <HAL_RCC_ClockConfig+0x1b0>)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c2:	4b5f      	ldr	r3, [pc, #380]	; (8005340 <HAL_RCC_ClockConfig+0x1b0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d001      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0b0      	b.n	8005336 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d04c      	beq.n	800527a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d107      	bne.n	80051f8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051e8:	4b56      	ldr	r3, [pc, #344]	; (8005344 <HAL_RCC_ClockConfig+0x1b4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d121      	bne.n	8005238 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e09e      	b.n	8005336 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d107      	bne.n	8005210 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005200:	4b50      	ldr	r3, [pc, #320]	; (8005344 <HAL_RCC_ClockConfig+0x1b4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d115      	bne.n	8005238 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e092      	b.n	8005336 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d107      	bne.n	8005228 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005218:	4b4a      	ldr	r3, [pc, #296]	; (8005344 <HAL_RCC_ClockConfig+0x1b4>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d109      	bne.n	8005238 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e086      	b.n	8005336 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005228:	4b46      	ldr	r3, [pc, #280]	; (8005344 <HAL_RCC_ClockConfig+0x1b4>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e07e      	b.n	8005336 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005238:	4b42      	ldr	r3, [pc, #264]	; (8005344 <HAL_RCC_ClockConfig+0x1b4>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f023 0203 	bic.w	r2, r3, #3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	493f      	ldr	r1, [pc, #252]	; (8005344 <HAL_RCC_ClockConfig+0x1b4>)
 8005246:	4313      	orrs	r3, r2
 8005248:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800524a:	f7fd f90d 	bl	8002468 <HAL_GetTick>
 800524e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005250:	e00a      	b.n	8005268 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005252:	f7fd f909 	bl	8002468 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005260:	4293      	cmp	r3, r2
 8005262:	d901      	bls.n	8005268 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e066      	b.n	8005336 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005268:	4b36      	ldr	r3, [pc, #216]	; (8005344 <HAL_RCC_ClockConfig+0x1b4>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f003 020c 	and.w	r2, r3, #12
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	429a      	cmp	r2, r3
 8005278:	d1eb      	bne.n	8005252 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d008      	beq.n	8005298 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005286:	4b2f      	ldr	r3, [pc, #188]	; (8005344 <HAL_RCC_ClockConfig+0x1b4>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	492c      	ldr	r1, [pc, #176]	; (8005344 <HAL_RCC_ClockConfig+0x1b4>)
 8005294:	4313      	orrs	r3, r2
 8005296:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005298:	4b29      	ldr	r3, [pc, #164]	; (8005340 <HAL_RCC_ClockConfig+0x1b0>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d210      	bcs.n	80052c8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a6:	4b26      	ldr	r3, [pc, #152]	; (8005340 <HAL_RCC_ClockConfig+0x1b0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f023 0207 	bic.w	r2, r3, #7
 80052ae:	4924      	ldr	r1, [pc, #144]	; (8005340 <HAL_RCC_ClockConfig+0x1b0>)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b6:	4b22      	ldr	r3, [pc, #136]	; (8005340 <HAL_RCC_ClockConfig+0x1b0>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d001      	beq.n	80052c8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e036      	b.n	8005336 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d008      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d4:	4b1b      	ldr	r3, [pc, #108]	; (8005344 <HAL_RCC_ClockConfig+0x1b4>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	4918      	ldr	r1, [pc, #96]	; (8005344 <HAL_RCC_ClockConfig+0x1b4>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d009      	beq.n	8005306 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052f2:	4b14      	ldr	r3, [pc, #80]	; (8005344 <HAL_RCC_ClockConfig+0x1b4>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	4910      	ldr	r1, [pc, #64]	; (8005344 <HAL_RCC_ClockConfig+0x1b4>)
 8005302:	4313      	orrs	r3, r2
 8005304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005306:	f000 f825 	bl	8005354 <HAL_RCC_GetSysClockFreq>
 800530a:	4602      	mov	r2, r0
 800530c:	4b0d      	ldr	r3, [pc, #52]	; (8005344 <HAL_RCC_ClockConfig+0x1b4>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	091b      	lsrs	r3, r3, #4
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	490c      	ldr	r1, [pc, #48]	; (8005348 <HAL_RCC_ClockConfig+0x1b8>)
 8005318:	5ccb      	ldrb	r3, [r1, r3]
 800531a:	f003 031f 	and.w	r3, r3, #31
 800531e:	fa22 f303 	lsr.w	r3, r2, r3
 8005322:	4a0a      	ldr	r2, [pc, #40]	; (800534c <HAL_RCC_ClockConfig+0x1bc>)
 8005324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005326:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <HAL_RCC_ClockConfig+0x1c0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f7fd f84c 	bl	80023c8 <HAL_InitTick>
 8005330:	4603      	mov	r3, r0
 8005332:	72fb      	strb	r3, [r7, #11]

  return status;
 8005334:	7afb      	ldrb	r3, [r7, #11]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	40022000 	.word	0x40022000
 8005344:	40021000 	.word	0x40021000
 8005348:	0800a4c4 	.word	0x0800a4c4
 800534c:	20000084 	.word	0x20000084
 8005350:	20000088 	.word	0x20000088

08005354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005354:	b480      	push	{r7}
 8005356:	b089      	sub	sp, #36	; 0x24
 8005358:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	61fb      	str	r3, [r7, #28]
 800535e:	2300      	movs	r3, #0
 8005360:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005362:	4b3e      	ldr	r3, [pc, #248]	; (800545c <HAL_RCC_GetSysClockFreq+0x108>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 030c 	and.w	r3, r3, #12
 800536a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800536c:	4b3b      	ldr	r3, [pc, #236]	; (800545c <HAL_RCC_GetSysClockFreq+0x108>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0303 	and.w	r3, r3, #3
 8005374:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d005      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x34>
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	2b0c      	cmp	r3, #12
 8005380:	d121      	bne.n	80053c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d11e      	bne.n	80053c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005388:	4b34      	ldr	r3, [pc, #208]	; (800545c <HAL_RCC_GetSysClockFreq+0x108>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b00      	cmp	r3, #0
 8005392:	d107      	bne.n	80053a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005394:	4b31      	ldr	r3, [pc, #196]	; (800545c <HAL_RCC_GetSysClockFreq+0x108>)
 8005396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800539a:	0a1b      	lsrs	r3, r3, #8
 800539c:	f003 030f 	and.w	r3, r3, #15
 80053a0:	61fb      	str	r3, [r7, #28]
 80053a2:	e005      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053a4:	4b2d      	ldr	r3, [pc, #180]	; (800545c <HAL_RCC_GetSysClockFreq+0x108>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	091b      	lsrs	r3, r3, #4
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80053b0:	4a2b      	ldr	r2, [pc, #172]	; (8005460 <HAL_RCC_GetSysClockFreq+0x10c>)
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10d      	bne.n	80053dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053c4:	e00a      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d102      	bne.n	80053d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053cc:	4b25      	ldr	r3, [pc, #148]	; (8005464 <HAL_RCC_GetSysClockFreq+0x110>)
 80053ce:	61bb      	str	r3, [r7, #24]
 80053d0:	e004      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d101      	bne.n	80053dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053d8:	4b23      	ldr	r3, [pc, #140]	; (8005468 <HAL_RCC_GetSysClockFreq+0x114>)
 80053da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	2b0c      	cmp	r3, #12
 80053e0:	d134      	bne.n	800544c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053e2:	4b1e      	ldr	r3, [pc, #120]	; (800545c <HAL_RCC_GetSysClockFreq+0x108>)
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d003      	beq.n	80053fa <HAL_RCC_GetSysClockFreq+0xa6>
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d003      	beq.n	8005400 <HAL_RCC_GetSysClockFreq+0xac>
 80053f8:	e005      	b.n	8005406 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053fa:	4b1a      	ldr	r3, [pc, #104]	; (8005464 <HAL_RCC_GetSysClockFreq+0x110>)
 80053fc:	617b      	str	r3, [r7, #20]
      break;
 80053fe:	e005      	b.n	800540c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005400:	4b19      	ldr	r3, [pc, #100]	; (8005468 <HAL_RCC_GetSysClockFreq+0x114>)
 8005402:	617b      	str	r3, [r7, #20]
      break;
 8005404:	e002      	b.n	800540c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	617b      	str	r3, [r7, #20]
      break;
 800540a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800540c:	4b13      	ldr	r3, [pc, #76]	; (800545c <HAL_RCC_GetSysClockFreq+0x108>)
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	091b      	lsrs	r3, r3, #4
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	3301      	adds	r3, #1
 8005418:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800541a:	4b10      	ldr	r3, [pc, #64]	; (800545c <HAL_RCC_GetSysClockFreq+0x108>)
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	0a1b      	lsrs	r3, r3, #8
 8005420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	fb02 f203 	mul.w	r2, r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005430:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005432:	4b0a      	ldr	r3, [pc, #40]	; (800545c <HAL_RCC_GetSysClockFreq+0x108>)
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	0e5b      	lsrs	r3, r3, #25
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	3301      	adds	r3, #1
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	fbb2 f3f3 	udiv	r3, r2, r3
 800544a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800544c:	69bb      	ldr	r3, [r7, #24]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3724      	adds	r7, #36	; 0x24
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40021000 	.word	0x40021000
 8005460:	0800a4dc 	.word	0x0800a4dc
 8005464:	00f42400 	.word	0x00f42400
 8005468:	007a1200 	.word	0x007a1200

0800546c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005470:	4b03      	ldr	r3, [pc, #12]	; (8005480 <HAL_RCC_GetHCLKFreq+0x14>)
 8005472:	681b      	ldr	r3, [r3, #0]
}
 8005474:	4618      	mov	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	20000084 	.word	0x20000084

08005484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005488:	f7ff fff0 	bl	800546c <HAL_RCC_GetHCLKFreq>
 800548c:	4602      	mov	r2, r0
 800548e:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	4904      	ldr	r1, [pc, #16]	; (80054ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800549a:	5ccb      	ldrb	r3, [r1, r3]
 800549c:	f003 031f 	and.w	r3, r3, #31
 80054a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40021000 	.word	0x40021000
 80054ac:	0800a4d4 	.word	0x0800a4d4

080054b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054b4:	f7ff ffda 	bl	800546c <HAL_RCC_GetHCLKFreq>
 80054b8:	4602      	mov	r2, r0
 80054ba:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	0adb      	lsrs	r3, r3, #11
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	4904      	ldr	r1, [pc, #16]	; (80054d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054c6:	5ccb      	ldrb	r3, [r1, r3]
 80054c8:	f003 031f 	and.w	r3, r3, #31
 80054cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40021000 	.word	0x40021000
 80054d8:	0800a4d4 	.word	0x0800a4d4

080054dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054e4:	2300      	movs	r3, #0
 80054e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054e8:	4b2a      	ldr	r3, [pc, #168]	; (8005594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054f4:	f7ff fa02 	bl	80048fc <HAL_PWREx_GetVoltageRange>
 80054f8:	6178      	str	r0, [r7, #20]
 80054fa:	e014      	b.n	8005526 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054fc:	4b25      	ldr	r3, [pc, #148]	; (8005594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005500:	4a24      	ldr	r2, [pc, #144]	; (8005594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005506:	6593      	str	r3, [r2, #88]	; 0x58
 8005508:	4b22      	ldr	r3, [pc, #136]	; (8005594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800550a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005514:	f7ff f9f2 	bl	80048fc <HAL_PWREx_GetVoltageRange>
 8005518:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800551a:	4b1e      	ldr	r3, [pc, #120]	; (8005594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800551c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551e:	4a1d      	ldr	r2, [pc, #116]	; (8005594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005524:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800552c:	d10b      	bne.n	8005546 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b80      	cmp	r3, #128	; 0x80
 8005532:	d919      	bls.n	8005568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2ba0      	cmp	r3, #160	; 0xa0
 8005538:	d902      	bls.n	8005540 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800553a:	2302      	movs	r3, #2
 800553c:	613b      	str	r3, [r7, #16]
 800553e:	e013      	b.n	8005568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005540:	2301      	movs	r3, #1
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	e010      	b.n	8005568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b80      	cmp	r3, #128	; 0x80
 800554a:	d902      	bls.n	8005552 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800554c:	2303      	movs	r3, #3
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	e00a      	b.n	8005568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b80      	cmp	r3, #128	; 0x80
 8005556:	d102      	bne.n	800555e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005558:	2302      	movs	r3, #2
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	e004      	b.n	8005568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b70      	cmp	r3, #112	; 0x70
 8005562:	d101      	bne.n	8005568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005564:	2301      	movs	r3, #1
 8005566:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005568:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f023 0207 	bic.w	r2, r3, #7
 8005570:	4909      	ldr	r1, [pc, #36]	; (8005598 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	4313      	orrs	r3, r2
 8005576:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005578:	4b07      	ldr	r3, [pc, #28]	; (8005598 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	429a      	cmp	r2, r3
 8005584:	d001      	beq.n	800558a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e000      	b.n	800558c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40021000 	.word	0x40021000
 8005598:	40022000 	.word	0x40022000

0800559c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055a4:	2300      	movs	r3, #0
 80055a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055a8:	2300      	movs	r3, #0
 80055aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d041      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055c0:	d02a      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80055c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055c6:	d824      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055cc:	d008      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80055ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055d2:	d81e      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80055d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055dc:	d010      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055de:	e018      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055e0:	4b86      	ldr	r3, [pc, #536]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4a85      	ldr	r2, [pc, #532]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055ec:	e015      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	3304      	adds	r3, #4
 80055f2:	2100      	movs	r1, #0
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fabb 	bl	8005b70 <RCCEx_PLLSAI1_Config>
 80055fa:	4603      	mov	r3, r0
 80055fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055fe:	e00c      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3320      	adds	r3, #32
 8005604:	2100      	movs	r1, #0
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fba6 	bl	8005d58 <RCCEx_PLLSAI2_Config>
 800560c:	4603      	mov	r3, r0
 800560e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005610:	e003      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	74fb      	strb	r3, [r7, #19]
      break;
 8005616:	e000      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800561a:	7cfb      	ldrb	r3, [r7, #19]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10b      	bne.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005620:	4b76      	ldr	r3, [pc, #472]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800562e:	4973      	ldr	r1, [pc, #460]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005636:	e001      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005638:	7cfb      	ldrb	r3, [r7, #19]
 800563a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d041      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800564c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005650:	d02a      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005652:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005656:	d824      	bhi.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005658:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800565c:	d008      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800565e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005662:	d81e      	bhi.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800566c:	d010      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800566e:	e018      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005670:	4b62      	ldr	r3, [pc, #392]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	4a61      	ldr	r2, [pc, #388]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800567a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800567c:	e015      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	3304      	adds	r3, #4
 8005682:	2100      	movs	r1, #0
 8005684:	4618      	mov	r0, r3
 8005686:	f000 fa73 	bl	8005b70 <RCCEx_PLLSAI1_Config>
 800568a:	4603      	mov	r3, r0
 800568c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800568e:	e00c      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3320      	adds	r3, #32
 8005694:	2100      	movs	r1, #0
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fb5e 	bl	8005d58 <RCCEx_PLLSAI2_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056a0:	e003      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	74fb      	strb	r3, [r7, #19]
      break;
 80056a6:	e000      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80056a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056aa:	7cfb      	ldrb	r3, [r7, #19]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10b      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056b0:	4b52      	ldr	r3, [pc, #328]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056be:	494f      	ldr	r1, [pc, #316]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80056c6:	e001      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c8:	7cfb      	ldrb	r3, [r7, #19]
 80056ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 80a0 	beq.w	800581a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056da:	2300      	movs	r3, #0
 80056dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056de:	4b47      	ldr	r3, [pc, #284]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e000      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80056ee:	2300      	movs	r3, #0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00d      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056f4:	4b41      	ldr	r3, [pc, #260]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f8:	4a40      	ldr	r2, [pc, #256]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056fe:	6593      	str	r3, [r2, #88]	; 0x58
 8005700:	4b3e      	ldr	r3, [pc, #248]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005708:	60bb      	str	r3, [r7, #8]
 800570a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800570c:	2301      	movs	r3, #1
 800570e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005710:	4b3b      	ldr	r3, [pc, #236]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a3a      	ldr	r2, [pc, #232]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800571a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800571c:	f7fc fea4 	bl	8002468 <HAL_GetTick>
 8005720:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005722:	e009      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005724:	f7fc fea0 	bl	8002468 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d902      	bls.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	74fb      	strb	r3, [r7, #19]
        break;
 8005736:	e005      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005738:	4b31      	ldr	r3, [pc, #196]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0ef      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005744:	7cfb      	ldrb	r3, [r7, #19]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d15c      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800574a:	4b2c      	ldr	r3, [pc, #176]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800574c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005754:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d01f      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	429a      	cmp	r2, r3
 8005766:	d019      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005768:	4b24      	ldr	r3, [pc, #144]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800576a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005772:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005774:	4b21      	ldr	r3, [pc, #132]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577a:	4a20      	ldr	r2, [pc, #128]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800577c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005784:	4b1d      	ldr	r3, [pc, #116]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578a:	4a1c      	ldr	r2, [pc, #112]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800578c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005794:	4a19      	ldr	r2, [pc, #100]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d016      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a6:	f7fc fe5f 	bl	8002468 <HAL_GetTick>
 80057aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ac:	e00b      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ae:	f7fc fe5b 	bl	8002468 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057bc:	4293      	cmp	r3, r2
 80057be:	d902      	bls.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	74fb      	strb	r3, [r7, #19]
            break;
 80057c4:	e006      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057c6:	4b0d      	ldr	r3, [pc, #52]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0ec      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80057d4:	7cfb      	ldrb	r3, [r7, #19]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10c      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057da:	4b08      	ldr	r3, [pc, #32]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ea:	4904      	ldr	r1, [pc, #16]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80057f2:	e009      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057f4:	7cfb      	ldrb	r3, [r7, #19]
 80057f6:	74bb      	strb	r3, [r7, #18]
 80057f8:	e006      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80057fa:	bf00      	nop
 80057fc:	40021000 	.word	0x40021000
 8005800:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005804:	7cfb      	ldrb	r3, [r7, #19]
 8005806:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005808:	7c7b      	ldrb	r3, [r7, #17]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d105      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800580e:	4b9e      	ldr	r3, [pc, #632]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005812:	4a9d      	ldr	r2, [pc, #628]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005818:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005826:	4b98      	ldr	r3, [pc, #608]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582c:	f023 0203 	bic.w	r2, r3, #3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	4994      	ldr	r1, [pc, #592]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005848:	4b8f      	ldr	r3, [pc, #572]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800584a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584e:	f023 020c 	bic.w	r2, r3, #12
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005856:	498c      	ldr	r1, [pc, #560]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005858:	4313      	orrs	r3, r2
 800585a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0304 	and.w	r3, r3, #4
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800586a:	4b87      	ldr	r3, [pc, #540]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800586c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005870:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	4983      	ldr	r1, [pc, #524]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800588c:	4b7e      	ldr	r3, [pc, #504]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005892:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589a:	497b      	ldr	r1, [pc, #492]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0310 	and.w	r3, r3, #16
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058ae:	4b76      	ldr	r3, [pc, #472]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058bc:	4972      	ldr	r1, [pc, #456]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058d0:	4b6d      	ldr	r3, [pc, #436]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058de:	496a      	ldr	r1, [pc, #424]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058f2:	4b65      	ldr	r3, [pc, #404]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005900:	4961      	ldr	r1, [pc, #388]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00a      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005914:	4b5c      	ldr	r3, [pc, #368]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005922:	4959      	ldr	r1, [pc, #356]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005936:	4b54      	ldr	r3, [pc, #336]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005944:	4950      	ldr	r1, [pc, #320]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005958:	4b4b      	ldr	r3, [pc, #300]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005966:	4948      	ldr	r1, [pc, #288]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005968:	4313      	orrs	r3, r2
 800596a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800597a:	4b43      	ldr	r3, [pc, #268]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005980:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005988:	493f      	ldr	r1, [pc, #252]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800598a:	4313      	orrs	r3, r2
 800598c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d028      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800599c:	4b3a      	ldr	r3, [pc, #232]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059aa:	4937      	ldr	r1, [pc, #220]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059ba:	d106      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059bc:	4b32      	ldr	r3, [pc, #200]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	4a31      	ldr	r2, [pc, #196]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059c6:	60d3      	str	r3, [r2, #12]
 80059c8:	e011      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059d2:	d10c      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3304      	adds	r3, #4
 80059d8:	2101      	movs	r1, #1
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 f8c8 	bl	8005b70 <RCCEx_PLLSAI1_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80059e4:	7cfb      	ldrb	r3, [r7, #19]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80059ea:	7cfb      	ldrb	r3, [r7, #19]
 80059ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d028      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059fa:	4b23      	ldr	r3, [pc, #140]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a08:	491f      	ldr	r1, [pc, #124]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a18:	d106      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a1a:	4b1b      	ldr	r3, [pc, #108]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	4a1a      	ldr	r2, [pc, #104]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a24:	60d3      	str	r3, [r2, #12]
 8005a26:	e011      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a30:	d10c      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	3304      	adds	r3, #4
 8005a36:	2101      	movs	r1, #1
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 f899 	bl	8005b70 <RCCEx_PLLSAI1_Config>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a42:	7cfb      	ldrb	r3, [r7, #19]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005a48:	7cfb      	ldrb	r3, [r7, #19]
 8005a4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d02b      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a66:	4908      	ldr	r1, [pc, #32]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a76:	d109      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a78:	4b03      	ldr	r3, [pc, #12]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	4a02      	ldr	r2, [pc, #8]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a82:	60d3      	str	r3, [r2, #12]
 8005a84:	e014      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005a86:	bf00      	nop
 8005a88:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a94:	d10c      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 f867 	bl	8005b70 <RCCEx_PLLSAI1_Config>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005aa6:	7cfb      	ldrb	r3, [r7, #19]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005aac:	7cfb      	ldrb	r3, [r7, #19]
 8005aae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d02f      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005abc:	4b2b      	ldr	r3, [pc, #172]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aca:	4928      	ldr	r1, [pc, #160]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ada:	d10d      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	2102      	movs	r1, #2
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 f844 	bl	8005b70 <RCCEx_PLLSAI1_Config>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005aec:	7cfb      	ldrb	r3, [r7, #19]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d014      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005af2:	7cfb      	ldrb	r3, [r7, #19]
 8005af4:	74bb      	strb	r3, [r7, #18]
 8005af6:	e011      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b00:	d10c      	bne.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3320      	adds	r3, #32
 8005b06:	2102      	movs	r1, #2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 f925 	bl	8005d58 <RCCEx_PLLSAI2_Config>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b12:	7cfb      	ldrb	r3, [r7, #19]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005b18:	7cfb      	ldrb	r3, [r7, #19]
 8005b1a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b28:	4b10      	ldr	r3, [pc, #64]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b36:	490d      	ldr	r1, [pc, #52]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00b      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b4a:	4b08      	ldr	r3, [pc, #32]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b5a:	4904      	ldr	r1, [pc, #16]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b62:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40021000 	.word	0x40021000

08005b70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b7e:	4b75      	ldr	r3, [pc, #468]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f003 0303 	and.w	r3, r3, #3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d018      	beq.n	8005bbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005b8a:	4b72      	ldr	r3, [pc, #456]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f003 0203 	and.w	r2, r3, #3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d10d      	bne.n	8005bb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
       ||
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d009      	beq.n	8005bb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005ba2:	4b6c      	ldr	r3, [pc, #432]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	091b      	lsrs	r3, r3, #4
 8005ba8:	f003 0307 	and.w	r3, r3, #7
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
       ||
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d047      	beq.n	8005c46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	73fb      	strb	r3, [r7, #15]
 8005bba:	e044      	b.n	8005c46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d018      	beq.n	8005bf6 <RCCEx_PLLSAI1_Config+0x86>
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d825      	bhi.n	8005c14 <RCCEx_PLLSAI1_Config+0xa4>
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d002      	beq.n	8005bd2 <RCCEx_PLLSAI1_Config+0x62>
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d009      	beq.n	8005be4 <RCCEx_PLLSAI1_Config+0x74>
 8005bd0:	e020      	b.n	8005c14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005bd2:	4b60      	ldr	r3, [pc, #384]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d11d      	bne.n	8005c1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005be2:	e01a      	b.n	8005c1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005be4:	4b5b      	ldr	r3, [pc, #364]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d116      	bne.n	8005c1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bf4:	e013      	b.n	8005c1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005bf6:	4b57      	ldr	r3, [pc, #348]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10f      	bne.n	8005c22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c02:	4b54      	ldr	r3, [pc, #336]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d109      	bne.n	8005c22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c12:	e006      	b.n	8005c22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	73fb      	strb	r3, [r7, #15]
      break;
 8005c18:	e004      	b.n	8005c24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c1a:	bf00      	nop
 8005c1c:	e002      	b.n	8005c24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c1e:	bf00      	nop
 8005c20:	e000      	b.n	8005c24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c22:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10d      	bne.n	8005c46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c2a:	4b4a      	ldr	r3, [pc, #296]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6819      	ldr	r1, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	430b      	orrs	r3, r1
 8005c40:	4944      	ldr	r1, [pc, #272]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d17d      	bne.n	8005d48 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c4c:	4b41      	ldr	r3, [pc, #260]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a40      	ldr	r2, [pc, #256]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c58:	f7fc fc06 	bl	8002468 <HAL_GetTick>
 8005c5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c5e:	e009      	b.n	8005c74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c60:	f7fc fc02 	bl	8002468 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d902      	bls.n	8005c74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	73fb      	strb	r3, [r7, #15]
        break;
 8005c72:	e005      	b.n	8005c80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c74:	4b37      	ldr	r3, [pc, #220]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1ef      	bne.n	8005c60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d160      	bne.n	8005d48 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d111      	bne.n	8005cb0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c8c:	4b31      	ldr	r3, [pc, #196]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6892      	ldr	r2, [r2, #8]
 8005c9c:	0211      	lsls	r1, r2, #8
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	68d2      	ldr	r2, [r2, #12]
 8005ca2:	0912      	lsrs	r2, r2, #4
 8005ca4:	0452      	lsls	r2, r2, #17
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	492a      	ldr	r1, [pc, #168]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	610b      	str	r3, [r1, #16]
 8005cae:	e027      	b.n	8005d00 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d112      	bne.n	8005cdc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cb6:	4b27      	ldr	r3, [pc, #156]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005cbe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6892      	ldr	r2, [r2, #8]
 8005cc6:	0211      	lsls	r1, r2, #8
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6912      	ldr	r2, [r2, #16]
 8005ccc:	0852      	lsrs	r2, r2, #1
 8005cce:	3a01      	subs	r2, #1
 8005cd0:	0552      	lsls	r2, r2, #21
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	491f      	ldr	r1, [pc, #124]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	610b      	str	r3, [r1, #16]
 8005cda:	e011      	b.n	8005d00 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cdc:	4b1d      	ldr	r3, [pc, #116]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ce4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	6892      	ldr	r2, [r2, #8]
 8005cec:	0211      	lsls	r1, r2, #8
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	6952      	ldr	r2, [r2, #20]
 8005cf2:	0852      	lsrs	r2, r2, #1
 8005cf4:	3a01      	subs	r2, #1
 8005cf6:	0652      	lsls	r2, r2, #25
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	4916      	ldr	r1, [pc, #88]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d00:	4b14      	ldr	r3, [pc, #80]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a13      	ldr	r2, [pc, #76]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d0c:	f7fc fbac 	bl	8002468 <HAL_GetTick>
 8005d10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d12:	e009      	b.n	8005d28 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d14:	f7fc fba8 	bl	8002468 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d902      	bls.n	8005d28 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	73fb      	strb	r3, [r7, #15]
          break;
 8005d26:	e005      	b.n	8005d34 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d28:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0ef      	beq.n	8005d14 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d106      	bne.n	8005d48 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005d3a:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	4904      	ldr	r1, [pc, #16]	; (8005d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	40021000 	.word	0x40021000

08005d58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d66:	4b6a      	ldr	r3, [pc, #424]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d018      	beq.n	8005da4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d72:	4b67      	ldr	r3, [pc, #412]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f003 0203 	and.w	r2, r3, #3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d10d      	bne.n	8005d9e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
       ||
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005d8a:	4b61      	ldr	r3, [pc, #388]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	091b      	lsrs	r3, r3, #4
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
       ||
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d047      	beq.n	8005e2e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	73fb      	strb	r3, [r7, #15]
 8005da2:	e044      	b.n	8005e2e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d018      	beq.n	8005dde <RCCEx_PLLSAI2_Config+0x86>
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d825      	bhi.n	8005dfc <RCCEx_PLLSAI2_Config+0xa4>
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d002      	beq.n	8005dba <RCCEx_PLLSAI2_Config+0x62>
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d009      	beq.n	8005dcc <RCCEx_PLLSAI2_Config+0x74>
 8005db8:	e020      	b.n	8005dfc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005dba:	4b55      	ldr	r3, [pc, #340]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d11d      	bne.n	8005e02 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dca:	e01a      	b.n	8005e02 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005dcc:	4b50      	ldr	r3, [pc, #320]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d116      	bne.n	8005e06 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ddc:	e013      	b.n	8005e06 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005dde:	4b4c      	ldr	r3, [pc, #304]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10f      	bne.n	8005e0a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005dea:	4b49      	ldr	r3, [pc, #292]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d109      	bne.n	8005e0a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dfa:	e006      	b.n	8005e0a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8005e00:	e004      	b.n	8005e0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e02:	bf00      	nop
 8005e04:	e002      	b.n	8005e0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e06:	bf00      	nop
 8005e08:	e000      	b.n	8005e0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10d      	bne.n	8005e2e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e12:	4b3f      	ldr	r3, [pc, #252]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6819      	ldr	r1, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	430b      	orrs	r3, r1
 8005e28:	4939      	ldr	r1, [pc, #228]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d167      	bne.n	8005f04 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005e34:	4b36      	ldr	r3, [pc, #216]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a35      	ldr	r2, [pc, #212]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e40:	f7fc fb12 	bl	8002468 <HAL_GetTick>
 8005e44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e46:	e009      	b.n	8005e5c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e48:	f7fc fb0e 	bl	8002468 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d902      	bls.n	8005e5c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	73fb      	strb	r3, [r7, #15]
        break;
 8005e5a:	e005      	b.n	8005e68 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e5c:	4b2c      	ldr	r3, [pc, #176]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1ef      	bne.n	8005e48 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d14a      	bne.n	8005f04 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d111      	bne.n	8005e98 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e74:	4b26      	ldr	r3, [pc, #152]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6892      	ldr	r2, [r2, #8]
 8005e84:	0211      	lsls	r1, r2, #8
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	68d2      	ldr	r2, [r2, #12]
 8005e8a:	0912      	lsrs	r2, r2, #4
 8005e8c:	0452      	lsls	r2, r2, #17
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	491f      	ldr	r1, [pc, #124]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	614b      	str	r3, [r1, #20]
 8005e96:	e011      	b.n	8005ebc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e98:	4b1d      	ldr	r3, [pc, #116]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ea0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	6892      	ldr	r2, [r2, #8]
 8005ea8:	0211      	lsls	r1, r2, #8
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6912      	ldr	r2, [r2, #16]
 8005eae:	0852      	lsrs	r2, r2, #1
 8005eb0:	3a01      	subs	r2, #1
 8005eb2:	0652      	lsls	r2, r2, #25
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	4916      	ldr	r1, [pc, #88]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ebc:	4b14      	ldr	r3, [pc, #80]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a13      	ldr	r2, [pc, #76]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec8:	f7fc face 	bl	8002468 <HAL_GetTick>
 8005ecc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ece:	e009      	b.n	8005ee4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ed0:	f7fc faca 	bl	8002468 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d902      	bls.n	8005ee4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	73fb      	strb	r3, [r7, #15]
          break;
 8005ee2:	e005      	b.n	8005ef0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ee4:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0ef      	beq.n	8005ed0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d106      	bne.n	8005f04 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005ef6:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ef8:	695a      	ldr	r2, [r3, #20]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	4904      	ldr	r1, [pc, #16]	; (8005f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	40021000 	.word	0x40021000

08005f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e049      	b.n	8005fba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d106      	bne.n	8005f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fb ffbc 	bl	8001eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3304      	adds	r3, #4
 8005f50:	4619      	mov	r1, r3
 8005f52:	4610      	mov	r0, r2
 8005f54:	f000 fbd8 	bl	8006708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d001      	beq.n	8005fdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e04f      	b.n	800607c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0201 	orr.w	r2, r2, #1
 8005ff2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a23      	ldr	r2, [pc, #140]	; (8006088 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d01d      	beq.n	800603a <HAL_TIM_Base_Start_IT+0x76>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006006:	d018      	beq.n	800603a <HAL_TIM_Base_Start_IT+0x76>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1f      	ldr	r2, [pc, #124]	; (800608c <HAL_TIM_Base_Start_IT+0xc8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d013      	beq.n	800603a <HAL_TIM_Base_Start_IT+0x76>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a1e      	ldr	r2, [pc, #120]	; (8006090 <HAL_TIM_Base_Start_IT+0xcc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00e      	beq.n	800603a <HAL_TIM_Base_Start_IT+0x76>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a1c      	ldr	r2, [pc, #112]	; (8006094 <HAL_TIM_Base_Start_IT+0xd0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d009      	beq.n	800603a <HAL_TIM_Base_Start_IT+0x76>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a1b      	ldr	r2, [pc, #108]	; (8006098 <HAL_TIM_Base_Start_IT+0xd4>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d004      	beq.n	800603a <HAL_TIM_Base_Start_IT+0x76>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a19      	ldr	r2, [pc, #100]	; (800609c <HAL_TIM_Base_Start_IT+0xd8>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d115      	bne.n	8006066 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	4b17      	ldr	r3, [pc, #92]	; (80060a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006042:	4013      	ands	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b06      	cmp	r3, #6
 800604a:	d015      	beq.n	8006078 <HAL_TIM_Base_Start_IT+0xb4>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006052:	d011      	beq.n	8006078 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0201 	orr.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006064:	e008      	b.n	8006078 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 0201 	orr.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	e000      	b.n	800607a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006078:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	40012c00 	.word	0x40012c00
 800608c:	40000400 	.word	0x40000400
 8006090:	40000800 	.word	0x40000800
 8006094:	40000c00 	.word	0x40000c00
 8006098:	40013400 	.word	0x40013400
 800609c:	40014000 	.word	0x40014000
 80060a0:	00010007 	.word	0x00010007

080060a4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0201 	bic.w	r2, r2, #1
 80060ba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6a1a      	ldr	r2, [r3, #32]
 80060c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80060c6:	4013      	ands	r3, r2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10f      	bne.n	80060ec <HAL_TIM_Base_Stop_IT+0x48>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6a1a      	ldr	r2, [r3, #32]
 80060d2:	f240 4344 	movw	r3, #1092	; 0x444
 80060d6:	4013      	ands	r3, r2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d107      	bne.n	80060ec <HAL_TIM_Base_Stop_IT+0x48>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0201 	bic.w	r2, r2, #1
 80060ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e049      	b.n	80061a8 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d106      	bne.n	800612e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f841 	bl	80061b0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2202      	movs	r2, #2
 8006132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3304      	adds	r3, #4
 800613e:	4619      	mov	r1, r3
 8006140:	4610      	mov	r0, r2
 8006142:	f000 fae1 	bl	8006708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d122      	bne.n	8006220 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d11b      	bne.n	8006220 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f06f 0202 	mvn.w	r2, #2
 80061f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fa5f 	bl	80066ca <HAL_TIM_IC_CaptureCallback>
 800620c:	e005      	b.n	800621a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fa51 	bl	80066b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fa62 	bl	80066de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f003 0304 	and.w	r3, r3, #4
 800622a:	2b04      	cmp	r3, #4
 800622c:	d122      	bne.n	8006274 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b04      	cmp	r3, #4
 800623a:	d11b      	bne.n	8006274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f06f 0204 	mvn.w	r2, #4
 8006244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2202      	movs	r2, #2
 800624a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fa35 	bl	80066ca <HAL_TIM_IC_CaptureCallback>
 8006260:	e005      	b.n	800626e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fa27 	bl	80066b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fa38 	bl	80066de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f003 0308 	and.w	r3, r3, #8
 800627e:	2b08      	cmp	r3, #8
 8006280:	d122      	bne.n	80062c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b08      	cmp	r3, #8
 800628e:	d11b      	bne.n	80062c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f06f 0208 	mvn.w	r2, #8
 8006298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2204      	movs	r2, #4
 800629e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fa0b 	bl	80066ca <HAL_TIM_IC_CaptureCallback>
 80062b4:	e005      	b.n	80062c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f9fd 	bl	80066b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fa0e 	bl	80066de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f003 0310 	and.w	r3, r3, #16
 80062d2:	2b10      	cmp	r3, #16
 80062d4:	d122      	bne.n	800631c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f003 0310 	and.w	r3, r3, #16
 80062e0:	2b10      	cmp	r3, #16
 80062e2:	d11b      	bne.n	800631c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f06f 0210 	mvn.w	r2, #16
 80062ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2208      	movs	r2, #8
 80062f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f9e1 	bl	80066ca <HAL_TIM_IC_CaptureCallback>
 8006308:	e005      	b.n	8006316 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f9d3 	bl	80066b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f9e4 	bl	80066de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b01      	cmp	r3, #1
 8006328:	d10e      	bne.n	8006348 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b01      	cmp	r3, #1
 8006336:	d107      	bne.n	8006348 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f06f 0201 	mvn.w	r2, #1
 8006340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fa fe6c 	bl	8001020 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006352:	2b80      	cmp	r3, #128	; 0x80
 8006354:	d10e      	bne.n	8006374 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006360:	2b80      	cmp	r3, #128	; 0x80
 8006362:	d107      	bne.n	8006374 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800636c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fcb4 	bl	8006cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006382:	d10e      	bne.n	80063a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638e:	2b80      	cmp	r3, #128	; 0x80
 8006390:	d107      	bne.n	80063a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800639a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fca7 	bl	8006cf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ac:	2b40      	cmp	r3, #64	; 0x40
 80063ae:	d10e      	bne.n	80063ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ba:	2b40      	cmp	r3, #64	; 0x40
 80063bc:	d107      	bne.n	80063ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f992 	bl	80066f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f003 0320 	and.w	r3, r3, #32
 80063d8:	2b20      	cmp	r3, #32
 80063da:	d10e      	bne.n	80063fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	d107      	bne.n	80063fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f06f 0220 	mvn.w	r2, #32
 80063f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fc67 	bl	8006cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_TIM_IC_ConfigChannel+0x1a>
 8006418:	2302      	movs	r3, #2
 800641a:	e082      	b.n	8006522 <HAL_TIM_IC_ConfigChannel+0x120>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d11b      	bne.n	8006462 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	6819      	ldr	r1, [r3, #0]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f000 f9ff 	bl	800683c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	699a      	ldr	r2, [r3, #24]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 020c 	bic.w	r2, r2, #12
 800644c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6999      	ldr	r1, [r3, #24]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	619a      	str	r2, [r3, #24]
 8006460:	e05a      	b.n	8006518 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b04      	cmp	r3, #4
 8006466:	d11c      	bne.n	80064a2 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6818      	ldr	r0, [r3, #0]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	6819      	ldr	r1, [r3, #0]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f000 fa7d 	bl	8006976 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699a      	ldr	r2, [r3, #24]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800648a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6999      	ldr	r1, [r3, #24]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	021a      	lsls	r2, r3, #8
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	619a      	str	r2, [r3, #24]
 80064a0:	e03a      	b.n	8006518 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d11b      	bne.n	80064e0 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	6819      	ldr	r1, [r3, #0]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f000 faca 	bl	8006a50 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	69da      	ldr	r2, [r3, #28]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 020c 	bic.w	r2, r2, #12
 80064ca:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	69d9      	ldr	r1, [r3, #28]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	61da      	str	r2, [r3, #28]
 80064de:	e01b      	b.n	8006518 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6818      	ldr	r0, [r3, #0]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	6819      	ldr	r1, [r3, #0]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f000 faea 	bl	8006ac8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	69da      	ldr	r2, [r3, #28]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006502:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	69d9      	ldr	r1, [r3, #28]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	021a      	lsls	r2, r3, #8
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b084      	sub	sp, #16
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_TIM_ConfigClockSource+0x18>
 800653e:	2302      	movs	r3, #2
 8006540:	e0b5      	b.n	80066ae <HAL_TIM_ConfigClockSource+0x184>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2202      	movs	r2, #2
 800654e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006560:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006564:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800656c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800657e:	d03e      	beq.n	80065fe <HAL_TIM_ConfigClockSource+0xd4>
 8006580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006584:	f200 8087 	bhi.w	8006696 <HAL_TIM_ConfigClockSource+0x16c>
 8006588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658c:	f000 8085 	beq.w	800669a <HAL_TIM_ConfigClockSource+0x170>
 8006590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006594:	d87f      	bhi.n	8006696 <HAL_TIM_ConfigClockSource+0x16c>
 8006596:	2b70      	cmp	r3, #112	; 0x70
 8006598:	d01a      	beq.n	80065d0 <HAL_TIM_ConfigClockSource+0xa6>
 800659a:	2b70      	cmp	r3, #112	; 0x70
 800659c:	d87b      	bhi.n	8006696 <HAL_TIM_ConfigClockSource+0x16c>
 800659e:	2b60      	cmp	r3, #96	; 0x60
 80065a0:	d050      	beq.n	8006644 <HAL_TIM_ConfigClockSource+0x11a>
 80065a2:	2b60      	cmp	r3, #96	; 0x60
 80065a4:	d877      	bhi.n	8006696 <HAL_TIM_ConfigClockSource+0x16c>
 80065a6:	2b50      	cmp	r3, #80	; 0x50
 80065a8:	d03c      	beq.n	8006624 <HAL_TIM_ConfigClockSource+0xfa>
 80065aa:	2b50      	cmp	r3, #80	; 0x50
 80065ac:	d873      	bhi.n	8006696 <HAL_TIM_ConfigClockSource+0x16c>
 80065ae:	2b40      	cmp	r3, #64	; 0x40
 80065b0:	d058      	beq.n	8006664 <HAL_TIM_ConfigClockSource+0x13a>
 80065b2:	2b40      	cmp	r3, #64	; 0x40
 80065b4:	d86f      	bhi.n	8006696 <HAL_TIM_ConfigClockSource+0x16c>
 80065b6:	2b30      	cmp	r3, #48	; 0x30
 80065b8:	d064      	beq.n	8006684 <HAL_TIM_ConfigClockSource+0x15a>
 80065ba:	2b30      	cmp	r3, #48	; 0x30
 80065bc:	d86b      	bhi.n	8006696 <HAL_TIM_ConfigClockSource+0x16c>
 80065be:	2b20      	cmp	r3, #32
 80065c0:	d060      	beq.n	8006684 <HAL_TIM_ConfigClockSource+0x15a>
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d867      	bhi.n	8006696 <HAL_TIM_ConfigClockSource+0x16c>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d05c      	beq.n	8006684 <HAL_TIM_ConfigClockSource+0x15a>
 80065ca:	2b10      	cmp	r3, #16
 80065cc:	d05a      	beq.n	8006684 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80065ce:	e062      	b.n	8006696 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6818      	ldr	r0, [r3, #0]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	6899      	ldr	r1, [r3, #8]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f000 faca 	bl	8006b78 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	609a      	str	r2, [r3, #8]
      break;
 80065fc:	e04e      	b.n	800669c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6818      	ldr	r0, [r3, #0]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	6899      	ldr	r1, [r3, #8]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f000 fab3 	bl	8006b78 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006620:	609a      	str	r2, [r3, #8]
      break;
 8006622:	e03b      	b.n	800669c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6818      	ldr	r0, [r3, #0]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	6859      	ldr	r1, [r3, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	461a      	mov	r2, r3
 8006632:	f000 f971 	bl	8006918 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2150      	movs	r1, #80	; 0x50
 800663c:	4618      	mov	r0, r3
 800663e:	f000 fa80 	bl	8006b42 <TIM_ITRx_SetConfig>
      break;
 8006642:	e02b      	b.n	800669c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6818      	ldr	r0, [r3, #0]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	6859      	ldr	r1, [r3, #4]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	461a      	mov	r2, r3
 8006652:	f000 f9cd 	bl	80069f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2160      	movs	r1, #96	; 0x60
 800665c:	4618      	mov	r0, r3
 800665e:	f000 fa70 	bl	8006b42 <TIM_ITRx_SetConfig>
      break;
 8006662:	e01b      	b.n	800669c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6818      	ldr	r0, [r3, #0]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	6859      	ldr	r1, [r3, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	461a      	mov	r2, r3
 8006672:	f000 f951 	bl	8006918 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2140      	movs	r1, #64	; 0x40
 800667c:	4618      	mov	r0, r3
 800667e:	f000 fa60 	bl	8006b42 <TIM_ITRx_SetConfig>
      break;
 8006682:	e00b      	b.n	800669c <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4619      	mov	r1, r3
 800668e:	4610      	mov	r0, r2
 8006690:	f000 fa57 	bl	8006b42 <TIM_ITRx_SetConfig>
        break;
 8006694:	e002      	b.n	800669c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006696:	bf00      	nop
 8006698:	e000      	b.n	800669c <HAL_TIM_ConfigClockSource+0x172>
      break;
 800669a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066de:	b480      	push	{r7}
 80066e0:	b083      	sub	sp, #12
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066fa:	bf00      	nop
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
	...

08006708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a40      	ldr	r2, [pc, #256]	; (800681c <TIM_Base_SetConfig+0x114>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d013      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006726:	d00f      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a3d      	ldr	r2, [pc, #244]	; (8006820 <TIM_Base_SetConfig+0x118>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d00b      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a3c      	ldr	r2, [pc, #240]	; (8006824 <TIM_Base_SetConfig+0x11c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d007      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a3b      	ldr	r2, [pc, #236]	; (8006828 <TIM_Base_SetConfig+0x120>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d003      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a3a      	ldr	r2, [pc, #232]	; (800682c <TIM_Base_SetConfig+0x124>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d108      	bne.n	800675a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a2f      	ldr	r2, [pc, #188]	; (800681c <TIM_Base_SetConfig+0x114>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01f      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006768:	d01b      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a2c      	ldr	r2, [pc, #176]	; (8006820 <TIM_Base_SetConfig+0x118>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d017      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a2b      	ldr	r2, [pc, #172]	; (8006824 <TIM_Base_SetConfig+0x11c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d013      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a2a      	ldr	r2, [pc, #168]	; (8006828 <TIM_Base_SetConfig+0x120>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00f      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a29      	ldr	r2, [pc, #164]	; (800682c <TIM_Base_SetConfig+0x124>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00b      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a28      	ldr	r2, [pc, #160]	; (8006830 <TIM_Base_SetConfig+0x128>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d007      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a27      	ldr	r2, [pc, #156]	; (8006834 <TIM_Base_SetConfig+0x12c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d003      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a26      	ldr	r2, [pc, #152]	; (8006838 <TIM_Base_SetConfig+0x130>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d108      	bne.n	80067b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a10      	ldr	r2, [pc, #64]	; (800681c <TIM_Base_SetConfig+0x114>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00f      	beq.n	8006800 <TIM_Base_SetConfig+0xf8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a12      	ldr	r2, [pc, #72]	; (800682c <TIM_Base_SetConfig+0x124>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00b      	beq.n	8006800 <TIM_Base_SetConfig+0xf8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a11      	ldr	r2, [pc, #68]	; (8006830 <TIM_Base_SetConfig+0x128>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d007      	beq.n	8006800 <TIM_Base_SetConfig+0xf8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a10      	ldr	r2, [pc, #64]	; (8006834 <TIM_Base_SetConfig+0x12c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_Base_SetConfig+0xf8>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a0f      	ldr	r2, [pc, #60]	; (8006838 <TIM_Base_SetConfig+0x130>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d103      	bne.n	8006808 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	615a      	str	r2, [r3, #20]
}
 800680e:	bf00      	nop
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40012c00 	.word	0x40012c00
 8006820:	40000400 	.word	0x40000400
 8006824:	40000800 	.word	0x40000800
 8006828:	40000c00 	.word	0x40000c00
 800682c:	40013400 	.word	0x40013400
 8006830:	40014000 	.word	0x40014000
 8006834:	40014400 	.word	0x40014400
 8006838:	40014800 	.word	0x40014800

0800683c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
 8006848:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	f023 0201 	bic.w	r2, r3, #1
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4a26      	ldr	r2, [pc, #152]	; (8006900 <TIM_TI1_SetConfig+0xc4>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d017      	beq.n	800689a <TIM_TI1_SetConfig+0x5e>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006870:	d013      	beq.n	800689a <TIM_TI1_SetConfig+0x5e>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4a23      	ldr	r2, [pc, #140]	; (8006904 <TIM_TI1_SetConfig+0xc8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d00f      	beq.n	800689a <TIM_TI1_SetConfig+0x5e>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4a22      	ldr	r2, [pc, #136]	; (8006908 <TIM_TI1_SetConfig+0xcc>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d00b      	beq.n	800689a <TIM_TI1_SetConfig+0x5e>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4a21      	ldr	r2, [pc, #132]	; (800690c <TIM_TI1_SetConfig+0xd0>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d007      	beq.n	800689a <TIM_TI1_SetConfig+0x5e>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4a20      	ldr	r2, [pc, #128]	; (8006910 <TIM_TI1_SetConfig+0xd4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d003      	beq.n	800689a <TIM_TI1_SetConfig+0x5e>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4a1f      	ldr	r2, [pc, #124]	; (8006914 <TIM_TI1_SetConfig+0xd8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d101      	bne.n	800689e <TIM_TI1_SetConfig+0x62>
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <TIM_TI1_SetConfig+0x64>
 800689e:	2300      	movs	r3, #0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d008      	beq.n	80068b6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f023 0303 	bic.w	r3, r3, #3
 80068aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	e003      	b.n	80068be <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f043 0301 	orr.w	r3, r3, #1
 80068bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	011b      	lsls	r3, r3, #4
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f023 030a 	bic.w	r3, r3, #10
 80068d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f003 030a 	and.w	r3, r3, #10
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	621a      	str	r2, [r3, #32]
}
 80068f2:	bf00      	nop
 80068f4:	371c      	adds	r7, #28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40012c00 	.word	0x40012c00
 8006904:	40000400 	.word	0x40000400
 8006908:	40000800 	.word	0x40000800
 800690c:	40000c00 	.word	0x40000c00
 8006910:	40013400 	.word	0x40013400
 8006914:	40014000 	.word	0x40014000

08006918 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006918:	b480      	push	{r7}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	f023 0201 	bic.w	r2, r3, #1
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	011b      	lsls	r3, r3, #4
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4313      	orrs	r3, r2
 800694c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f023 030a 	bic.w	r3, r3, #10
 8006954:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	621a      	str	r2, [r3, #32]
}
 800696a:	bf00      	nop
 800696c:	371c      	adds	r7, #28
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006976:	b480      	push	{r7}
 8006978:	b087      	sub	sp, #28
 800697a:	af00      	add	r7, sp, #0
 800697c:	60f8      	str	r0, [r7, #12]
 800697e:	60b9      	str	r1, [r7, #8]
 8006980:	607a      	str	r2, [r7, #4]
 8006982:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	f023 0210 	bic.w	r2, r3, #16
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	021b      	lsls	r3, r3, #8
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	031b      	lsls	r3, r3, #12
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	4313      	orrs	r3, r2
 80069c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	621a      	str	r2, [r3, #32]
}
 80069e4:	bf00      	nop
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	f023 0210 	bic.w	r2, r3, #16
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	031b      	lsls	r3, r3, #12
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	011b      	lsls	r3, r3, #4
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	621a      	str	r2, [r3, #32]
}
 8006a44:	bf00      	nop
 8006a46:	371c      	adds	r7, #28
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f023 0303 	bic.w	r3, r3, #3
 8006a7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	011b      	lsls	r3, r3, #4
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006aa0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	021b      	lsls	r3, r3, #8
 8006aa6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	621a      	str	r2, [r3, #32]
}
 8006abc:	bf00      	nop
 8006abe:	371c      	adds	r7, #28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006af4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	021b      	lsls	r3, r3, #8
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b06:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	031b      	lsls	r3, r3, #12
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006b1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	031b      	lsls	r3, r3, #12
 8006b20:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	621a      	str	r2, [r3, #32]
}
 8006b36:	bf00      	nop
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b085      	sub	sp, #20
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	f043 0307 	orr.w	r3, r3, #7
 8006b64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	609a      	str	r2, [r3, #8]
}
 8006b6c:	bf00      	nop
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	021a      	lsls	r2, r3, #8
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	609a      	str	r2, [r3, #8]
}
 8006bac:	bf00      	nop
 8006bae:	371c      	adds	r7, #28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e068      	b.n	8006ca2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a2e      	ldr	r2, [pc, #184]	; (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d004      	beq.n	8006c04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a2d      	ldr	r2, [pc, #180]	; (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d108      	bne.n	8006c16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a1e      	ldr	r2, [pc, #120]	; (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d01d      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c42:	d018      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a1b      	ldr	r2, [pc, #108]	; (8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d013      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a1a      	ldr	r2, [pc, #104]	; (8006cbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d00e      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a18      	ldr	r2, [pc, #96]	; (8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d009      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a13      	ldr	r2, [pc, #76]	; (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d004      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a14      	ldr	r2, [pc, #80]	; (8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d10c      	bne.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	40012c00 	.word	0x40012c00
 8006cb4:	40013400 	.word	0x40013400
 8006cb8:	40000400 	.word	0x40000400
 8006cbc:	40000800 	.word	0x40000800
 8006cc0:	40000c00 	.word	0x40000c00
 8006cc4:	40014000 	.word	0x40014000

08006cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e040      	b.n	8006d98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d106      	bne.n	8006d2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7fb f97a 	bl	8002020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2224      	movs	r2, #36	; 0x24
 8006d30:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 0201 	bic.w	r2, r2, #1
 8006d40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f8c0 	bl	8006ec8 <UART_SetConfig>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d101      	bne.n	8006d52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e022      	b.n	8006d98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d002      	beq.n	8006d60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fb3e 	bl	80073dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689a      	ldr	r2, [r3, #8]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f042 0201 	orr.w	r2, r2, #1
 8006d8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fbc5 	bl	8007520 <UART_CheckIdleState>
 8006d96:	4603      	mov	r3, r0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08a      	sub	sp, #40	; 0x28
 8006da4:	af02      	add	r7, sp, #8
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	603b      	str	r3, [r7, #0]
 8006dac:	4613      	mov	r3, r2
 8006dae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006db4:	2b20      	cmp	r3, #32
 8006db6:	f040 8082 	bne.w	8006ebe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <HAL_UART_Transmit+0x26>
 8006dc0:	88fb      	ldrh	r3, [r7, #6]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e07a      	b.n	8006ec0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d101      	bne.n	8006dd8 <HAL_UART_Transmit+0x38>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	e073      	b.n	8006ec0 <HAL_UART_Transmit+0x120>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2221      	movs	r2, #33	; 0x21
 8006dec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dee:	f7fb fb3b 	bl	8002468 <HAL_GetTick>
 8006df2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	88fa      	ldrh	r2, [r7, #6]
 8006df8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	88fa      	ldrh	r2, [r7, #6]
 8006e00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e0c:	d108      	bne.n	8006e20 <HAL_UART_Transmit+0x80>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d104      	bne.n	8006e20 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	61bb      	str	r3, [r7, #24]
 8006e1e:	e003      	b.n	8006e28 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006e30:	e02d      	b.n	8006e8e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2180      	movs	r1, #128	; 0x80
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 fbb8 	bl	80075b2 <UART_WaitOnFlagUntilTimeout>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e039      	b.n	8006ec0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10b      	bne.n	8006e6a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	881a      	ldrh	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e5e:	b292      	uxth	r2, r2
 8006e60:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	3302      	adds	r3, #2
 8006e66:	61bb      	str	r3, [r7, #24]
 8006e68:	e008      	b.n	8006e7c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	781a      	ldrb	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	b292      	uxth	r2, r2
 8006e74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	3b01      	subs	r3, #1
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1cb      	bne.n	8006e32 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2140      	movs	r1, #64	; 0x40
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 fb84 	bl	80075b2 <UART_WaitOnFlagUntilTimeout>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d001      	beq.n	8006eb4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e005      	b.n	8006ec0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	e000      	b.n	8006ec0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006ebe:	2302      	movs	r3, #2
  }
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3720      	adds	r7, #32
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ec8:	b5b0      	push	{r4, r5, r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	431a      	orrs	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	4bad      	ldr	r3, [pc, #692]	; (80071a8 <UART_SetConfig+0x2e0>)
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	6812      	ldr	r2, [r2, #0]
 8006efa:	69f9      	ldr	r1, [r7, #28]
 8006efc:	430b      	orrs	r3, r1
 8006efe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4aa2      	ldr	r2, [pc, #648]	; (80071ac <UART_SetConfig+0x2e4>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d004      	beq.n	8006f30 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	69fa      	ldr	r2, [r7, #28]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a99      	ldr	r2, [pc, #612]	; (80071b0 <UART_SetConfig+0x2e8>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d121      	bne.n	8006f92 <UART_SetConfig+0xca>
 8006f4e:	4b99      	ldr	r3, [pc, #612]	; (80071b4 <UART_SetConfig+0x2ec>)
 8006f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f54:	f003 0303 	and.w	r3, r3, #3
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	d817      	bhi.n	8006f8c <UART_SetConfig+0xc4>
 8006f5c:	a201      	add	r2, pc, #4	; (adr r2, 8006f64 <UART_SetConfig+0x9c>)
 8006f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f62:	bf00      	nop
 8006f64:	08006f75 	.word	0x08006f75
 8006f68:	08006f81 	.word	0x08006f81
 8006f6c:	08006f7b 	.word	0x08006f7b
 8006f70:	08006f87 	.word	0x08006f87
 8006f74:	2301      	movs	r3, #1
 8006f76:	76fb      	strb	r3, [r7, #27]
 8006f78:	e0e7      	b.n	800714a <UART_SetConfig+0x282>
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	76fb      	strb	r3, [r7, #27]
 8006f7e:	e0e4      	b.n	800714a <UART_SetConfig+0x282>
 8006f80:	2304      	movs	r3, #4
 8006f82:	76fb      	strb	r3, [r7, #27]
 8006f84:	e0e1      	b.n	800714a <UART_SetConfig+0x282>
 8006f86:	2308      	movs	r3, #8
 8006f88:	76fb      	strb	r3, [r7, #27]
 8006f8a:	e0de      	b.n	800714a <UART_SetConfig+0x282>
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	76fb      	strb	r3, [r7, #27]
 8006f90:	e0db      	b.n	800714a <UART_SetConfig+0x282>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a88      	ldr	r2, [pc, #544]	; (80071b8 <UART_SetConfig+0x2f0>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d132      	bne.n	8007002 <UART_SetConfig+0x13a>
 8006f9c:	4b85      	ldr	r3, [pc, #532]	; (80071b4 <UART_SetConfig+0x2ec>)
 8006f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa2:	f003 030c 	and.w	r3, r3, #12
 8006fa6:	2b0c      	cmp	r3, #12
 8006fa8:	d828      	bhi.n	8006ffc <UART_SetConfig+0x134>
 8006faa:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <UART_SetConfig+0xe8>)
 8006fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb0:	08006fe5 	.word	0x08006fe5
 8006fb4:	08006ffd 	.word	0x08006ffd
 8006fb8:	08006ffd 	.word	0x08006ffd
 8006fbc:	08006ffd 	.word	0x08006ffd
 8006fc0:	08006ff1 	.word	0x08006ff1
 8006fc4:	08006ffd 	.word	0x08006ffd
 8006fc8:	08006ffd 	.word	0x08006ffd
 8006fcc:	08006ffd 	.word	0x08006ffd
 8006fd0:	08006feb 	.word	0x08006feb
 8006fd4:	08006ffd 	.word	0x08006ffd
 8006fd8:	08006ffd 	.word	0x08006ffd
 8006fdc:	08006ffd 	.word	0x08006ffd
 8006fe0:	08006ff7 	.word	0x08006ff7
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	76fb      	strb	r3, [r7, #27]
 8006fe8:	e0af      	b.n	800714a <UART_SetConfig+0x282>
 8006fea:	2302      	movs	r3, #2
 8006fec:	76fb      	strb	r3, [r7, #27]
 8006fee:	e0ac      	b.n	800714a <UART_SetConfig+0x282>
 8006ff0:	2304      	movs	r3, #4
 8006ff2:	76fb      	strb	r3, [r7, #27]
 8006ff4:	e0a9      	b.n	800714a <UART_SetConfig+0x282>
 8006ff6:	2308      	movs	r3, #8
 8006ff8:	76fb      	strb	r3, [r7, #27]
 8006ffa:	e0a6      	b.n	800714a <UART_SetConfig+0x282>
 8006ffc:	2310      	movs	r3, #16
 8006ffe:	76fb      	strb	r3, [r7, #27]
 8007000:	e0a3      	b.n	800714a <UART_SetConfig+0x282>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a6d      	ldr	r2, [pc, #436]	; (80071bc <UART_SetConfig+0x2f4>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d120      	bne.n	800704e <UART_SetConfig+0x186>
 800700c:	4b69      	ldr	r3, [pc, #420]	; (80071b4 <UART_SetConfig+0x2ec>)
 800700e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007012:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007016:	2b30      	cmp	r3, #48	; 0x30
 8007018:	d013      	beq.n	8007042 <UART_SetConfig+0x17a>
 800701a:	2b30      	cmp	r3, #48	; 0x30
 800701c:	d814      	bhi.n	8007048 <UART_SetConfig+0x180>
 800701e:	2b20      	cmp	r3, #32
 8007020:	d009      	beq.n	8007036 <UART_SetConfig+0x16e>
 8007022:	2b20      	cmp	r3, #32
 8007024:	d810      	bhi.n	8007048 <UART_SetConfig+0x180>
 8007026:	2b00      	cmp	r3, #0
 8007028:	d002      	beq.n	8007030 <UART_SetConfig+0x168>
 800702a:	2b10      	cmp	r3, #16
 800702c:	d006      	beq.n	800703c <UART_SetConfig+0x174>
 800702e:	e00b      	b.n	8007048 <UART_SetConfig+0x180>
 8007030:	2300      	movs	r3, #0
 8007032:	76fb      	strb	r3, [r7, #27]
 8007034:	e089      	b.n	800714a <UART_SetConfig+0x282>
 8007036:	2302      	movs	r3, #2
 8007038:	76fb      	strb	r3, [r7, #27]
 800703a:	e086      	b.n	800714a <UART_SetConfig+0x282>
 800703c:	2304      	movs	r3, #4
 800703e:	76fb      	strb	r3, [r7, #27]
 8007040:	e083      	b.n	800714a <UART_SetConfig+0x282>
 8007042:	2308      	movs	r3, #8
 8007044:	76fb      	strb	r3, [r7, #27]
 8007046:	e080      	b.n	800714a <UART_SetConfig+0x282>
 8007048:	2310      	movs	r3, #16
 800704a:	76fb      	strb	r3, [r7, #27]
 800704c:	e07d      	b.n	800714a <UART_SetConfig+0x282>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a5b      	ldr	r2, [pc, #364]	; (80071c0 <UART_SetConfig+0x2f8>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d120      	bne.n	800709a <UART_SetConfig+0x1d2>
 8007058:	4b56      	ldr	r3, [pc, #344]	; (80071b4 <UART_SetConfig+0x2ec>)
 800705a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800705e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007062:	2bc0      	cmp	r3, #192	; 0xc0
 8007064:	d013      	beq.n	800708e <UART_SetConfig+0x1c6>
 8007066:	2bc0      	cmp	r3, #192	; 0xc0
 8007068:	d814      	bhi.n	8007094 <UART_SetConfig+0x1cc>
 800706a:	2b80      	cmp	r3, #128	; 0x80
 800706c:	d009      	beq.n	8007082 <UART_SetConfig+0x1ba>
 800706e:	2b80      	cmp	r3, #128	; 0x80
 8007070:	d810      	bhi.n	8007094 <UART_SetConfig+0x1cc>
 8007072:	2b00      	cmp	r3, #0
 8007074:	d002      	beq.n	800707c <UART_SetConfig+0x1b4>
 8007076:	2b40      	cmp	r3, #64	; 0x40
 8007078:	d006      	beq.n	8007088 <UART_SetConfig+0x1c0>
 800707a:	e00b      	b.n	8007094 <UART_SetConfig+0x1cc>
 800707c:	2300      	movs	r3, #0
 800707e:	76fb      	strb	r3, [r7, #27]
 8007080:	e063      	b.n	800714a <UART_SetConfig+0x282>
 8007082:	2302      	movs	r3, #2
 8007084:	76fb      	strb	r3, [r7, #27]
 8007086:	e060      	b.n	800714a <UART_SetConfig+0x282>
 8007088:	2304      	movs	r3, #4
 800708a:	76fb      	strb	r3, [r7, #27]
 800708c:	e05d      	b.n	800714a <UART_SetConfig+0x282>
 800708e:	2308      	movs	r3, #8
 8007090:	76fb      	strb	r3, [r7, #27]
 8007092:	e05a      	b.n	800714a <UART_SetConfig+0x282>
 8007094:	2310      	movs	r3, #16
 8007096:	76fb      	strb	r3, [r7, #27]
 8007098:	e057      	b.n	800714a <UART_SetConfig+0x282>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a49      	ldr	r2, [pc, #292]	; (80071c4 <UART_SetConfig+0x2fc>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d125      	bne.n	80070f0 <UART_SetConfig+0x228>
 80070a4:	4b43      	ldr	r3, [pc, #268]	; (80071b4 <UART_SetConfig+0x2ec>)
 80070a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070b2:	d017      	beq.n	80070e4 <UART_SetConfig+0x21c>
 80070b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070b8:	d817      	bhi.n	80070ea <UART_SetConfig+0x222>
 80070ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070be:	d00b      	beq.n	80070d8 <UART_SetConfig+0x210>
 80070c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070c4:	d811      	bhi.n	80070ea <UART_SetConfig+0x222>
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <UART_SetConfig+0x20a>
 80070ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ce:	d006      	beq.n	80070de <UART_SetConfig+0x216>
 80070d0:	e00b      	b.n	80070ea <UART_SetConfig+0x222>
 80070d2:	2300      	movs	r3, #0
 80070d4:	76fb      	strb	r3, [r7, #27]
 80070d6:	e038      	b.n	800714a <UART_SetConfig+0x282>
 80070d8:	2302      	movs	r3, #2
 80070da:	76fb      	strb	r3, [r7, #27]
 80070dc:	e035      	b.n	800714a <UART_SetConfig+0x282>
 80070de:	2304      	movs	r3, #4
 80070e0:	76fb      	strb	r3, [r7, #27]
 80070e2:	e032      	b.n	800714a <UART_SetConfig+0x282>
 80070e4:	2308      	movs	r3, #8
 80070e6:	76fb      	strb	r3, [r7, #27]
 80070e8:	e02f      	b.n	800714a <UART_SetConfig+0x282>
 80070ea:	2310      	movs	r3, #16
 80070ec:	76fb      	strb	r3, [r7, #27]
 80070ee:	e02c      	b.n	800714a <UART_SetConfig+0x282>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a2d      	ldr	r2, [pc, #180]	; (80071ac <UART_SetConfig+0x2e4>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d125      	bne.n	8007146 <UART_SetConfig+0x27e>
 80070fa:	4b2e      	ldr	r3, [pc, #184]	; (80071b4 <UART_SetConfig+0x2ec>)
 80070fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007100:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007104:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007108:	d017      	beq.n	800713a <UART_SetConfig+0x272>
 800710a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800710e:	d817      	bhi.n	8007140 <UART_SetConfig+0x278>
 8007110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007114:	d00b      	beq.n	800712e <UART_SetConfig+0x266>
 8007116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800711a:	d811      	bhi.n	8007140 <UART_SetConfig+0x278>
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <UART_SetConfig+0x260>
 8007120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007124:	d006      	beq.n	8007134 <UART_SetConfig+0x26c>
 8007126:	e00b      	b.n	8007140 <UART_SetConfig+0x278>
 8007128:	2300      	movs	r3, #0
 800712a:	76fb      	strb	r3, [r7, #27]
 800712c:	e00d      	b.n	800714a <UART_SetConfig+0x282>
 800712e:	2302      	movs	r3, #2
 8007130:	76fb      	strb	r3, [r7, #27]
 8007132:	e00a      	b.n	800714a <UART_SetConfig+0x282>
 8007134:	2304      	movs	r3, #4
 8007136:	76fb      	strb	r3, [r7, #27]
 8007138:	e007      	b.n	800714a <UART_SetConfig+0x282>
 800713a:	2308      	movs	r3, #8
 800713c:	76fb      	strb	r3, [r7, #27]
 800713e:	e004      	b.n	800714a <UART_SetConfig+0x282>
 8007140:	2310      	movs	r3, #16
 8007142:	76fb      	strb	r3, [r7, #27]
 8007144:	e001      	b.n	800714a <UART_SetConfig+0x282>
 8007146:	2310      	movs	r3, #16
 8007148:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a17      	ldr	r2, [pc, #92]	; (80071ac <UART_SetConfig+0x2e4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	f040 8087 	bne.w	8007264 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007156:	7efb      	ldrb	r3, [r7, #27]
 8007158:	2b08      	cmp	r3, #8
 800715a:	d837      	bhi.n	80071cc <UART_SetConfig+0x304>
 800715c:	a201      	add	r2, pc, #4	; (adr r2, 8007164 <UART_SetConfig+0x29c>)
 800715e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007162:	bf00      	nop
 8007164:	08007189 	.word	0x08007189
 8007168:	080071cd 	.word	0x080071cd
 800716c:	08007191 	.word	0x08007191
 8007170:	080071cd 	.word	0x080071cd
 8007174:	08007197 	.word	0x08007197
 8007178:	080071cd 	.word	0x080071cd
 800717c:	080071cd 	.word	0x080071cd
 8007180:	080071cd 	.word	0x080071cd
 8007184:	0800719f 	.word	0x0800719f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007188:	f7fe f97c 	bl	8005484 <HAL_RCC_GetPCLK1Freq>
 800718c:	6178      	str	r0, [r7, #20]
        break;
 800718e:	e022      	b.n	80071d6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007190:	4b0d      	ldr	r3, [pc, #52]	; (80071c8 <UART_SetConfig+0x300>)
 8007192:	617b      	str	r3, [r7, #20]
        break;
 8007194:	e01f      	b.n	80071d6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007196:	f7fe f8dd 	bl	8005354 <HAL_RCC_GetSysClockFreq>
 800719a:	6178      	str	r0, [r7, #20]
        break;
 800719c:	e01b      	b.n	80071d6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800719e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071a2:	617b      	str	r3, [r7, #20]
        break;
 80071a4:	e017      	b.n	80071d6 <UART_SetConfig+0x30e>
 80071a6:	bf00      	nop
 80071a8:	efff69f3 	.word	0xefff69f3
 80071ac:	40008000 	.word	0x40008000
 80071b0:	40013800 	.word	0x40013800
 80071b4:	40021000 	.word	0x40021000
 80071b8:	40004400 	.word	0x40004400
 80071bc:	40004800 	.word	0x40004800
 80071c0:	40004c00 	.word	0x40004c00
 80071c4:	40005000 	.word	0x40005000
 80071c8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	76bb      	strb	r3, [r7, #26]
        break;
 80071d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 80f1 	beq.w	80073c0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	4613      	mov	r3, r2
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	4413      	add	r3, r2
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d305      	bcc.n	80071fa <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d902      	bls.n	8007200 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	76bb      	strb	r3, [r7, #26]
 80071fe:	e0df      	b.n	80073c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	4618      	mov	r0, r3
 8007204:	f04f 0100 	mov.w	r1, #0
 8007208:	f04f 0200 	mov.w	r2, #0
 800720c:	f04f 0300 	mov.w	r3, #0
 8007210:	020b      	lsls	r3, r1, #8
 8007212:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007216:	0202      	lsls	r2, r0, #8
 8007218:	6879      	ldr	r1, [r7, #4]
 800721a:	6849      	ldr	r1, [r1, #4]
 800721c:	0849      	lsrs	r1, r1, #1
 800721e:	4608      	mov	r0, r1
 8007220:	f04f 0100 	mov.w	r1, #0
 8007224:	1814      	adds	r4, r2, r0
 8007226:	eb43 0501 	adc.w	r5, r3, r1
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	461a      	mov	r2, r3
 8007230:	f04f 0300 	mov.w	r3, #0
 8007234:	4620      	mov	r0, r4
 8007236:	4629      	mov	r1, r5
 8007238:	f7f9 fcd6 	bl	8000be8 <__aeabi_uldivmod>
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	4613      	mov	r3, r2
 8007242:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800724a:	d308      	bcc.n	800725e <UART_SetConfig+0x396>
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007252:	d204      	bcs.n	800725e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	60da      	str	r2, [r3, #12]
 800725c:	e0b0      	b.n	80073c0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	76bb      	strb	r3, [r7, #26]
 8007262:	e0ad      	b.n	80073c0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800726c:	d15c      	bne.n	8007328 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800726e:	7efb      	ldrb	r3, [r7, #27]
 8007270:	2b08      	cmp	r3, #8
 8007272:	d828      	bhi.n	80072c6 <UART_SetConfig+0x3fe>
 8007274:	a201      	add	r2, pc, #4	; (adr r2, 800727c <UART_SetConfig+0x3b4>)
 8007276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727a:	bf00      	nop
 800727c:	080072a1 	.word	0x080072a1
 8007280:	080072a9 	.word	0x080072a9
 8007284:	080072b1 	.word	0x080072b1
 8007288:	080072c7 	.word	0x080072c7
 800728c:	080072b7 	.word	0x080072b7
 8007290:	080072c7 	.word	0x080072c7
 8007294:	080072c7 	.word	0x080072c7
 8007298:	080072c7 	.word	0x080072c7
 800729c:	080072bf 	.word	0x080072bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072a0:	f7fe f8f0 	bl	8005484 <HAL_RCC_GetPCLK1Freq>
 80072a4:	6178      	str	r0, [r7, #20]
        break;
 80072a6:	e013      	b.n	80072d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072a8:	f7fe f902 	bl	80054b0 <HAL_RCC_GetPCLK2Freq>
 80072ac:	6178      	str	r0, [r7, #20]
        break;
 80072ae:	e00f      	b.n	80072d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072b0:	4b49      	ldr	r3, [pc, #292]	; (80073d8 <UART_SetConfig+0x510>)
 80072b2:	617b      	str	r3, [r7, #20]
        break;
 80072b4:	e00c      	b.n	80072d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072b6:	f7fe f84d 	bl	8005354 <HAL_RCC_GetSysClockFreq>
 80072ba:	6178      	str	r0, [r7, #20]
        break;
 80072bc:	e008      	b.n	80072d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072c2:	617b      	str	r3, [r7, #20]
        break;
 80072c4:	e004      	b.n	80072d0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	76bb      	strb	r3, [r7, #26]
        break;
 80072ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d074      	beq.n	80073c0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	005a      	lsls	r2, r3, #1
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	085b      	lsrs	r3, r3, #1
 80072e0:	441a      	add	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	2b0f      	cmp	r3, #15
 80072f2:	d916      	bls.n	8007322 <UART_SetConfig+0x45a>
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072fa:	d212      	bcs.n	8007322 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	b29b      	uxth	r3, r3
 8007300:	f023 030f 	bic.w	r3, r3, #15
 8007304:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	085b      	lsrs	r3, r3, #1
 800730a:	b29b      	uxth	r3, r3
 800730c:	f003 0307 	and.w	r3, r3, #7
 8007310:	b29a      	uxth	r2, r3
 8007312:	89fb      	ldrh	r3, [r7, #14]
 8007314:	4313      	orrs	r3, r2
 8007316:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	89fa      	ldrh	r2, [r7, #14]
 800731e:	60da      	str	r2, [r3, #12]
 8007320:	e04e      	b.n	80073c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	76bb      	strb	r3, [r7, #26]
 8007326:	e04b      	b.n	80073c0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007328:	7efb      	ldrb	r3, [r7, #27]
 800732a:	2b08      	cmp	r3, #8
 800732c:	d827      	bhi.n	800737e <UART_SetConfig+0x4b6>
 800732e:	a201      	add	r2, pc, #4	; (adr r2, 8007334 <UART_SetConfig+0x46c>)
 8007330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007334:	08007359 	.word	0x08007359
 8007338:	08007361 	.word	0x08007361
 800733c:	08007369 	.word	0x08007369
 8007340:	0800737f 	.word	0x0800737f
 8007344:	0800736f 	.word	0x0800736f
 8007348:	0800737f 	.word	0x0800737f
 800734c:	0800737f 	.word	0x0800737f
 8007350:	0800737f 	.word	0x0800737f
 8007354:	08007377 	.word	0x08007377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007358:	f7fe f894 	bl	8005484 <HAL_RCC_GetPCLK1Freq>
 800735c:	6178      	str	r0, [r7, #20]
        break;
 800735e:	e013      	b.n	8007388 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007360:	f7fe f8a6 	bl	80054b0 <HAL_RCC_GetPCLK2Freq>
 8007364:	6178      	str	r0, [r7, #20]
        break;
 8007366:	e00f      	b.n	8007388 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007368:	4b1b      	ldr	r3, [pc, #108]	; (80073d8 <UART_SetConfig+0x510>)
 800736a:	617b      	str	r3, [r7, #20]
        break;
 800736c:	e00c      	b.n	8007388 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800736e:	f7fd fff1 	bl	8005354 <HAL_RCC_GetSysClockFreq>
 8007372:	6178      	str	r0, [r7, #20]
        break;
 8007374:	e008      	b.n	8007388 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800737a:	617b      	str	r3, [r7, #20]
        break;
 800737c:	e004      	b.n	8007388 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	76bb      	strb	r3, [r7, #26]
        break;
 8007386:	bf00      	nop
    }

    if (pclk != 0U)
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d018      	beq.n	80073c0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	085a      	lsrs	r2, r3, #1
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	441a      	add	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	2b0f      	cmp	r3, #15
 80073a8:	d908      	bls.n	80073bc <UART_SetConfig+0x4f4>
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073b0:	d204      	bcs.n	80073bc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	60da      	str	r2, [r3, #12]
 80073ba:	e001      	b.n	80073c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80073cc:	7ebb      	ldrb	r3, [r7, #26]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3720      	adds	r7, #32
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bdb0      	pop	{r4, r5, r7, pc}
 80073d6:	bf00      	nop
 80073d8:	00f42400 	.word	0x00f42400

080073dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00a      	beq.n	8007406 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	430a      	orrs	r2, r1
 8007404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	f003 0304 	and.w	r3, r3, #4
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00a      	beq.n	800744a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	f003 0308 	and.w	r3, r3, #8
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	f003 0310 	and.w	r3, r3, #16
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	f003 0320 	and.w	r3, r3, #32
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d01a      	beq.n	80074f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074da:	d10a      	bne.n	80074f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00a      	beq.n	8007514 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	430a      	orrs	r2, r1
 8007512:	605a      	str	r2, [r3, #4]
  }
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af02      	add	r7, sp, #8
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007530:	f7fa ff9a 	bl	8002468 <HAL_GetTick>
 8007534:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0308 	and.w	r3, r3, #8
 8007540:	2b08      	cmp	r3, #8
 8007542:	d10e      	bne.n	8007562 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007544:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f82d 	bl	80075b2 <UART_WaitOnFlagUntilTimeout>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e023      	b.n	80075aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0304 	and.w	r3, r3, #4
 800756c:	2b04      	cmp	r3, #4
 800756e:	d10e      	bne.n	800758e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007570:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f817 	bl	80075b2 <UART_WaitOnFlagUntilTimeout>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e00d      	b.n	80075aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2220      	movs	r2, #32
 8007598:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b084      	sub	sp, #16
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	603b      	str	r3, [r7, #0]
 80075be:	4613      	mov	r3, r2
 80075c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075c2:	e05e      	b.n	8007682 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ca:	d05a      	beq.n	8007682 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075cc:	f7fa ff4c 	bl	8002468 <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d302      	bcc.n	80075e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d11b      	bne.n	800761a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80075f0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 0201 	bic.w	r2, r2, #1
 8007600:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2220      	movs	r2, #32
 8007606:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2220      	movs	r2, #32
 800760c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e043      	b.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0304 	and.w	r3, r3, #4
 8007624:	2b00      	cmp	r3, #0
 8007626:	d02c      	beq.n	8007682 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007636:	d124      	bne.n	8007682 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007640:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007650:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 0201 	bic.w	r2, r2, #1
 8007660:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2220      	movs	r2, #32
 8007666:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2220      	movs	r2, #32
 800766c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2220      	movs	r2, #32
 8007672:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e00f      	b.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	69da      	ldr	r2, [r3, #28]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	4013      	ands	r3, r2
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	429a      	cmp	r2, r3
 8007690:	bf0c      	ite	eq
 8007692:	2301      	moveq	r3, #1
 8007694:	2300      	movne	r3, #0
 8007696:	b2db      	uxtb	r3, r3
 8007698:	461a      	mov	r2, r3
 800769a:	79fb      	ldrb	r3, [r7, #7]
 800769c:	429a      	cmp	r2, r3
 800769e:	d091      	beq.n	80075c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <__errno>:
 80076ac:	4b01      	ldr	r3, [pc, #4]	; (80076b4 <__errno+0x8>)
 80076ae:	6818      	ldr	r0, [r3, #0]
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	20000090 	.word	0x20000090

080076b8 <__libc_init_array>:
 80076b8:	b570      	push	{r4, r5, r6, lr}
 80076ba:	4d0d      	ldr	r5, [pc, #52]	; (80076f0 <__libc_init_array+0x38>)
 80076bc:	4c0d      	ldr	r4, [pc, #52]	; (80076f4 <__libc_init_array+0x3c>)
 80076be:	1b64      	subs	r4, r4, r5
 80076c0:	10a4      	asrs	r4, r4, #2
 80076c2:	2600      	movs	r6, #0
 80076c4:	42a6      	cmp	r6, r4
 80076c6:	d109      	bne.n	80076dc <__libc_init_array+0x24>
 80076c8:	4d0b      	ldr	r5, [pc, #44]	; (80076f8 <__libc_init_array+0x40>)
 80076ca:	4c0c      	ldr	r4, [pc, #48]	; (80076fc <__libc_init_array+0x44>)
 80076cc:	f002 fece 	bl	800a46c <_init>
 80076d0:	1b64      	subs	r4, r4, r5
 80076d2:	10a4      	asrs	r4, r4, #2
 80076d4:	2600      	movs	r6, #0
 80076d6:	42a6      	cmp	r6, r4
 80076d8:	d105      	bne.n	80076e6 <__libc_init_array+0x2e>
 80076da:	bd70      	pop	{r4, r5, r6, pc}
 80076dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e0:	4798      	blx	r3
 80076e2:	3601      	adds	r6, #1
 80076e4:	e7ee      	b.n	80076c4 <__libc_init_array+0xc>
 80076e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ea:	4798      	blx	r3
 80076ec:	3601      	adds	r6, #1
 80076ee:	e7f2      	b.n	80076d6 <__libc_init_array+0x1e>
 80076f0:	0800a8f4 	.word	0x0800a8f4
 80076f4:	0800a8f4 	.word	0x0800a8f4
 80076f8:	0800a8f4 	.word	0x0800a8f4
 80076fc:	0800a8f8 	.word	0x0800a8f8

08007700 <malloc>:
 8007700:	4b02      	ldr	r3, [pc, #8]	; (800770c <malloc+0xc>)
 8007702:	4601      	mov	r1, r0
 8007704:	6818      	ldr	r0, [r3, #0]
 8007706:	f000 b863 	b.w	80077d0 <_malloc_r>
 800770a:	bf00      	nop
 800770c:	20000090 	.word	0x20000090

08007710 <free>:
 8007710:	4b02      	ldr	r3, [pc, #8]	; (800771c <free+0xc>)
 8007712:	4601      	mov	r1, r0
 8007714:	6818      	ldr	r0, [r3, #0]
 8007716:	f000 b80b 	b.w	8007730 <_free_r>
 800771a:	bf00      	nop
 800771c:	20000090 	.word	0x20000090

08007720 <memset>:
 8007720:	4402      	add	r2, r0
 8007722:	4603      	mov	r3, r0
 8007724:	4293      	cmp	r3, r2
 8007726:	d100      	bne.n	800772a <memset+0xa>
 8007728:	4770      	bx	lr
 800772a:	f803 1b01 	strb.w	r1, [r3], #1
 800772e:	e7f9      	b.n	8007724 <memset+0x4>

08007730 <_free_r>:
 8007730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007732:	2900      	cmp	r1, #0
 8007734:	d048      	beq.n	80077c8 <_free_r+0x98>
 8007736:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800773a:	9001      	str	r0, [sp, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	f1a1 0404 	sub.w	r4, r1, #4
 8007742:	bfb8      	it	lt
 8007744:	18e4      	addlt	r4, r4, r3
 8007746:	f001 fbd5 	bl	8008ef4 <__malloc_lock>
 800774a:	4a20      	ldr	r2, [pc, #128]	; (80077cc <_free_r+0x9c>)
 800774c:	9801      	ldr	r0, [sp, #4]
 800774e:	6813      	ldr	r3, [r2, #0]
 8007750:	4615      	mov	r5, r2
 8007752:	b933      	cbnz	r3, 8007762 <_free_r+0x32>
 8007754:	6063      	str	r3, [r4, #4]
 8007756:	6014      	str	r4, [r2, #0]
 8007758:	b003      	add	sp, #12
 800775a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800775e:	f001 bbcf 	b.w	8008f00 <__malloc_unlock>
 8007762:	42a3      	cmp	r3, r4
 8007764:	d90b      	bls.n	800777e <_free_r+0x4e>
 8007766:	6821      	ldr	r1, [r4, #0]
 8007768:	1862      	adds	r2, r4, r1
 800776a:	4293      	cmp	r3, r2
 800776c:	bf04      	itt	eq
 800776e:	681a      	ldreq	r2, [r3, #0]
 8007770:	685b      	ldreq	r3, [r3, #4]
 8007772:	6063      	str	r3, [r4, #4]
 8007774:	bf04      	itt	eq
 8007776:	1852      	addeq	r2, r2, r1
 8007778:	6022      	streq	r2, [r4, #0]
 800777a:	602c      	str	r4, [r5, #0]
 800777c:	e7ec      	b.n	8007758 <_free_r+0x28>
 800777e:	461a      	mov	r2, r3
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	b10b      	cbz	r3, 8007788 <_free_r+0x58>
 8007784:	42a3      	cmp	r3, r4
 8007786:	d9fa      	bls.n	800777e <_free_r+0x4e>
 8007788:	6811      	ldr	r1, [r2, #0]
 800778a:	1855      	adds	r5, r2, r1
 800778c:	42a5      	cmp	r5, r4
 800778e:	d10b      	bne.n	80077a8 <_free_r+0x78>
 8007790:	6824      	ldr	r4, [r4, #0]
 8007792:	4421      	add	r1, r4
 8007794:	1854      	adds	r4, r2, r1
 8007796:	42a3      	cmp	r3, r4
 8007798:	6011      	str	r1, [r2, #0]
 800779a:	d1dd      	bne.n	8007758 <_free_r+0x28>
 800779c:	681c      	ldr	r4, [r3, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	6053      	str	r3, [r2, #4]
 80077a2:	4421      	add	r1, r4
 80077a4:	6011      	str	r1, [r2, #0]
 80077a6:	e7d7      	b.n	8007758 <_free_r+0x28>
 80077a8:	d902      	bls.n	80077b0 <_free_r+0x80>
 80077aa:	230c      	movs	r3, #12
 80077ac:	6003      	str	r3, [r0, #0]
 80077ae:	e7d3      	b.n	8007758 <_free_r+0x28>
 80077b0:	6825      	ldr	r5, [r4, #0]
 80077b2:	1961      	adds	r1, r4, r5
 80077b4:	428b      	cmp	r3, r1
 80077b6:	bf04      	itt	eq
 80077b8:	6819      	ldreq	r1, [r3, #0]
 80077ba:	685b      	ldreq	r3, [r3, #4]
 80077bc:	6063      	str	r3, [r4, #4]
 80077be:	bf04      	itt	eq
 80077c0:	1949      	addeq	r1, r1, r5
 80077c2:	6021      	streq	r1, [r4, #0]
 80077c4:	6054      	str	r4, [r2, #4]
 80077c6:	e7c7      	b.n	8007758 <_free_r+0x28>
 80077c8:	b003      	add	sp, #12
 80077ca:	bd30      	pop	{r4, r5, pc}
 80077cc:	200002c0 	.word	0x200002c0

080077d0 <_malloc_r>:
 80077d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d2:	1ccd      	adds	r5, r1, #3
 80077d4:	f025 0503 	bic.w	r5, r5, #3
 80077d8:	3508      	adds	r5, #8
 80077da:	2d0c      	cmp	r5, #12
 80077dc:	bf38      	it	cc
 80077de:	250c      	movcc	r5, #12
 80077e0:	2d00      	cmp	r5, #0
 80077e2:	4606      	mov	r6, r0
 80077e4:	db01      	blt.n	80077ea <_malloc_r+0x1a>
 80077e6:	42a9      	cmp	r1, r5
 80077e8:	d903      	bls.n	80077f2 <_malloc_r+0x22>
 80077ea:	230c      	movs	r3, #12
 80077ec:	6033      	str	r3, [r6, #0]
 80077ee:	2000      	movs	r0, #0
 80077f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077f2:	f001 fb7f 	bl	8008ef4 <__malloc_lock>
 80077f6:	4921      	ldr	r1, [pc, #132]	; (800787c <_malloc_r+0xac>)
 80077f8:	680a      	ldr	r2, [r1, #0]
 80077fa:	4614      	mov	r4, r2
 80077fc:	b99c      	cbnz	r4, 8007826 <_malloc_r+0x56>
 80077fe:	4f20      	ldr	r7, [pc, #128]	; (8007880 <_malloc_r+0xb0>)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	b923      	cbnz	r3, 800780e <_malloc_r+0x3e>
 8007804:	4621      	mov	r1, r4
 8007806:	4630      	mov	r0, r6
 8007808:	f000 fca6 	bl	8008158 <_sbrk_r>
 800780c:	6038      	str	r0, [r7, #0]
 800780e:	4629      	mov	r1, r5
 8007810:	4630      	mov	r0, r6
 8007812:	f000 fca1 	bl	8008158 <_sbrk_r>
 8007816:	1c43      	adds	r3, r0, #1
 8007818:	d123      	bne.n	8007862 <_malloc_r+0x92>
 800781a:	230c      	movs	r3, #12
 800781c:	6033      	str	r3, [r6, #0]
 800781e:	4630      	mov	r0, r6
 8007820:	f001 fb6e 	bl	8008f00 <__malloc_unlock>
 8007824:	e7e3      	b.n	80077ee <_malloc_r+0x1e>
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	1b5b      	subs	r3, r3, r5
 800782a:	d417      	bmi.n	800785c <_malloc_r+0x8c>
 800782c:	2b0b      	cmp	r3, #11
 800782e:	d903      	bls.n	8007838 <_malloc_r+0x68>
 8007830:	6023      	str	r3, [r4, #0]
 8007832:	441c      	add	r4, r3
 8007834:	6025      	str	r5, [r4, #0]
 8007836:	e004      	b.n	8007842 <_malloc_r+0x72>
 8007838:	6863      	ldr	r3, [r4, #4]
 800783a:	42a2      	cmp	r2, r4
 800783c:	bf0c      	ite	eq
 800783e:	600b      	streq	r3, [r1, #0]
 8007840:	6053      	strne	r3, [r2, #4]
 8007842:	4630      	mov	r0, r6
 8007844:	f001 fb5c 	bl	8008f00 <__malloc_unlock>
 8007848:	f104 000b 	add.w	r0, r4, #11
 800784c:	1d23      	adds	r3, r4, #4
 800784e:	f020 0007 	bic.w	r0, r0, #7
 8007852:	1ac2      	subs	r2, r0, r3
 8007854:	d0cc      	beq.n	80077f0 <_malloc_r+0x20>
 8007856:	1a1b      	subs	r3, r3, r0
 8007858:	50a3      	str	r3, [r4, r2]
 800785a:	e7c9      	b.n	80077f0 <_malloc_r+0x20>
 800785c:	4622      	mov	r2, r4
 800785e:	6864      	ldr	r4, [r4, #4]
 8007860:	e7cc      	b.n	80077fc <_malloc_r+0x2c>
 8007862:	1cc4      	adds	r4, r0, #3
 8007864:	f024 0403 	bic.w	r4, r4, #3
 8007868:	42a0      	cmp	r0, r4
 800786a:	d0e3      	beq.n	8007834 <_malloc_r+0x64>
 800786c:	1a21      	subs	r1, r4, r0
 800786e:	4630      	mov	r0, r6
 8007870:	f000 fc72 	bl	8008158 <_sbrk_r>
 8007874:	3001      	adds	r0, #1
 8007876:	d1dd      	bne.n	8007834 <_malloc_r+0x64>
 8007878:	e7cf      	b.n	800781a <_malloc_r+0x4a>
 800787a:	bf00      	nop
 800787c:	200002c0 	.word	0x200002c0
 8007880:	200002c4 	.word	0x200002c4

08007884 <__cvt>:
 8007884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007888:	ec55 4b10 	vmov	r4, r5, d0
 800788c:	2d00      	cmp	r5, #0
 800788e:	460e      	mov	r6, r1
 8007890:	4619      	mov	r1, r3
 8007892:	462b      	mov	r3, r5
 8007894:	bfbb      	ittet	lt
 8007896:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800789a:	461d      	movlt	r5, r3
 800789c:	2300      	movge	r3, #0
 800789e:	232d      	movlt	r3, #45	; 0x2d
 80078a0:	700b      	strb	r3, [r1, #0]
 80078a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80078a8:	4691      	mov	r9, r2
 80078aa:	f023 0820 	bic.w	r8, r3, #32
 80078ae:	bfbc      	itt	lt
 80078b0:	4622      	movlt	r2, r4
 80078b2:	4614      	movlt	r4, r2
 80078b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078b8:	d005      	beq.n	80078c6 <__cvt+0x42>
 80078ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80078be:	d100      	bne.n	80078c2 <__cvt+0x3e>
 80078c0:	3601      	adds	r6, #1
 80078c2:	2102      	movs	r1, #2
 80078c4:	e000      	b.n	80078c8 <__cvt+0x44>
 80078c6:	2103      	movs	r1, #3
 80078c8:	ab03      	add	r3, sp, #12
 80078ca:	9301      	str	r3, [sp, #4]
 80078cc:	ab02      	add	r3, sp, #8
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	ec45 4b10 	vmov	d0, r4, r5
 80078d4:	4653      	mov	r3, sl
 80078d6:	4632      	mov	r2, r6
 80078d8:	f000 fd0e 	bl	80082f8 <_dtoa_r>
 80078dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80078e0:	4607      	mov	r7, r0
 80078e2:	d102      	bne.n	80078ea <__cvt+0x66>
 80078e4:	f019 0f01 	tst.w	r9, #1
 80078e8:	d022      	beq.n	8007930 <__cvt+0xac>
 80078ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078ee:	eb07 0906 	add.w	r9, r7, r6
 80078f2:	d110      	bne.n	8007916 <__cvt+0x92>
 80078f4:	783b      	ldrb	r3, [r7, #0]
 80078f6:	2b30      	cmp	r3, #48	; 0x30
 80078f8:	d10a      	bne.n	8007910 <__cvt+0x8c>
 80078fa:	2200      	movs	r2, #0
 80078fc:	2300      	movs	r3, #0
 80078fe:	4620      	mov	r0, r4
 8007900:	4629      	mov	r1, r5
 8007902:	f7f9 f8e1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007906:	b918      	cbnz	r0, 8007910 <__cvt+0x8c>
 8007908:	f1c6 0601 	rsb	r6, r6, #1
 800790c:	f8ca 6000 	str.w	r6, [sl]
 8007910:	f8da 3000 	ldr.w	r3, [sl]
 8007914:	4499      	add	r9, r3
 8007916:	2200      	movs	r2, #0
 8007918:	2300      	movs	r3, #0
 800791a:	4620      	mov	r0, r4
 800791c:	4629      	mov	r1, r5
 800791e:	f7f9 f8d3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007922:	b108      	cbz	r0, 8007928 <__cvt+0xa4>
 8007924:	f8cd 900c 	str.w	r9, [sp, #12]
 8007928:	2230      	movs	r2, #48	; 0x30
 800792a:	9b03      	ldr	r3, [sp, #12]
 800792c:	454b      	cmp	r3, r9
 800792e:	d307      	bcc.n	8007940 <__cvt+0xbc>
 8007930:	9b03      	ldr	r3, [sp, #12]
 8007932:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007934:	1bdb      	subs	r3, r3, r7
 8007936:	4638      	mov	r0, r7
 8007938:	6013      	str	r3, [r2, #0]
 800793a:	b004      	add	sp, #16
 800793c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007940:	1c59      	adds	r1, r3, #1
 8007942:	9103      	str	r1, [sp, #12]
 8007944:	701a      	strb	r2, [r3, #0]
 8007946:	e7f0      	b.n	800792a <__cvt+0xa6>

08007948 <__exponent>:
 8007948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800794a:	4603      	mov	r3, r0
 800794c:	2900      	cmp	r1, #0
 800794e:	bfb8      	it	lt
 8007950:	4249      	neglt	r1, r1
 8007952:	f803 2b02 	strb.w	r2, [r3], #2
 8007956:	bfb4      	ite	lt
 8007958:	222d      	movlt	r2, #45	; 0x2d
 800795a:	222b      	movge	r2, #43	; 0x2b
 800795c:	2909      	cmp	r1, #9
 800795e:	7042      	strb	r2, [r0, #1]
 8007960:	dd2a      	ble.n	80079b8 <__exponent+0x70>
 8007962:	f10d 0407 	add.w	r4, sp, #7
 8007966:	46a4      	mov	ip, r4
 8007968:	270a      	movs	r7, #10
 800796a:	46a6      	mov	lr, r4
 800796c:	460a      	mov	r2, r1
 800796e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007972:	fb07 1516 	mls	r5, r7, r6, r1
 8007976:	3530      	adds	r5, #48	; 0x30
 8007978:	2a63      	cmp	r2, #99	; 0x63
 800797a:	f104 34ff 	add.w	r4, r4, #4294967295
 800797e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007982:	4631      	mov	r1, r6
 8007984:	dcf1      	bgt.n	800796a <__exponent+0x22>
 8007986:	3130      	adds	r1, #48	; 0x30
 8007988:	f1ae 0502 	sub.w	r5, lr, #2
 800798c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007990:	1c44      	adds	r4, r0, #1
 8007992:	4629      	mov	r1, r5
 8007994:	4561      	cmp	r1, ip
 8007996:	d30a      	bcc.n	80079ae <__exponent+0x66>
 8007998:	f10d 0209 	add.w	r2, sp, #9
 800799c:	eba2 020e 	sub.w	r2, r2, lr
 80079a0:	4565      	cmp	r5, ip
 80079a2:	bf88      	it	hi
 80079a4:	2200      	movhi	r2, #0
 80079a6:	4413      	add	r3, r2
 80079a8:	1a18      	subs	r0, r3, r0
 80079aa:	b003      	add	sp, #12
 80079ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80079b6:	e7ed      	b.n	8007994 <__exponent+0x4c>
 80079b8:	2330      	movs	r3, #48	; 0x30
 80079ba:	3130      	adds	r1, #48	; 0x30
 80079bc:	7083      	strb	r3, [r0, #2]
 80079be:	70c1      	strb	r1, [r0, #3]
 80079c0:	1d03      	adds	r3, r0, #4
 80079c2:	e7f1      	b.n	80079a8 <__exponent+0x60>

080079c4 <_printf_float>:
 80079c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c8:	ed2d 8b02 	vpush	{d8}
 80079cc:	b08d      	sub	sp, #52	; 0x34
 80079ce:	460c      	mov	r4, r1
 80079d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80079d4:	4616      	mov	r6, r2
 80079d6:	461f      	mov	r7, r3
 80079d8:	4605      	mov	r5, r0
 80079da:	f001 fa79 	bl	8008ed0 <_localeconv_r>
 80079de:	f8d0 a000 	ldr.w	sl, [r0]
 80079e2:	4650      	mov	r0, sl
 80079e4:	f7f8 fbf4 	bl	80001d0 <strlen>
 80079e8:	2300      	movs	r3, #0
 80079ea:	930a      	str	r3, [sp, #40]	; 0x28
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	9305      	str	r3, [sp, #20]
 80079f0:	f8d8 3000 	ldr.w	r3, [r8]
 80079f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80079f8:	3307      	adds	r3, #7
 80079fa:	f023 0307 	bic.w	r3, r3, #7
 80079fe:	f103 0208 	add.w	r2, r3, #8
 8007a02:	f8c8 2000 	str.w	r2, [r8]
 8007a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007a0e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007a12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a16:	9307      	str	r3, [sp, #28]
 8007a18:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a1c:	ee08 0a10 	vmov	s16, r0
 8007a20:	4b9f      	ldr	r3, [pc, #636]	; (8007ca0 <_printf_float+0x2dc>)
 8007a22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a26:	f04f 32ff 	mov.w	r2, #4294967295
 8007a2a:	f7f9 f87f 	bl	8000b2c <__aeabi_dcmpun>
 8007a2e:	bb88      	cbnz	r0, 8007a94 <_printf_float+0xd0>
 8007a30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a34:	4b9a      	ldr	r3, [pc, #616]	; (8007ca0 <_printf_float+0x2dc>)
 8007a36:	f04f 32ff 	mov.w	r2, #4294967295
 8007a3a:	f7f9 f859 	bl	8000af0 <__aeabi_dcmple>
 8007a3e:	bb48      	cbnz	r0, 8007a94 <_printf_float+0xd0>
 8007a40:	2200      	movs	r2, #0
 8007a42:	2300      	movs	r3, #0
 8007a44:	4640      	mov	r0, r8
 8007a46:	4649      	mov	r1, r9
 8007a48:	f7f9 f848 	bl	8000adc <__aeabi_dcmplt>
 8007a4c:	b110      	cbz	r0, 8007a54 <_printf_float+0x90>
 8007a4e:	232d      	movs	r3, #45	; 0x2d
 8007a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a54:	4b93      	ldr	r3, [pc, #588]	; (8007ca4 <_printf_float+0x2e0>)
 8007a56:	4894      	ldr	r0, [pc, #592]	; (8007ca8 <_printf_float+0x2e4>)
 8007a58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007a5c:	bf94      	ite	ls
 8007a5e:	4698      	movls	r8, r3
 8007a60:	4680      	movhi	r8, r0
 8007a62:	2303      	movs	r3, #3
 8007a64:	6123      	str	r3, [r4, #16]
 8007a66:	9b05      	ldr	r3, [sp, #20]
 8007a68:	f023 0204 	bic.w	r2, r3, #4
 8007a6c:	6022      	str	r2, [r4, #0]
 8007a6e:	f04f 0900 	mov.w	r9, #0
 8007a72:	9700      	str	r7, [sp, #0]
 8007a74:	4633      	mov	r3, r6
 8007a76:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a78:	4621      	mov	r1, r4
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	f000 f9d8 	bl	8007e30 <_printf_common>
 8007a80:	3001      	adds	r0, #1
 8007a82:	f040 8090 	bne.w	8007ba6 <_printf_float+0x1e2>
 8007a86:	f04f 30ff 	mov.w	r0, #4294967295
 8007a8a:	b00d      	add	sp, #52	; 0x34
 8007a8c:	ecbd 8b02 	vpop	{d8}
 8007a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a94:	4642      	mov	r2, r8
 8007a96:	464b      	mov	r3, r9
 8007a98:	4640      	mov	r0, r8
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	f7f9 f846 	bl	8000b2c <__aeabi_dcmpun>
 8007aa0:	b140      	cbz	r0, 8007ab4 <_printf_float+0xf0>
 8007aa2:	464b      	mov	r3, r9
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	bfbc      	itt	lt
 8007aa8:	232d      	movlt	r3, #45	; 0x2d
 8007aaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007aae:	487f      	ldr	r0, [pc, #508]	; (8007cac <_printf_float+0x2e8>)
 8007ab0:	4b7f      	ldr	r3, [pc, #508]	; (8007cb0 <_printf_float+0x2ec>)
 8007ab2:	e7d1      	b.n	8007a58 <_printf_float+0x94>
 8007ab4:	6863      	ldr	r3, [r4, #4]
 8007ab6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007aba:	9206      	str	r2, [sp, #24]
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	d13f      	bne.n	8007b40 <_printf_float+0x17c>
 8007ac0:	2306      	movs	r3, #6
 8007ac2:	6063      	str	r3, [r4, #4]
 8007ac4:	9b05      	ldr	r3, [sp, #20]
 8007ac6:	6861      	ldr	r1, [r4, #4]
 8007ac8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007acc:	2300      	movs	r3, #0
 8007ace:	9303      	str	r3, [sp, #12]
 8007ad0:	ab0a      	add	r3, sp, #40	; 0x28
 8007ad2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007ad6:	ab09      	add	r3, sp, #36	; 0x24
 8007ad8:	ec49 8b10 	vmov	d0, r8, r9
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	6022      	str	r2, [r4, #0]
 8007ae0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f7ff fecd 	bl	8007884 <__cvt>
 8007aea:	9b06      	ldr	r3, [sp, #24]
 8007aec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007aee:	2b47      	cmp	r3, #71	; 0x47
 8007af0:	4680      	mov	r8, r0
 8007af2:	d108      	bne.n	8007b06 <_printf_float+0x142>
 8007af4:	1cc8      	adds	r0, r1, #3
 8007af6:	db02      	blt.n	8007afe <_printf_float+0x13a>
 8007af8:	6863      	ldr	r3, [r4, #4]
 8007afa:	4299      	cmp	r1, r3
 8007afc:	dd41      	ble.n	8007b82 <_printf_float+0x1be>
 8007afe:	f1ab 0b02 	sub.w	fp, fp, #2
 8007b02:	fa5f fb8b 	uxtb.w	fp, fp
 8007b06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b0a:	d820      	bhi.n	8007b4e <_printf_float+0x18a>
 8007b0c:	3901      	subs	r1, #1
 8007b0e:	465a      	mov	r2, fp
 8007b10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b14:	9109      	str	r1, [sp, #36]	; 0x24
 8007b16:	f7ff ff17 	bl	8007948 <__exponent>
 8007b1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b1c:	1813      	adds	r3, r2, r0
 8007b1e:	2a01      	cmp	r2, #1
 8007b20:	4681      	mov	r9, r0
 8007b22:	6123      	str	r3, [r4, #16]
 8007b24:	dc02      	bgt.n	8007b2c <_printf_float+0x168>
 8007b26:	6822      	ldr	r2, [r4, #0]
 8007b28:	07d2      	lsls	r2, r2, #31
 8007b2a:	d501      	bpl.n	8007b30 <_printf_float+0x16c>
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	6123      	str	r3, [r4, #16]
 8007b30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d09c      	beq.n	8007a72 <_printf_float+0xae>
 8007b38:	232d      	movs	r3, #45	; 0x2d
 8007b3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b3e:	e798      	b.n	8007a72 <_printf_float+0xae>
 8007b40:	9a06      	ldr	r2, [sp, #24]
 8007b42:	2a47      	cmp	r2, #71	; 0x47
 8007b44:	d1be      	bne.n	8007ac4 <_printf_float+0x100>
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1bc      	bne.n	8007ac4 <_printf_float+0x100>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e7b9      	b.n	8007ac2 <_printf_float+0xfe>
 8007b4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007b52:	d118      	bne.n	8007b86 <_printf_float+0x1c2>
 8007b54:	2900      	cmp	r1, #0
 8007b56:	6863      	ldr	r3, [r4, #4]
 8007b58:	dd0b      	ble.n	8007b72 <_printf_float+0x1ae>
 8007b5a:	6121      	str	r1, [r4, #16]
 8007b5c:	b913      	cbnz	r3, 8007b64 <_printf_float+0x1a0>
 8007b5e:	6822      	ldr	r2, [r4, #0]
 8007b60:	07d0      	lsls	r0, r2, #31
 8007b62:	d502      	bpl.n	8007b6a <_printf_float+0x1a6>
 8007b64:	3301      	adds	r3, #1
 8007b66:	440b      	add	r3, r1
 8007b68:	6123      	str	r3, [r4, #16]
 8007b6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007b6c:	f04f 0900 	mov.w	r9, #0
 8007b70:	e7de      	b.n	8007b30 <_printf_float+0x16c>
 8007b72:	b913      	cbnz	r3, 8007b7a <_printf_float+0x1b6>
 8007b74:	6822      	ldr	r2, [r4, #0]
 8007b76:	07d2      	lsls	r2, r2, #31
 8007b78:	d501      	bpl.n	8007b7e <_printf_float+0x1ba>
 8007b7a:	3302      	adds	r3, #2
 8007b7c:	e7f4      	b.n	8007b68 <_printf_float+0x1a4>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e7f2      	b.n	8007b68 <_printf_float+0x1a4>
 8007b82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b88:	4299      	cmp	r1, r3
 8007b8a:	db05      	blt.n	8007b98 <_printf_float+0x1d4>
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	6121      	str	r1, [r4, #16]
 8007b90:	07d8      	lsls	r0, r3, #31
 8007b92:	d5ea      	bpl.n	8007b6a <_printf_float+0x1a6>
 8007b94:	1c4b      	adds	r3, r1, #1
 8007b96:	e7e7      	b.n	8007b68 <_printf_float+0x1a4>
 8007b98:	2900      	cmp	r1, #0
 8007b9a:	bfd4      	ite	le
 8007b9c:	f1c1 0202 	rsble	r2, r1, #2
 8007ba0:	2201      	movgt	r2, #1
 8007ba2:	4413      	add	r3, r2
 8007ba4:	e7e0      	b.n	8007b68 <_printf_float+0x1a4>
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	055a      	lsls	r2, r3, #21
 8007baa:	d407      	bmi.n	8007bbc <_printf_float+0x1f8>
 8007bac:	6923      	ldr	r3, [r4, #16]
 8007bae:	4642      	mov	r2, r8
 8007bb0:	4631      	mov	r1, r6
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	47b8      	blx	r7
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	d12c      	bne.n	8007c14 <_printf_float+0x250>
 8007bba:	e764      	b.n	8007a86 <_printf_float+0xc2>
 8007bbc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007bc0:	f240 80e0 	bls.w	8007d84 <_printf_float+0x3c0>
 8007bc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bc8:	2200      	movs	r2, #0
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f7f8 ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d034      	beq.n	8007c3e <_printf_float+0x27a>
 8007bd4:	4a37      	ldr	r2, [pc, #220]	; (8007cb4 <_printf_float+0x2f0>)
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	4631      	mov	r1, r6
 8007bda:	4628      	mov	r0, r5
 8007bdc:	47b8      	blx	r7
 8007bde:	3001      	adds	r0, #1
 8007be0:	f43f af51 	beq.w	8007a86 <_printf_float+0xc2>
 8007be4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007be8:	429a      	cmp	r2, r3
 8007bea:	db02      	blt.n	8007bf2 <_printf_float+0x22e>
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	07d8      	lsls	r0, r3, #31
 8007bf0:	d510      	bpl.n	8007c14 <_printf_float+0x250>
 8007bf2:	ee18 3a10 	vmov	r3, s16
 8007bf6:	4652      	mov	r2, sl
 8007bf8:	4631      	mov	r1, r6
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	47b8      	blx	r7
 8007bfe:	3001      	adds	r0, #1
 8007c00:	f43f af41 	beq.w	8007a86 <_printf_float+0xc2>
 8007c04:	f04f 0800 	mov.w	r8, #0
 8007c08:	f104 091a 	add.w	r9, r4, #26
 8007c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	4543      	cmp	r3, r8
 8007c12:	dc09      	bgt.n	8007c28 <_printf_float+0x264>
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	079b      	lsls	r3, r3, #30
 8007c18:	f100 8105 	bmi.w	8007e26 <_printf_float+0x462>
 8007c1c:	68e0      	ldr	r0, [r4, #12]
 8007c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c20:	4298      	cmp	r0, r3
 8007c22:	bfb8      	it	lt
 8007c24:	4618      	movlt	r0, r3
 8007c26:	e730      	b.n	8007a8a <_printf_float+0xc6>
 8007c28:	2301      	movs	r3, #1
 8007c2a:	464a      	mov	r2, r9
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	4628      	mov	r0, r5
 8007c30:	47b8      	blx	r7
 8007c32:	3001      	adds	r0, #1
 8007c34:	f43f af27 	beq.w	8007a86 <_printf_float+0xc2>
 8007c38:	f108 0801 	add.w	r8, r8, #1
 8007c3c:	e7e6      	b.n	8007c0c <_printf_float+0x248>
 8007c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	dc39      	bgt.n	8007cb8 <_printf_float+0x2f4>
 8007c44:	4a1b      	ldr	r2, [pc, #108]	; (8007cb4 <_printf_float+0x2f0>)
 8007c46:	2301      	movs	r3, #1
 8007c48:	4631      	mov	r1, r6
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	47b8      	blx	r7
 8007c4e:	3001      	adds	r0, #1
 8007c50:	f43f af19 	beq.w	8007a86 <_printf_float+0xc2>
 8007c54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	d102      	bne.n	8007c62 <_printf_float+0x29e>
 8007c5c:	6823      	ldr	r3, [r4, #0]
 8007c5e:	07d9      	lsls	r1, r3, #31
 8007c60:	d5d8      	bpl.n	8007c14 <_printf_float+0x250>
 8007c62:	ee18 3a10 	vmov	r3, s16
 8007c66:	4652      	mov	r2, sl
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	47b8      	blx	r7
 8007c6e:	3001      	adds	r0, #1
 8007c70:	f43f af09 	beq.w	8007a86 <_printf_float+0xc2>
 8007c74:	f04f 0900 	mov.w	r9, #0
 8007c78:	f104 0a1a 	add.w	sl, r4, #26
 8007c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c7e:	425b      	negs	r3, r3
 8007c80:	454b      	cmp	r3, r9
 8007c82:	dc01      	bgt.n	8007c88 <_printf_float+0x2c4>
 8007c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c86:	e792      	b.n	8007bae <_printf_float+0x1ea>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	4652      	mov	r2, sl
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	4628      	mov	r0, r5
 8007c90:	47b8      	blx	r7
 8007c92:	3001      	adds	r0, #1
 8007c94:	f43f aef7 	beq.w	8007a86 <_printf_float+0xc2>
 8007c98:	f109 0901 	add.w	r9, r9, #1
 8007c9c:	e7ee      	b.n	8007c7c <_printf_float+0x2b8>
 8007c9e:	bf00      	nop
 8007ca0:	7fefffff 	.word	0x7fefffff
 8007ca4:	0800a510 	.word	0x0800a510
 8007ca8:	0800a514 	.word	0x0800a514
 8007cac:	0800a51c 	.word	0x0800a51c
 8007cb0:	0800a518 	.word	0x0800a518
 8007cb4:	0800a520 	.word	0x0800a520
 8007cb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	bfa8      	it	ge
 8007cc0:	461a      	movge	r2, r3
 8007cc2:	2a00      	cmp	r2, #0
 8007cc4:	4691      	mov	r9, r2
 8007cc6:	dc37      	bgt.n	8007d38 <_printf_float+0x374>
 8007cc8:	f04f 0b00 	mov.w	fp, #0
 8007ccc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cd0:	f104 021a 	add.w	r2, r4, #26
 8007cd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cd6:	9305      	str	r3, [sp, #20]
 8007cd8:	eba3 0309 	sub.w	r3, r3, r9
 8007cdc:	455b      	cmp	r3, fp
 8007cde:	dc33      	bgt.n	8007d48 <_printf_float+0x384>
 8007ce0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	db3b      	blt.n	8007d60 <_printf_float+0x39c>
 8007ce8:	6823      	ldr	r3, [r4, #0]
 8007cea:	07da      	lsls	r2, r3, #31
 8007cec:	d438      	bmi.n	8007d60 <_printf_float+0x39c>
 8007cee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cf0:	9b05      	ldr	r3, [sp, #20]
 8007cf2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	eba2 0901 	sub.w	r9, r2, r1
 8007cfa:	4599      	cmp	r9, r3
 8007cfc:	bfa8      	it	ge
 8007cfe:	4699      	movge	r9, r3
 8007d00:	f1b9 0f00 	cmp.w	r9, #0
 8007d04:	dc35      	bgt.n	8007d72 <_printf_float+0x3ae>
 8007d06:	f04f 0800 	mov.w	r8, #0
 8007d0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d0e:	f104 0a1a 	add.w	sl, r4, #26
 8007d12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d16:	1a9b      	subs	r3, r3, r2
 8007d18:	eba3 0309 	sub.w	r3, r3, r9
 8007d1c:	4543      	cmp	r3, r8
 8007d1e:	f77f af79 	ble.w	8007c14 <_printf_float+0x250>
 8007d22:	2301      	movs	r3, #1
 8007d24:	4652      	mov	r2, sl
 8007d26:	4631      	mov	r1, r6
 8007d28:	4628      	mov	r0, r5
 8007d2a:	47b8      	blx	r7
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	f43f aeaa 	beq.w	8007a86 <_printf_float+0xc2>
 8007d32:	f108 0801 	add.w	r8, r8, #1
 8007d36:	e7ec      	b.n	8007d12 <_printf_float+0x34e>
 8007d38:	4613      	mov	r3, r2
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	4642      	mov	r2, r8
 8007d3e:	4628      	mov	r0, r5
 8007d40:	47b8      	blx	r7
 8007d42:	3001      	adds	r0, #1
 8007d44:	d1c0      	bne.n	8007cc8 <_printf_float+0x304>
 8007d46:	e69e      	b.n	8007a86 <_printf_float+0xc2>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	4631      	mov	r1, r6
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	9205      	str	r2, [sp, #20]
 8007d50:	47b8      	blx	r7
 8007d52:	3001      	adds	r0, #1
 8007d54:	f43f ae97 	beq.w	8007a86 <_printf_float+0xc2>
 8007d58:	9a05      	ldr	r2, [sp, #20]
 8007d5a:	f10b 0b01 	add.w	fp, fp, #1
 8007d5e:	e7b9      	b.n	8007cd4 <_printf_float+0x310>
 8007d60:	ee18 3a10 	vmov	r3, s16
 8007d64:	4652      	mov	r2, sl
 8007d66:	4631      	mov	r1, r6
 8007d68:	4628      	mov	r0, r5
 8007d6a:	47b8      	blx	r7
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d1be      	bne.n	8007cee <_printf_float+0x32a>
 8007d70:	e689      	b.n	8007a86 <_printf_float+0xc2>
 8007d72:	9a05      	ldr	r2, [sp, #20]
 8007d74:	464b      	mov	r3, r9
 8007d76:	4442      	add	r2, r8
 8007d78:	4631      	mov	r1, r6
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	47b8      	blx	r7
 8007d7e:	3001      	adds	r0, #1
 8007d80:	d1c1      	bne.n	8007d06 <_printf_float+0x342>
 8007d82:	e680      	b.n	8007a86 <_printf_float+0xc2>
 8007d84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d86:	2a01      	cmp	r2, #1
 8007d88:	dc01      	bgt.n	8007d8e <_printf_float+0x3ca>
 8007d8a:	07db      	lsls	r3, r3, #31
 8007d8c:	d538      	bpl.n	8007e00 <_printf_float+0x43c>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	4642      	mov	r2, r8
 8007d92:	4631      	mov	r1, r6
 8007d94:	4628      	mov	r0, r5
 8007d96:	47b8      	blx	r7
 8007d98:	3001      	adds	r0, #1
 8007d9a:	f43f ae74 	beq.w	8007a86 <_printf_float+0xc2>
 8007d9e:	ee18 3a10 	vmov	r3, s16
 8007da2:	4652      	mov	r2, sl
 8007da4:	4631      	mov	r1, r6
 8007da6:	4628      	mov	r0, r5
 8007da8:	47b8      	blx	r7
 8007daa:	3001      	adds	r0, #1
 8007dac:	f43f ae6b 	beq.w	8007a86 <_printf_float+0xc2>
 8007db0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007db4:	2200      	movs	r2, #0
 8007db6:	2300      	movs	r3, #0
 8007db8:	f7f8 fe86 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dbc:	b9d8      	cbnz	r0, 8007df6 <_printf_float+0x432>
 8007dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dc0:	f108 0201 	add.w	r2, r8, #1
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	4631      	mov	r1, r6
 8007dc8:	4628      	mov	r0, r5
 8007dca:	47b8      	blx	r7
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d10e      	bne.n	8007dee <_printf_float+0x42a>
 8007dd0:	e659      	b.n	8007a86 <_printf_float+0xc2>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	4652      	mov	r2, sl
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	4628      	mov	r0, r5
 8007dda:	47b8      	blx	r7
 8007ddc:	3001      	adds	r0, #1
 8007dde:	f43f ae52 	beq.w	8007a86 <_printf_float+0xc2>
 8007de2:	f108 0801 	add.w	r8, r8, #1
 8007de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de8:	3b01      	subs	r3, #1
 8007dea:	4543      	cmp	r3, r8
 8007dec:	dcf1      	bgt.n	8007dd2 <_printf_float+0x40e>
 8007dee:	464b      	mov	r3, r9
 8007df0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007df4:	e6dc      	b.n	8007bb0 <_printf_float+0x1ec>
 8007df6:	f04f 0800 	mov.w	r8, #0
 8007dfa:	f104 0a1a 	add.w	sl, r4, #26
 8007dfe:	e7f2      	b.n	8007de6 <_printf_float+0x422>
 8007e00:	2301      	movs	r3, #1
 8007e02:	4642      	mov	r2, r8
 8007e04:	e7df      	b.n	8007dc6 <_printf_float+0x402>
 8007e06:	2301      	movs	r3, #1
 8007e08:	464a      	mov	r2, r9
 8007e0a:	4631      	mov	r1, r6
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	47b8      	blx	r7
 8007e10:	3001      	adds	r0, #1
 8007e12:	f43f ae38 	beq.w	8007a86 <_printf_float+0xc2>
 8007e16:	f108 0801 	add.w	r8, r8, #1
 8007e1a:	68e3      	ldr	r3, [r4, #12]
 8007e1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e1e:	1a5b      	subs	r3, r3, r1
 8007e20:	4543      	cmp	r3, r8
 8007e22:	dcf0      	bgt.n	8007e06 <_printf_float+0x442>
 8007e24:	e6fa      	b.n	8007c1c <_printf_float+0x258>
 8007e26:	f04f 0800 	mov.w	r8, #0
 8007e2a:	f104 0919 	add.w	r9, r4, #25
 8007e2e:	e7f4      	b.n	8007e1a <_printf_float+0x456>

08007e30 <_printf_common>:
 8007e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e34:	4616      	mov	r6, r2
 8007e36:	4699      	mov	r9, r3
 8007e38:	688a      	ldr	r2, [r1, #8]
 8007e3a:	690b      	ldr	r3, [r1, #16]
 8007e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e40:	4293      	cmp	r3, r2
 8007e42:	bfb8      	it	lt
 8007e44:	4613      	movlt	r3, r2
 8007e46:	6033      	str	r3, [r6, #0]
 8007e48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e4c:	4607      	mov	r7, r0
 8007e4e:	460c      	mov	r4, r1
 8007e50:	b10a      	cbz	r2, 8007e56 <_printf_common+0x26>
 8007e52:	3301      	adds	r3, #1
 8007e54:	6033      	str	r3, [r6, #0]
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	0699      	lsls	r1, r3, #26
 8007e5a:	bf42      	ittt	mi
 8007e5c:	6833      	ldrmi	r3, [r6, #0]
 8007e5e:	3302      	addmi	r3, #2
 8007e60:	6033      	strmi	r3, [r6, #0]
 8007e62:	6825      	ldr	r5, [r4, #0]
 8007e64:	f015 0506 	ands.w	r5, r5, #6
 8007e68:	d106      	bne.n	8007e78 <_printf_common+0x48>
 8007e6a:	f104 0a19 	add.w	sl, r4, #25
 8007e6e:	68e3      	ldr	r3, [r4, #12]
 8007e70:	6832      	ldr	r2, [r6, #0]
 8007e72:	1a9b      	subs	r3, r3, r2
 8007e74:	42ab      	cmp	r3, r5
 8007e76:	dc26      	bgt.n	8007ec6 <_printf_common+0x96>
 8007e78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e7c:	1e13      	subs	r3, r2, #0
 8007e7e:	6822      	ldr	r2, [r4, #0]
 8007e80:	bf18      	it	ne
 8007e82:	2301      	movne	r3, #1
 8007e84:	0692      	lsls	r2, r2, #26
 8007e86:	d42b      	bmi.n	8007ee0 <_printf_common+0xb0>
 8007e88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e8c:	4649      	mov	r1, r9
 8007e8e:	4638      	mov	r0, r7
 8007e90:	47c0      	blx	r8
 8007e92:	3001      	adds	r0, #1
 8007e94:	d01e      	beq.n	8007ed4 <_printf_common+0xa4>
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	68e5      	ldr	r5, [r4, #12]
 8007e9a:	6832      	ldr	r2, [r6, #0]
 8007e9c:	f003 0306 	and.w	r3, r3, #6
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	bf08      	it	eq
 8007ea4:	1aad      	subeq	r5, r5, r2
 8007ea6:	68a3      	ldr	r3, [r4, #8]
 8007ea8:	6922      	ldr	r2, [r4, #16]
 8007eaa:	bf0c      	ite	eq
 8007eac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007eb0:	2500      	movne	r5, #0
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	bfc4      	itt	gt
 8007eb6:	1a9b      	subgt	r3, r3, r2
 8007eb8:	18ed      	addgt	r5, r5, r3
 8007eba:	2600      	movs	r6, #0
 8007ebc:	341a      	adds	r4, #26
 8007ebe:	42b5      	cmp	r5, r6
 8007ec0:	d11a      	bne.n	8007ef8 <_printf_common+0xc8>
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	e008      	b.n	8007ed8 <_printf_common+0xa8>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	4652      	mov	r2, sl
 8007eca:	4649      	mov	r1, r9
 8007ecc:	4638      	mov	r0, r7
 8007ece:	47c0      	blx	r8
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	d103      	bne.n	8007edc <_printf_common+0xac>
 8007ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007edc:	3501      	adds	r5, #1
 8007ede:	e7c6      	b.n	8007e6e <_printf_common+0x3e>
 8007ee0:	18e1      	adds	r1, r4, r3
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	2030      	movs	r0, #48	; 0x30
 8007ee6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007eea:	4422      	add	r2, r4
 8007eec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ef0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ef4:	3302      	adds	r3, #2
 8007ef6:	e7c7      	b.n	8007e88 <_printf_common+0x58>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	4622      	mov	r2, r4
 8007efc:	4649      	mov	r1, r9
 8007efe:	4638      	mov	r0, r7
 8007f00:	47c0      	blx	r8
 8007f02:	3001      	adds	r0, #1
 8007f04:	d0e6      	beq.n	8007ed4 <_printf_common+0xa4>
 8007f06:	3601      	adds	r6, #1
 8007f08:	e7d9      	b.n	8007ebe <_printf_common+0x8e>
	...

08007f0c <_printf_i>:
 8007f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f10:	460c      	mov	r4, r1
 8007f12:	4691      	mov	r9, r2
 8007f14:	7e27      	ldrb	r7, [r4, #24]
 8007f16:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007f18:	2f78      	cmp	r7, #120	; 0x78
 8007f1a:	4680      	mov	r8, r0
 8007f1c:	469a      	mov	sl, r3
 8007f1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f22:	d807      	bhi.n	8007f34 <_printf_i+0x28>
 8007f24:	2f62      	cmp	r7, #98	; 0x62
 8007f26:	d80a      	bhi.n	8007f3e <_printf_i+0x32>
 8007f28:	2f00      	cmp	r7, #0
 8007f2a:	f000 80d8 	beq.w	80080de <_printf_i+0x1d2>
 8007f2e:	2f58      	cmp	r7, #88	; 0x58
 8007f30:	f000 80a3 	beq.w	800807a <_printf_i+0x16e>
 8007f34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f3c:	e03a      	b.n	8007fb4 <_printf_i+0xa8>
 8007f3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f42:	2b15      	cmp	r3, #21
 8007f44:	d8f6      	bhi.n	8007f34 <_printf_i+0x28>
 8007f46:	a001      	add	r0, pc, #4	; (adr r0, 8007f4c <_printf_i+0x40>)
 8007f48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007f4c:	08007fa5 	.word	0x08007fa5
 8007f50:	08007fb9 	.word	0x08007fb9
 8007f54:	08007f35 	.word	0x08007f35
 8007f58:	08007f35 	.word	0x08007f35
 8007f5c:	08007f35 	.word	0x08007f35
 8007f60:	08007f35 	.word	0x08007f35
 8007f64:	08007fb9 	.word	0x08007fb9
 8007f68:	08007f35 	.word	0x08007f35
 8007f6c:	08007f35 	.word	0x08007f35
 8007f70:	08007f35 	.word	0x08007f35
 8007f74:	08007f35 	.word	0x08007f35
 8007f78:	080080c5 	.word	0x080080c5
 8007f7c:	08007fe9 	.word	0x08007fe9
 8007f80:	080080a7 	.word	0x080080a7
 8007f84:	08007f35 	.word	0x08007f35
 8007f88:	08007f35 	.word	0x08007f35
 8007f8c:	080080e7 	.word	0x080080e7
 8007f90:	08007f35 	.word	0x08007f35
 8007f94:	08007fe9 	.word	0x08007fe9
 8007f98:	08007f35 	.word	0x08007f35
 8007f9c:	08007f35 	.word	0x08007f35
 8007fa0:	080080af 	.word	0x080080af
 8007fa4:	680b      	ldr	r3, [r1, #0]
 8007fa6:	1d1a      	adds	r2, r3, #4
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	600a      	str	r2, [r1, #0]
 8007fac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007fb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e0a3      	b.n	8008100 <_printf_i+0x1f4>
 8007fb8:	6825      	ldr	r5, [r4, #0]
 8007fba:	6808      	ldr	r0, [r1, #0]
 8007fbc:	062e      	lsls	r6, r5, #24
 8007fbe:	f100 0304 	add.w	r3, r0, #4
 8007fc2:	d50a      	bpl.n	8007fda <_printf_i+0xce>
 8007fc4:	6805      	ldr	r5, [r0, #0]
 8007fc6:	600b      	str	r3, [r1, #0]
 8007fc8:	2d00      	cmp	r5, #0
 8007fca:	da03      	bge.n	8007fd4 <_printf_i+0xc8>
 8007fcc:	232d      	movs	r3, #45	; 0x2d
 8007fce:	426d      	negs	r5, r5
 8007fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fd4:	485e      	ldr	r0, [pc, #376]	; (8008150 <_printf_i+0x244>)
 8007fd6:	230a      	movs	r3, #10
 8007fd8:	e019      	b.n	800800e <_printf_i+0x102>
 8007fda:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007fde:	6805      	ldr	r5, [r0, #0]
 8007fe0:	600b      	str	r3, [r1, #0]
 8007fe2:	bf18      	it	ne
 8007fe4:	b22d      	sxthne	r5, r5
 8007fe6:	e7ef      	b.n	8007fc8 <_printf_i+0xbc>
 8007fe8:	680b      	ldr	r3, [r1, #0]
 8007fea:	6825      	ldr	r5, [r4, #0]
 8007fec:	1d18      	adds	r0, r3, #4
 8007fee:	6008      	str	r0, [r1, #0]
 8007ff0:	0628      	lsls	r0, r5, #24
 8007ff2:	d501      	bpl.n	8007ff8 <_printf_i+0xec>
 8007ff4:	681d      	ldr	r5, [r3, #0]
 8007ff6:	e002      	b.n	8007ffe <_printf_i+0xf2>
 8007ff8:	0669      	lsls	r1, r5, #25
 8007ffa:	d5fb      	bpl.n	8007ff4 <_printf_i+0xe8>
 8007ffc:	881d      	ldrh	r5, [r3, #0]
 8007ffe:	4854      	ldr	r0, [pc, #336]	; (8008150 <_printf_i+0x244>)
 8008000:	2f6f      	cmp	r7, #111	; 0x6f
 8008002:	bf0c      	ite	eq
 8008004:	2308      	moveq	r3, #8
 8008006:	230a      	movne	r3, #10
 8008008:	2100      	movs	r1, #0
 800800a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800800e:	6866      	ldr	r6, [r4, #4]
 8008010:	60a6      	str	r6, [r4, #8]
 8008012:	2e00      	cmp	r6, #0
 8008014:	bfa2      	ittt	ge
 8008016:	6821      	ldrge	r1, [r4, #0]
 8008018:	f021 0104 	bicge.w	r1, r1, #4
 800801c:	6021      	strge	r1, [r4, #0]
 800801e:	b90d      	cbnz	r5, 8008024 <_printf_i+0x118>
 8008020:	2e00      	cmp	r6, #0
 8008022:	d04d      	beq.n	80080c0 <_printf_i+0x1b4>
 8008024:	4616      	mov	r6, r2
 8008026:	fbb5 f1f3 	udiv	r1, r5, r3
 800802a:	fb03 5711 	mls	r7, r3, r1, r5
 800802e:	5dc7      	ldrb	r7, [r0, r7]
 8008030:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008034:	462f      	mov	r7, r5
 8008036:	42bb      	cmp	r3, r7
 8008038:	460d      	mov	r5, r1
 800803a:	d9f4      	bls.n	8008026 <_printf_i+0x11a>
 800803c:	2b08      	cmp	r3, #8
 800803e:	d10b      	bne.n	8008058 <_printf_i+0x14c>
 8008040:	6823      	ldr	r3, [r4, #0]
 8008042:	07df      	lsls	r7, r3, #31
 8008044:	d508      	bpl.n	8008058 <_printf_i+0x14c>
 8008046:	6923      	ldr	r3, [r4, #16]
 8008048:	6861      	ldr	r1, [r4, #4]
 800804a:	4299      	cmp	r1, r3
 800804c:	bfde      	ittt	le
 800804e:	2330      	movle	r3, #48	; 0x30
 8008050:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008054:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008058:	1b92      	subs	r2, r2, r6
 800805a:	6122      	str	r2, [r4, #16]
 800805c:	f8cd a000 	str.w	sl, [sp]
 8008060:	464b      	mov	r3, r9
 8008062:	aa03      	add	r2, sp, #12
 8008064:	4621      	mov	r1, r4
 8008066:	4640      	mov	r0, r8
 8008068:	f7ff fee2 	bl	8007e30 <_printf_common>
 800806c:	3001      	adds	r0, #1
 800806e:	d14c      	bne.n	800810a <_printf_i+0x1fe>
 8008070:	f04f 30ff 	mov.w	r0, #4294967295
 8008074:	b004      	add	sp, #16
 8008076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800807a:	4835      	ldr	r0, [pc, #212]	; (8008150 <_printf_i+0x244>)
 800807c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	680e      	ldr	r6, [r1, #0]
 8008084:	061f      	lsls	r7, r3, #24
 8008086:	f856 5b04 	ldr.w	r5, [r6], #4
 800808a:	600e      	str	r6, [r1, #0]
 800808c:	d514      	bpl.n	80080b8 <_printf_i+0x1ac>
 800808e:	07d9      	lsls	r1, r3, #31
 8008090:	bf44      	itt	mi
 8008092:	f043 0320 	orrmi.w	r3, r3, #32
 8008096:	6023      	strmi	r3, [r4, #0]
 8008098:	b91d      	cbnz	r5, 80080a2 <_printf_i+0x196>
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	f023 0320 	bic.w	r3, r3, #32
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	2310      	movs	r3, #16
 80080a4:	e7b0      	b.n	8008008 <_printf_i+0xfc>
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	f043 0320 	orr.w	r3, r3, #32
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	2378      	movs	r3, #120	; 0x78
 80080b0:	4828      	ldr	r0, [pc, #160]	; (8008154 <_printf_i+0x248>)
 80080b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080b6:	e7e3      	b.n	8008080 <_printf_i+0x174>
 80080b8:	065e      	lsls	r6, r3, #25
 80080ba:	bf48      	it	mi
 80080bc:	b2ad      	uxthmi	r5, r5
 80080be:	e7e6      	b.n	800808e <_printf_i+0x182>
 80080c0:	4616      	mov	r6, r2
 80080c2:	e7bb      	b.n	800803c <_printf_i+0x130>
 80080c4:	680b      	ldr	r3, [r1, #0]
 80080c6:	6826      	ldr	r6, [r4, #0]
 80080c8:	6960      	ldr	r0, [r4, #20]
 80080ca:	1d1d      	adds	r5, r3, #4
 80080cc:	600d      	str	r5, [r1, #0]
 80080ce:	0635      	lsls	r5, r6, #24
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	d501      	bpl.n	80080d8 <_printf_i+0x1cc>
 80080d4:	6018      	str	r0, [r3, #0]
 80080d6:	e002      	b.n	80080de <_printf_i+0x1d2>
 80080d8:	0671      	lsls	r1, r6, #25
 80080da:	d5fb      	bpl.n	80080d4 <_printf_i+0x1c8>
 80080dc:	8018      	strh	r0, [r3, #0]
 80080de:	2300      	movs	r3, #0
 80080e0:	6123      	str	r3, [r4, #16]
 80080e2:	4616      	mov	r6, r2
 80080e4:	e7ba      	b.n	800805c <_printf_i+0x150>
 80080e6:	680b      	ldr	r3, [r1, #0]
 80080e8:	1d1a      	adds	r2, r3, #4
 80080ea:	600a      	str	r2, [r1, #0]
 80080ec:	681e      	ldr	r6, [r3, #0]
 80080ee:	6862      	ldr	r2, [r4, #4]
 80080f0:	2100      	movs	r1, #0
 80080f2:	4630      	mov	r0, r6
 80080f4:	f7f8 f874 	bl	80001e0 <memchr>
 80080f8:	b108      	cbz	r0, 80080fe <_printf_i+0x1f2>
 80080fa:	1b80      	subs	r0, r0, r6
 80080fc:	6060      	str	r0, [r4, #4]
 80080fe:	6863      	ldr	r3, [r4, #4]
 8008100:	6123      	str	r3, [r4, #16]
 8008102:	2300      	movs	r3, #0
 8008104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008108:	e7a8      	b.n	800805c <_printf_i+0x150>
 800810a:	6923      	ldr	r3, [r4, #16]
 800810c:	4632      	mov	r2, r6
 800810e:	4649      	mov	r1, r9
 8008110:	4640      	mov	r0, r8
 8008112:	47d0      	blx	sl
 8008114:	3001      	adds	r0, #1
 8008116:	d0ab      	beq.n	8008070 <_printf_i+0x164>
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	079b      	lsls	r3, r3, #30
 800811c:	d413      	bmi.n	8008146 <_printf_i+0x23a>
 800811e:	68e0      	ldr	r0, [r4, #12]
 8008120:	9b03      	ldr	r3, [sp, #12]
 8008122:	4298      	cmp	r0, r3
 8008124:	bfb8      	it	lt
 8008126:	4618      	movlt	r0, r3
 8008128:	e7a4      	b.n	8008074 <_printf_i+0x168>
 800812a:	2301      	movs	r3, #1
 800812c:	4632      	mov	r2, r6
 800812e:	4649      	mov	r1, r9
 8008130:	4640      	mov	r0, r8
 8008132:	47d0      	blx	sl
 8008134:	3001      	adds	r0, #1
 8008136:	d09b      	beq.n	8008070 <_printf_i+0x164>
 8008138:	3501      	adds	r5, #1
 800813a:	68e3      	ldr	r3, [r4, #12]
 800813c:	9903      	ldr	r1, [sp, #12]
 800813e:	1a5b      	subs	r3, r3, r1
 8008140:	42ab      	cmp	r3, r5
 8008142:	dcf2      	bgt.n	800812a <_printf_i+0x21e>
 8008144:	e7eb      	b.n	800811e <_printf_i+0x212>
 8008146:	2500      	movs	r5, #0
 8008148:	f104 0619 	add.w	r6, r4, #25
 800814c:	e7f5      	b.n	800813a <_printf_i+0x22e>
 800814e:	bf00      	nop
 8008150:	0800a522 	.word	0x0800a522
 8008154:	0800a533 	.word	0x0800a533

08008158 <_sbrk_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4d06      	ldr	r5, [pc, #24]	; (8008174 <_sbrk_r+0x1c>)
 800815c:	2300      	movs	r3, #0
 800815e:	4604      	mov	r4, r0
 8008160:	4608      	mov	r0, r1
 8008162:	602b      	str	r3, [r5, #0]
 8008164:	f7fa f87e 	bl	8002264 <_sbrk>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	d102      	bne.n	8008172 <_sbrk_r+0x1a>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	b103      	cbz	r3, 8008172 <_sbrk_r+0x1a>
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	20000558 	.word	0x20000558

08008178 <siprintf>:
 8008178:	b40e      	push	{r1, r2, r3}
 800817a:	b500      	push	{lr}
 800817c:	b09c      	sub	sp, #112	; 0x70
 800817e:	ab1d      	add	r3, sp, #116	; 0x74
 8008180:	9002      	str	r0, [sp, #8]
 8008182:	9006      	str	r0, [sp, #24]
 8008184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008188:	4809      	ldr	r0, [pc, #36]	; (80081b0 <siprintf+0x38>)
 800818a:	9107      	str	r1, [sp, #28]
 800818c:	9104      	str	r1, [sp, #16]
 800818e:	4909      	ldr	r1, [pc, #36]	; (80081b4 <siprintf+0x3c>)
 8008190:	f853 2b04 	ldr.w	r2, [r3], #4
 8008194:	9105      	str	r1, [sp, #20]
 8008196:	6800      	ldr	r0, [r0, #0]
 8008198:	9301      	str	r3, [sp, #4]
 800819a:	a902      	add	r1, sp, #8
 800819c:	f001 fa9e 	bl	80096dc <_svfiprintf_r>
 80081a0:	9b02      	ldr	r3, [sp, #8]
 80081a2:	2200      	movs	r2, #0
 80081a4:	701a      	strb	r2, [r3, #0]
 80081a6:	b01c      	add	sp, #112	; 0x70
 80081a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80081ac:	b003      	add	sp, #12
 80081ae:	4770      	bx	lr
 80081b0:	20000090 	.word	0x20000090
 80081b4:	ffff0208 	.word	0xffff0208

080081b8 <strncpy>:
 80081b8:	b510      	push	{r4, lr}
 80081ba:	3901      	subs	r1, #1
 80081bc:	4603      	mov	r3, r0
 80081be:	b132      	cbz	r2, 80081ce <strncpy+0x16>
 80081c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80081c4:	f803 4b01 	strb.w	r4, [r3], #1
 80081c8:	3a01      	subs	r2, #1
 80081ca:	2c00      	cmp	r4, #0
 80081cc:	d1f7      	bne.n	80081be <strncpy+0x6>
 80081ce:	441a      	add	r2, r3
 80081d0:	2100      	movs	r1, #0
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d100      	bne.n	80081d8 <strncpy+0x20>
 80081d6:	bd10      	pop	{r4, pc}
 80081d8:	f803 1b01 	strb.w	r1, [r3], #1
 80081dc:	e7f9      	b.n	80081d2 <strncpy+0x1a>

080081de <quorem>:
 80081de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e2:	6903      	ldr	r3, [r0, #16]
 80081e4:	690c      	ldr	r4, [r1, #16]
 80081e6:	42a3      	cmp	r3, r4
 80081e8:	4607      	mov	r7, r0
 80081ea:	f2c0 8081 	blt.w	80082f0 <quorem+0x112>
 80081ee:	3c01      	subs	r4, #1
 80081f0:	f101 0814 	add.w	r8, r1, #20
 80081f4:	f100 0514 	add.w	r5, r0, #20
 80081f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081fc:	9301      	str	r3, [sp, #4]
 80081fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008202:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008206:	3301      	adds	r3, #1
 8008208:	429a      	cmp	r2, r3
 800820a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800820e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008212:	fbb2 f6f3 	udiv	r6, r2, r3
 8008216:	d331      	bcc.n	800827c <quorem+0x9e>
 8008218:	f04f 0e00 	mov.w	lr, #0
 800821c:	4640      	mov	r0, r8
 800821e:	46ac      	mov	ip, r5
 8008220:	46f2      	mov	sl, lr
 8008222:	f850 2b04 	ldr.w	r2, [r0], #4
 8008226:	b293      	uxth	r3, r2
 8008228:	fb06 e303 	mla	r3, r6, r3, lr
 800822c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008230:	b29b      	uxth	r3, r3
 8008232:	ebaa 0303 	sub.w	r3, sl, r3
 8008236:	0c12      	lsrs	r2, r2, #16
 8008238:	f8dc a000 	ldr.w	sl, [ip]
 800823c:	fb06 e202 	mla	r2, r6, r2, lr
 8008240:	fa13 f38a 	uxtah	r3, r3, sl
 8008244:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008248:	fa1f fa82 	uxth.w	sl, r2
 800824c:	f8dc 2000 	ldr.w	r2, [ip]
 8008250:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008254:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008258:	b29b      	uxth	r3, r3
 800825a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800825e:	4581      	cmp	r9, r0
 8008260:	f84c 3b04 	str.w	r3, [ip], #4
 8008264:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008268:	d2db      	bcs.n	8008222 <quorem+0x44>
 800826a:	f855 300b 	ldr.w	r3, [r5, fp]
 800826e:	b92b      	cbnz	r3, 800827c <quorem+0x9e>
 8008270:	9b01      	ldr	r3, [sp, #4]
 8008272:	3b04      	subs	r3, #4
 8008274:	429d      	cmp	r5, r3
 8008276:	461a      	mov	r2, r3
 8008278:	d32e      	bcc.n	80082d8 <quorem+0xfa>
 800827a:	613c      	str	r4, [r7, #16]
 800827c:	4638      	mov	r0, r7
 800827e:	f001 f8c3 	bl	8009408 <__mcmp>
 8008282:	2800      	cmp	r0, #0
 8008284:	db24      	blt.n	80082d0 <quorem+0xf2>
 8008286:	3601      	adds	r6, #1
 8008288:	4628      	mov	r0, r5
 800828a:	f04f 0c00 	mov.w	ip, #0
 800828e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008292:	f8d0 e000 	ldr.w	lr, [r0]
 8008296:	b293      	uxth	r3, r2
 8008298:	ebac 0303 	sub.w	r3, ip, r3
 800829c:	0c12      	lsrs	r2, r2, #16
 800829e:	fa13 f38e 	uxtah	r3, r3, lr
 80082a2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80082a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082b0:	45c1      	cmp	r9, r8
 80082b2:	f840 3b04 	str.w	r3, [r0], #4
 80082b6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80082ba:	d2e8      	bcs.n	800828e <quorem+0xb0>
 80082bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082c4:	b922      	cbnz	r2, 80082d0 <quorem+0xf2>
 80082c6:	3b04      	subs	r3, #4
 80082c8:	429d      	cmp	r5, r3
 80082ca:	461a      	mov	r2, r3
 80082cc:	d30a      	bcc.n	80082e4 <quorem+0x106>
 80082ce:	613c      	str	r4, [r7, #16]
 80082d0:	4630      	mov	r0, r6
 80082d2:	b003      	add	sp, #12
 80082d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d8:	6812      	ldr	r2, [r2, #0]
 80082da:	3b04      	subs	r3, #4
 80082dc:	2a00      	cmp	r2, #0
 80082de:	d1cc      	bne.n	800827a <quorem+0x9c>
 80082e0:	3c01      	subs	r4, #1
 80082e2:	e7c7      	b.n	8008274 <quorem+0x96>
 80082e4:	6812      	ldr	r2, [r2, #0]
 80082e6:	3b04      	subs	r3, #4
 80082e8:	2a00      	cmp	r2, #0
 80082ea:	d1f0      	bne.n	80082ce <quorem+0xf0>
 80082ec:	3c01      	subs	r4, #1
 80082ee:	e7eb      	b.n	80082c8 <quorem+0xea>
 80082f0:	2000      	movs	r0, #0
 80082f2:	e7ee      	b.n	80082d2 <quorem+0xf4>
 80082f4:	0000      	movs	r0, r0
	...

080082f8 <_dtoa_r>:
 80082f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fc:	ed2d 8b02 	vpush	{d8}
 8008300:	ec57 6b10 	vmov	r6, r7, d0
 8008304:	b095      	sub	sp, #84	; 0x54
 8008306:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008308:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800830c:	9105      	str	r1, [sp, #20]
 800830e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008312:	4604      	mov	r4, r0
 8008314:	9209      	str	r2, [sp, #36]	; 0x24
 8008316:	930f      	str	r3, [sp, #60]	; 0x3c
 8008318:	b975      	cbnz	r5, 8008338 <_dtoa_r+0x40>
 800831a:	2010      	movs	r0, #16
 800831c:	f7ff f9f0 	bl	8007700 <malloc>
 8008320:	4602      	mov	r2, r0
 8008322:	6260      	str	r0, [r4, #36]	; 0x24
 8008324:	b920      	cbnz	r0, 8008330 <_dtoa_r+0x38>
 8008326:	4bb2      	ldr	r3, [pc, #712]	; (80085f0 <_dtoa_r+0x2f8>)
 8008328:	21ea      	movs	r1, #234	; 0xea
 800832a:	48b2      	ldr	r0, [pc, #712]	; (80085f4 <_dtoa_r+0x2fc>)
 800832c:	f001 fad6 	bl	80098dc <__assert_func>
 8008330:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008334:	6005      	str	r5, [r0, #0]
 8008336:	60c5      	str	r5, [r0, #12]
 8008338:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800833a:	6819      	ldr	r1, [r3, #0]
 800833c:	b151      	cbz	r1, 8008354 <_dtoa_r+0x5c>
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	604a      	str	r2, [r1, #4]
 8008342:	2301      	movs	r3, #1
 8008344:	4093      	lsls	r3, r2
 8008346:	608b      	str	r3, [r1, #8]
 8008348:	4620      	mov	r0, r4
 800834a:	f000 fe1f 	bl	8008f8c <_Bfree>
 800834e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008350:	2200      	movs	r2, #0
 8008352:	601a      	str	r2, [r3, #0]
 8008354:	1e3b      	subs	r3, r7, #0
 8008356:	bfb9      	ittee	lt
 8008358:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800835c:	9303      	strlt	r3, [sp, #12]
 800835e:	2300      	movge	r3, #0
 8008360:	f8c8 3000 	strge.w	r3, [r8]
 8008364:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008368:	4ba3      	ldr	r3, [pc, #652]	; (80085f8 <_dtoa_r+0x300>)
 800836a:	bfbc      	itt	lt
 800836c:	2201      	movlt	r2, #1
 800836e:	f8c8 2000 	strlt.w	r2, [r8]
 8008372:	ea33 0309 	bics.w	r3, r3, r9
 8008376:	d11b      	bne.n	80083b0 <_dtoa_r+0xb8>
 8008378:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800837a:	f242 730f 	movw	r3, #9999	; 0x270f
 800837e:	6013      	str	r3, [r2, #0]
 8008380:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008384:	4333      	orrs	r3, r6
 8008386:	f000 857a 	beq.w	8008e7e <_dtoa_r+0xb86>
 800838a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800838c:	b963      	cbnz	r3, 80083a8 <_dtoa_r+0xb0>
 800838e:	4b9b      	ldr	r3, [pc, #620]	; (80085fc <_dtoa_r+0x304>)
 8008390:	e024      	b.n	80083dc <_dtoa_r+0xe4>
 8008392:	4b9b      	ldr	r3, [pc, #620]	; (8008600 <_dtoa_r+0x308>)
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	3308      	adds	r3, #8
 8008398:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800839a:	6013      	str	r3, [r2, #0]
 800839c:	9800      	ldr	r0, [sp, #0]
 800839e:	b015      	add	sp, #84	; 0x54
 80083a0:	ecbd 8b02 	vpop	{d8}
 80083a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a8:	4b94      	ldr	r3, [pc, #592]	; (80085fc <_dtoa_r+0x304>)
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	3303      	adds	r3, #3
 80083ae:	e7f3      	b.n	8008398 <_dtoa_r+0xa0>
 80083b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083b4:	2200      	movs	r2, #0
 80083b6:	ec51 0b17 	vmov	r0, r1, d7
 80083ba:	2300      	movs	r3, #0
 80083bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80083c0:	f7f8 fb82 	bl	8000ac8 <__aeabi_dcmpeq>
 80083c4:	4680      	mov	r8, r0
 80083c6:	b158      	cbz	r0, 80083e0 <_dtoa_r+0xe8>
 80083c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083ca:	2301      	movs	r3, #1
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 8551 	beq.w	8008e78 <_dtoa_r+0xb80>
 80083d6:	488b      	ldr	r0, [pc, #556]	; (8008604 <_dtoa_r+0x30c>)
 80083d8:	6018      	str	r0, [r3, #0]
 80083da:	1e43      	subs	r3, r0, #1
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	e7dd      	b.n	800839c <_dtoa_r+0xa4>
 80083e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80083e4:	aa12      	add	r2, sp, #72	; 0x48
 80083e6:	a913      	add	r1, sp, #76	; 0x4c
 80083e8:	4620      	mov	r0, r4
 80083ea:	f001 f8b1 	bl	8009550 <__d2b>
 80083ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80083f2:	4683      	mov	fp, r0
 80083f4:	2d00      	cmp	r5, #0
 80083f6:	d07c      	beq.n	80084f2 <_dtoa_r+0x1fa>
 80083f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80083fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008402:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008406:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800840a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800840e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008412:	4b7d      	ldr	r3, [pc, #500]	; (8008608 <_dtoa_r+0x310>)
 8008414:	2200      	movs	r2, #0
 8008416:	4630      	mov	r0, r6
 8008418:	4639      	mov	r1, r7
 800841a:	f7f7 ff35 	bl	8000288 <__aeabi_dsub>
 800841e:	a36e      	add	r3, pc, #440	; (adr r3, 80085d8 <_dtoa_r+0x2e0>)
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f7f8 f8e8 	bl	80005f8 <__aeabi_dmul>
 8008428:	a36d      	add	r3, pc, #436	; (adr r3, 80085e0 <_dtoa_r+0x2e8>)
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	f7f7 ff2d 	bl	800028c <__adddf3>
 8008432:	4606      	mov	r6, r0
 8008434:	4628      	mov	r0, r5
 8008436:	460f      	mov	r7, r1
 8008438:	f7f8 f874 	bl	8000524 <__aeabi_i2d>
 800843c:	a36a      	add	r3, pc, #424	; (adr r3, 80085e8 <_dtoa_r+0x2f0>)
 800843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008442:	f7f8 f8d9 	bl	80005f8 <__aeabi_dmul>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	4630      	mov	r0, r6
 800844c:	4639      	mov	r1, r7
 800844e:	f7f7 ff1d 	bl	800028c <__adddf3>
 8008452:	4606      	mov	r6, r0
 8008454:	460f      	mov	r7, r1
 8008456:	f7f8 fb7f 	bl	8000b58 <__aeabi_d2iz>
 800845a:	2200      	movs	r2, #0
 800845c:	4682      	mov	sl, r0
 800845e:	2300      	movs	r3, #0
 8008460:	4630      	mov	r0, r6
 8008462:	4639      	mov	r1, r7
 8008464:	f7f8 fb3a 	bl	8000adc <__aeabi_dcmplt>
 8008468:	b148      	cbz	r0, 800847e <_dtoa_r+0x186>
 800846a:	4650      	mov	r0, sl
 800846c:	f7f8 f85a 	bl	8000524 <__aeabi_i2d>
 8008470:	4632      	mov	r2, r6
 8008472:	463b      	mov	r3, r7
 8008474:	f7f8 fb28 	bl	8000ac8 <__aeabi_dcmpeq>
 8008478:	b908      	cbnz	r0, 800847e <_dtoa_r+0x186>
 800847a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800847e:	f1ba 0f16 	cmp.w	sl, #22
 8008482:	d854      	bhi.n	800852e <_dtoa_r+0x236>
 8008484:	4b61      	ldr	r3, [pc, #388]	; (800860c <_dtoa_r+0x314>)
 8008486:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008492:	f7f8 fb23 	bl	8000adc <__aeabi_dcmplt>
 8008496:	2800      	cmp	r0, #0
 8008498:	d04b      	beq.n	8008532 <_dtoa_r+0x23a>
 800849a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800849e:	2300      	movs	r3, #0
 80084a0:	930e      	str	r3, [sp, #56]	; 0x38
 80084a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084a4:	1b5d      	subs	r5, r3, r5
 80084a6:	1e6b      	subs	r3, r5, #1
 80084a8:	9304      	str	r3, [sp, #16]
 80084aa:	bf43      	ittte	mi
 80084ac:	2300      	movmi	r3, #0
 80084ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80084b2:	9304      	strmi	r3, [sp, #16]
 80084b4:	f04f 0800 	movpl.w	r8, #0
 80084b8:	f1ba 0f00 	cmp.w	sl, #0
 80084bc:	db3b      	blt.n	8008536 <_dtoa_r+0x23e>
 80084be:	9b04      	ldr	r3, [sp, #16]
 80084c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80084c4:	4453      	add	r3, sl
 80084c6:	9304      	str	r3, [sp, #16]
 80084c8:	2300      	movs	r3, #0
 80084ca:	9306      	str	r3, [sp, #24]
 80084cc:	9b05      	ldr	r3, [sp, #20]
 80084ce:	2b09      	cmp	r3, #9
 80084d0:	d869      	bhi.n	80085a6 <_dtoa_r+0x2ae>
 80084d2:	2b05      	cmp	r3, #5
 80084d4:	bfc4      	itt	gt
 80084d6:	3b04      	subgt	r3, #4
 80084d8:	9305      	strgt	r3, [sp, #20]
 80084da:	9b05      	ldr	r3, [sp, #20]
 80084dc:	f1a3 0302 	sub.w	r3, r3, #2
 80084e0:	bfcc      	ite	gt
 80084e2:	2500      	movgt	r5, #0
 80084e4:	2501      	movle	r5, #1
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d869      	bhi.n	80085be <_dtoa_r+0x2c6>
 80084ea:	e8df f003 	tbb	[pc, r3]
 80084ee:	4e2c      	.short	0x4e2c
 80084f0:	5a4c      	.short	0x5a4c
 80084f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80084f6:	441d      	add	r5, r3
 80084f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084fc:	2b20      	cmp	r3, #32
 80084fe:	bfc1      	itttt	gt
 8008500:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008504:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008508:	fa09 f303 	lslgt.w	r3, r9, r3
 800850c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008510:	bfda      	itte	le
 8008512:	f1c3 0320 	rsble	r3, r3, #32
 8008516:	fa06 f003 	lslle.w	r0, r6, r3
 800851a:	4318      	orrgt	r0, r3
 800851c:	f7f7 fff2 	bl	8000504 <__aeabi_ui2d>
 8008520:	2301      	movs	r3, #1
 8008522:	4606      	mov	r6, r0
 8008524:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008528:	3d01      	subs	r5, #1
 800852a:	9310      	str	r3, [sp, #64]	; 0x40
 800852c:	e771      	b.n	8008412 <_dtoa_r+0x11a>
 800852e:	2301      	movs	r3, #1
 8008530:	e7b6      	b.n	80084a0 <_dtoa_r+0x1a8>
 8008532:	900e      	str	r0, [sp, #56]	; 0x38
 8008534:	e7b5      	b.n	80084a2 <_dtoa_r+0x1aa>
 8008536:	f1ca 0300 	rsb	r3, sl, #0
 800853a:	9306      	str	r3, [sp, #24]
 800853c:	2300      	movs	r3, #0
 800853e:	eba8 080a 	sub.w	r8, r8, sl
 8008542:	930d      	str	r3, [sp, #52]	; 0x34
 8008544:	e7c2      	b.n	80084cc <_dtoa_r+0x1d4>
 8008546:	2300      	movs	r3, #0
 8008548:	9308      	str	r3, [sp, #32]
 800854a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800854c:	2b00      	cmp	r3, #0
 800854e:	dc39      	bgt.n	80085c4 <_dtoa_r+0x2cc>
 8008550:	f04f 0901 	mov.w	r9, #1
 8008554:	f8cd 9004 	str.w	r9, [sp, #4]
 8008558:	464b      	mov	r3, r9
 800855a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800855e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008560:	2200      	movs	r2, #0
 8008562:	6042      	str	r2, [r0, #4]
 8008564:	2204      	movs	r2, #4
 8008566:	f102 0614 	add.w	r6, r2, #20
 800856a:	429e      	cmp	r6, r3
 800856c:	6841      	ldr	r1, [r0, #4]
 800856e:	d92f      	bls.n	80085d0 <_dtoa_r+0x2d8>
 8008570:	4620      	mov	r0, r4
 8008572:	f000 fccb 	bl	8008f0c <_Balloc>
 8008576:	9000      	str	r0, [sp, #0]
 8008578:	2800      	cmp	r0, #0
 800857a:	d14b      	bne.n	8008614 <_dtoa_r+0x31c>
 800857c:	4b24      	ldr	r3, [pc, #144]	; (8008610 <_dtoa_r+0x318>)
 800857e:	4602      	mov	r2, r0
 8008580:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008584:	e6d1      	b.n	800832a <_dtoa_r+0x32>
 8008586:	2301      	movs	r3, #1
 8008588:	e7de      	b.n	8008548 <_dtoa_r+0x250>
 800858a:	2300      	movs	r3, #0
 800858c:	9308      	str	r3, [sp, #32]
 800858e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008590:	eb0a 0903 	add.w	r9, sl, r3
 8008594:	f109 0301 	add.w	r3, r9, #1
 8008598:	2b01      	cmp	r3, #1
 800859a:	9301      	str	r3, [sp, #4]
 800859c:	bfb8      	it	lt
 800859e:	2301      	movlt	r3, #1
 80085a0:	e7dd      	b.n	800855e <_dtoa_r+0x266>
 80085a2:	2301      	movs	r3, #1
 80085a4:	e7f2      	b.n	800858c <_dtoa_r+0x294>
 80085a6:	2501      	movs	r5, #1
 80085a8:	2300      	movs	r3, #0
 80085aa:	9305      	str	r3, [sp, #20]
 80085ac:	9508      	str	r5, [sp, #32]
 80085ae:	f04f 39ff 	mov.w	r9, #4294967295
 80085b2:	2200      	movs	r2, #0
 80085b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80085b8:	2312      	movs	r3, #18
 80085ba:	9209      	str	r2, [sp, #36]	; 0x24
 80085bc:	e7cf      	b.n	800855e <_dtoa_r+0x266>
 80085be:	2301      	movs	r3, #1
 80085c0:	9308      	str	r3, [sp, #32]
 80085c2:	e7f4      	b.n	80085ae <_dtoa_r+0x2b6>
 80085c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80085c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80085cc:	464b      	mov	r3, r9
 80085ce:	e7c6      	b.n	800855e <_dtoa_r+0x266>
 80085d0:	3101      	adds	r1, #1
 80085d2:	6041      	str	r1, [r0, #4]
 80085d4:	0052      	lsls	r2, r2, #1
 80085d6:	e7c6      	b.n	8008566 <_dtoa_r+0x26e>
 80085d8:	636f4361 	.word	0x636f4361
 80085dc:	3fd287a7 	.word	0x3fd287a7
 80085e0:	8b60c8b3 	.word	0x8b60c8b3
 80085e4:	3fc68a28 	.word	0x3fc68a28
 80085e8:	509f79fb 	.word	0x509f79fb
 80085ec:	3fd34413 	.word	0x3fd34413
 80085f0:	0800a551 	.word	0x0800a551
 80085f4:	0800a568 	.word	0x0800a568
 80085f8:	7ff00000 	.word	0x7ff00000
 80085fc:	0800a54d 	.word	0x0800a54d
 8008600:	0800a544 	.word	0x0800a544
 8008604:	0800a521 	.word	0x0800a521
 8008608:	3ff80000 	.word	0x3ff80000
 800860c:	0800a660 	.word	0x0800a660
 8008610:	0800a5c7 	.word	0x0800a5c7
 8008614:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008616:	9a00      	ldr	r2, [sp, #0]
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	9b01      	ldr	r3, [sp, #4]
 800861c:	2b0e      	cmp	r3, #14
 800861e:	f200 80ad 	bhi.w	800877c <_dtoa_r+0x484>
 8008622:	2d00      	cmp	r5, #0
 8008624:	f000 80aa 	beq.w	800877c <_dtoa_r+0x484>
 8008628:	f1ba 0f00 	cmp.w	sl, #0
 800862c:	dd36      	ble.n	800869c <_dtoa_r+0x3a4>
 800862e:	4ac3      	ldr	r2, [pc, #780]	; (800893c <_dtoa_r+0x644>)
 8008630:	f00a 030f 	and.w	r3, sl, #15
 8008634:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008638:	ed93 7b00 	vldr	d7, [r3]
 800863c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008640:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008644:	eeb0 8a47 	vmov.f32	s16, s14
 8008648:	eef0 8a67 	vmov.f32	s17, s15
 800864c:	d016      	beq.n	800867c <_dtoa_r+0x384>
 800864e:	4bbc      	ldr	r3, [pc, #752]	; (8008940 <_dtoa_r+0x648>)
 8008650:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008654:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008658:	f7f8 f8f8 	bl	800084c <__aeabi_ddiv>
 800865c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008660:	f007 070f 	and.w	r7, r7, #15
 8008664:	2503      	movs	r5, #3
 8008666:	4eb6      	ldr	r6, [pc, #728]	; (8008940 <_dtoa_r+0x648>)
 8008668:	b957      	cbnz	r7, 8008680 <_dtoa_r+0x388>
 800866a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800866e:	ec53 2b18 	vmov	r2, r3, d8
 8008672:	f7f8 f8eb 	bl	800084c <__aeabi_ddiv>
 8008676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800867a:	e029      	b.n	80086d0 <_dtoa_r+0x3d8>
 800867c:	2502      	movs	r5, #2
 800867e:	e7f2      	b.n	8008666 <_dtoa_r+0x36e>
 8008680:	07f9      	lsls	r1, r7, #31
 8008682:	d508      	bpl.n	8008696 <_dtoa_r+0x39e>
 8008684:	ec51 0b18 	vmov	r0, r1, d8
 8008688:	e9d6 2300 	ldrd	r2, r3, [r6]
 800868c:	f7f7 ffb4 	bl	80005f8 <__aeabi_dmul>
 8008690:	ec41 0b18 	vmov	d8, r0, r1
 8008694:	3501      	adds	r5, #1
 8008696:	107f      	asrs	r7, r7, #1
 8008698:	3608      	adds	r6, #8
 800869a:	e7e5      	b.n	8008668 <_dtoa_r+0x370>
 800869c:	f000 80a6 	beq.w	80087ec <_dtoa_r+0x4f4>
 80086a0:	f1ca 0600 	rsb	r6, sl, #0
 80086a4:	4ba5      	ldr	r3, [pc, #660]	; (800893c <_dtoa_r+0x644>)
 80086a6:	4fa6      	ldr	r7, [pc, #664]	; (8008940 <_dtoa_r+0x648>)
 80086a8:	f006 020f 	and.w	r2, r6, #15
 80086ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80086b8:	f7f7 ff9e 	bl	80005f8 <__aeabi_dmul>
 80086bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086c0:	1136      	asrs	r6, r6, #4
 80086c2:	2300      	movs	r3, #0
 80086c4:	2502      	movs	r5, #2
 80086c6:	2e00      	cmp	r6, #0
 80086c8:	f040 8085 	bne.w	80087d6 <_dtoa_r+0x4de>
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1d2      	bne.n	8008676 <_dtoa_r+0x37e>
 80086d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 808c 	beq.w	80087f0 <_dtoa_r+0x4f8>
 80086d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80086dc:	4b99      	ldr	r3, [pc, #612]	; (8008944 <_dtoa_r+0x64c>)
 80086de:	2200      	movs	r2, #0
 80086e0:	4630      	mov	r0, r6
 80086e2:	4639      	mov	r1, r7
 80086e4:	f7f8 f9fa 	bl	8000adc <__aeabi_dcmplt>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	f000 8081 	beq.w	80087f0 <_dtoa_r+0x4f8>
 80086ee:	9b01      	ldr	r3, [sp, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d07d      	beq.n	80087f0 <_dtoa_r+0x4f8>
 80086f4:	f1b9 0f00 	cmp.w	r9, #0
 80086f8:	dd3c      	ble.n	8008774 <_dtoa_r+0x47c>
 80086fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80086fe:	9307      	str	r3, [sp, #28]
 8008700:	2200      	movs	r2, #0
 8008702:	4b91      	ldr	r3, [pc, #580]	; (8008948 <_dtoa_r+0x650>)
 8008704:	4630      	mov	r0, r6
 8008706:	4639      	mov	r1, r7
 8008708:	f7f7 ff76 	bl	80005f8 <__aeabi_dmul>
 800870c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008710:	3501      	adds	r5, #1
 8008712:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008716:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800871a:	4628      	mov	r0, r5
 800871c:	f7f7 ff02 	bl	8000524 <__aeabi_i2d>
 8008720:	4632      	mov	r2, r6
 8008722:	463b      	mov	r3, r7
 8008724:	f7f7 ff68 	bl	80005f8 <__aeabi_dmul>
 8008728:	4b88      	ldr	r3, [pc, #544]	; (800894c <_dtoa_r+0x654>)
 800872a:	2200      	movs	r2, #0
 800872c:	f7f7 fdae 	bl	800028c <__adddf3>
 8008730:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008738:	9303      	str	r3, [sp, #12]
 800873a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800873c:	2b00      	cmp	r3, #0
 800873e:	d15c      	bne.n	80087fa <_dtoa_r+0x502>
 8008740:	4b83      	ldr	r3, [pc, #524]	; (8008950 <_dtoa_r+0x658>)
 8008742:	2200      	movs	r2, #0
 8008744:	4630      	mov	r0, r6
 8008746:	4639      	mov	r1, r7
 8008748:	f7f7 fd9e 	bl	8000288 <__aeabi_dsub>
 800874c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008750:	4606      	mov	r6, r0
 8008752:	460f      	mov	r7, r1
 8008754:	f7f8 f9e0 	bl	8000b18 <__aeabi_dcmpgt>
 8008758:	2800      	cmp	r0, #0
 800875a:	f040 8296 	bne.w	8008c8a <_dtoa_r+0x992>
 800875e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008762:	4630      	mov	r0, r6
 8008764:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008768:	4639      	mov	r1, r7
 800876a:	f7f8 f9b7 	bl	8000adc <__aeabi_dcmplt>
 800876e:	2800      	cmp	r0, #0
 8008770:	f040 8288 	bne.w	8008c84 <_dtoa_r+0x98c>
 8008774:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008778:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800877c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800877e:	2b00      	cmp	r3, #0
 8008780:	f2c0 8158 	blt.w	8008a34 <_dtoa_r+0x73c>
 8008784:	f1ba 0f0e 	cmp.w	sl, #14
 8008788:	f300 8154 	bgt.w	8008a34 <_dtoa_r+0x73c>
 800878c:	4b6b      	ldr	r3, [pc, #428]	; (800893c <_dtoa_r+0x644>)
 800878e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008792:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008798:	2b00      	cmp	r3, #0
 800879a:	f280 80e3 	bge.w	8008964 <_dtoa_r+0x66c>
 800879e:	9b01      	ldr	r3, [sp, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f300 80df 	bgt.w	8008964 <_dtoa_r+0x66c>
 80087a6:	f040 826d 	bne.w	8008c84 <_dtoa_r+0x98c>
 80087aa:	4b69      	ldr	r3, [pc, #420]	; (8008950 <_dtoa_r+0x658>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	4640      	mov	r0, r8
 80087b0:	4649      	mov	r1, r9
 80087b2:	f7f7 ff21 	bl	80005f8 <__aeabi_dmul>
 80087b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087ba:	f7f8 f9a3 	bl	8000b04 <__aeabi_dcmpge>
 80087be:	9e01      	ldr	r6, [sp, #4]
 80087c0:	4637      	mov	r7, r6
 80087c2:	2800      	cmp	r0, #0
 80087c4:	f040 8243 	bne.w	8008c4e <_dtoa_r+0x956>
 80087c8:	9d00      	ldr	r5, [sp, #0]
 80087ca:	2331      	movs	r3, #49	; 0x31
 80087cc:	f805 3b01 	strb.w	r3, [r5], #1
 80087d0:	f10a 0a01 	add.w	sl, sl, #1
 80087d4:	e23f      	b.n	8008c56 <_dtoa_r+0x95e>
 80087d6:	07f2      	lsls	r2, r6, #31
 80087d8:	d505      	bpl.n	80087e6 <_dtoa_r+0x4ee>
 80087da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087de:	f7f7 ff0b 	bl	80005f8 <__aeabi_dmul>
 80087e2:	3501      	adds	r5, #1
 80087e4:	2301      	movs	r3, #1
 80087e6:	1076      	asrs	r6, r6, #1
 80087e8:	3708      	adds	r7, #8
 80087ea:	e76c      	b.n	80086c6 <_dtoa_r+0x3ce>
 80087ec:	2502      	movs	r5, #2
 80087ee:	e76f      	b.n	80086d0 <_dtoa_r+0x3d8>
 80087f0:	9b01      	ldr	r3, [sp, #4]
 80087f2:	f8cd a01c 	str.w	sl, [sp, #28]
 80087f6:	930c      	str	r3, [sp, #48]	; 0x30
 80087f8:	e78d      	b.n	8008716 <_dtoa_r+0x41e>
 80087fa:	9900      	ldr	r1, [sp, #0]
 80087fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80087fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008800:	4b4e      	ldr	r3, [pc, #312]	; (800893c <_dtoa_r+0x644>)
 8008802:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008806:	4401      	add	r1, r0
 8008808:	9102      	str	r1, [sp, #8]
 800880a:	9908      	ldr	r1, [sp, #32]
 800880c:	eeb0 8a47 	vmov.f32	s16, s14
 8008810:	eef0 8a67 	vmov.f32	s17, s15
 8008814:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008818:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800881c:	2900      	cmp	r1, #0
 800881e:	d045      	beq.n	80088ac <_dtoa_r+0x5b4>
 8008820:	494c      	ldr	r1, [pc, #304]	; (8008954 <_dtoa_r+0x65c>)
 8008822:	2000      	movs	r0, #0
 8008824:	f7f8 f812 	bl	800084c <__aeabi_ddiv>
 8008828:	ec53 2b18 	vmov	r2, r3, d8
 800882c:	f7f7 fd2c 	bl	8000288 <__aeabi_dsub>
 8008830:	9d00      	ldr	r5, [sp, #0]
 8008832:	ec41 0b18 	vmov	d8, r0, r1
 8008836:	4639      	mov	r1, r7
 8008838:	4630      	mov	r0, r6
 800883a:	f7f8 f98d 	bl	8000b58 <__aeabi_d2iz>
 800883e:	900c      	str	r0, [sp, #48]	; 0x30
 8008840:	f7f7 fe70 	bl	8000524 <__aeabi_i2d>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	4630      	mov	r0, r6
 800884a:	4639      	mov	r1, r7
 800884c:	f7f7 fd1c 	bl	8000288 <__aeabi_dsub>
 8008850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008852:	3330      	adds	r3, #48	; 0x30
 8008854:	f805 3b01 	strb.w	r3, [r5], #1
 8008858:	ec53 2b18 	vmov	r2, r3, d8
 800885c:	4606      	mov	r6, r0
 800885e:	460f      	mov	r7, r1
 8008860:	f7f8 f93c 	bl	8000adc <__aeabi_dcmplt>
 8008864:	2800      	cmp	r0, #0
 8008866:	d165      	bne.n	8008934 <_dtoa_r+0x63c>
 8008868:	4632      	mov	r2, r6
 800886a:	463b      	mov	r3, r7
 800886c:	4935      	ldr	r1, [pc, #212]	; (8008944 <_dtoa_r+0x64c>)
 800886e:	2000      	movs	r0, #0
 8008870:	f7f7 fd0a 	bl	8000288 <__aeabi_dsub>
 8008874:	ec53 2b18 	vmov	r2, r3, d8
 8008878:	f7f8 f930 	bl	8000adc <__aeabi_dcmplt>
 800887c:	2800      	cmp	r0, #0
 800887e:	f040 80b9 	bne.w	80089f4 <_dtoa_r+0x6fc>
 8008882:	9b02      	ldr	r3, [sp, #8]
 8008884:	429d      	cmp	r5, r3
 8008886:	f43f af75 	beq.w	8008774 <_dtoa_r+0x47c>
 800888a:	4b2f      	ldr	r3, [pc, #188]	; (8008948 <_dtoa_r+0x650>)
 800888c:	ec51 0b18 	vmov	r0, r1, d8
 8008890:	2200      	movs	r2, #0
 8008892:	f7f7 feb1 	bl	80005f8 <__aeabi_dmul>
 8008896:	4b2c      	ldr	r3, [pc, #176]	; (8008948 <_dtoa_r+0x650>)
 8008898:	ec41 0b18 	vmov	d8, r0, r1
 800889c:	2200      	movs	r2, #0
 800889e:	4630      	mov	r0, r6
 80088a0:	4639      	mov	r1, r7
 80088a2:	f7f7 fea9 	bl	80005f8 <__aeabi_dmul>
 80088a6:	4606      	mov	r6, r0
 80088a8:	460f      	mov	r7, r1
 80088aa:	e7c4      	b.n	8008836 <_dtoa_r+0x53e>
 80088ac:	ec51 0b17 	vmov	r0, r1, d7
 80088b0:	f7f7 fea2 	bl	80005f8 <__aeabi_dmul>
 80088b4:	9b02      	ldr	r3, [sp, #8]
 80088b6:	9d00      	ldr	r5, [sp, #0]
 80088b8:	930c      	str	r3, [sp, #48]	; 0x30
 80088ba:	ec41 0b18 	vmov	d8, r0, r1
 80088be:	4639      	mov	r1, r7
 80088c0:	4630      	mov	r0, r6
 80088c2:	f7f8 f949 	bl	8000b58 <__aeabi_d2iz>
 80088c6:	9011      	str	r0, [sp, #68]	; 0x44
 80088c8:	f7f7 fe2c 	bl	8000524 <__aeabi_i2d>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	4630      	mov	r0, r6
 80088d2:	4639      	mov	r1, r7
 80088d4:	f7f7 fcd8 	bl	8000288 <__aeabi_dsub>
 80088d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088da:	3330      	adds	r3, #48	; 0x30
 80088dc:	f805 3b01 	strb.w	r3, [r5], #1
 80088e0:	9b02      	ldr	r3, [sp, #8]
 80088e2:	429d      	cmp	r5, r3
 80088e4:	4606      	mov	r6, r0
 80088e6:	460f      	mov	r7, r1
 80088e8:	f04f 0200 	mov.w	r2, #0
 80088ec:	d134      	bne.n	8008958 <_dtoa_r+0x660>
 80088ee:	4b19      	ldr	r3, [pc, #100]	; (8008954 <_dtoa_r+0x65c>)
 80088f0:	ec51 0b18 	vmov	r0, r1, d8
 80088f4:	f7f7 fcca 	bl	800028c <__adddf3>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	4630      	mov	r0, r6
 80088fe:	4639      	mov	r1, r7
 8008900:	f7f8 f90a 	bl	8000b18 <__aeabi_dcmpgt>
 8008904:	2800      	cmp	r0, #0
 8008906:	d175      	bne.n	80089f4 <_dtoa_r+0x6fc>
 8008908:	ec53 2b18 	vmov	r2, r3, d8
 800890c:	4911      	ldr	r1, [pc, #68]	; (8008954 <_dtoa_r+0x65c>)
 800890e:	2000      	movs	r0, #0
 8008910:	f7f7 fcba 	bl	8000288 <__aeabi_dsub>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	4630      	mov	r0, r6
 800891a:	4639      	mov	r1, r7
 800891c:	f7f8 f8de 	bl	8000adc <__aeabi_dcmplt>
 8008920:	2800      	cmp	r0, #0
 8008922:	f43f af27 	beq.w	8008774 <_dtoa_r+0x47c>
 8008926:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008928:	1e6b      	subs	r3, r5, #1
 800892a:	930c      	str	r3, [sp, #48]	; 0x30
 800892c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008930:	2b30      	cmp	r3, #48	; 0x30
 8008932:	d0f8      	beq.n	8008926 <_dtoa_r+0x62e>
 8008934:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008938:	e04a      	b.n	80089d0 <_dtoa_r+0x6d8>
 800893a:	bf00      	nop
 800893c:	0800a660 	.word	0x0800a660
 8008940:	0800a638 	.word	0x0800a638
 8008944:	3ff00000 	.word	0x3ff00000
 8008948:	40240000 	.word	0x40240000
 800894c:	401c0000 	.word	0x401c0000
 8008950:	40140000 	.word	0x40140000
 8008954:	3fe00000 	.word	0x3fe00000
 8008958:	4baf      	ldr	r3, [pc, #700]	; (8008c18 <_dtoa_r+0x920>)
 800895a:	f7f7 fe4d 	bl	80005f8 <__aeabi_dmul>
 800895e:	4606      	mov	r6, r0
 8008960:	460f      	mov	r7, r1
 8008962:	e7ac      	b.n	80088be <_dtoa_r+0x5c6>
 8008964:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008968:	9d00      	ldr	r5, [sp, #0]
 800896a:	4642      	mov	r2, r8
 800896c:	464b      	mov	r3, r9
 800896e:	4630      	mov	r0, r6
 8008970:	4639      	mov	r1, r7
 8008972:	f7f7 ff6b 	bl	800084c <__aeabi_ddiv>
 8008976:	f7f8 f8ef 	bl	8000b58 <__aeabi_d2iz>
 800897a:	9002      	str	r0, [sp, #8]
 800897c:	f7f7 fdd2 	bl	8000524 <__aeabi_i2d>
 8008980:	4642      	mov	r2, r8
 8008982:	464b      	mov	r3, r9
 8008984:	f7f7 fe38 	bl	80005f8 <__aeabi_dmul>
 8008988:	4602      	mov	r2, r0
 800898a:	460b      	mov	r3, r1
 800898c:	4630      	mov	r0, r6
 800898e:	4639      	mov	r1, r7
 8008990:	f7f7 fc7a 	bl	8000288 <__aeabi_dsub>
 8008994:	9e02      	ldr	r6, [sp, #8]
 8008996:	9f01      	ldr	r7, [sp, #4]
 8008998:	3630      	adds	r6, #48	; 0x30
 800899a:	f805 6b01 	strb.w	r6, [r5], #1
 800899e:	9e00      	ldr	r6, [sp, #0]
 80089a0:	1bae      	subs	r6, r5, r6
 80089a2:	42b7      	cmp	r7, r6
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	d137      	bne.n	8008a1a <_dtoa_r+0x722>
 80089aa:	f7f7 fc6f 	bl	800028c <__adddf3>
 80089ae:	4642      	mov	r2, r8
 80089b0:	464b      	mov	r3, r9
 80089b2:	4606      	mov	r6, r0
 80089b4:	460f      	mov	r7, r1
 80089b6:	f7f8 f8af 	bl	8000b18 <__aeabi_dcmpgt>
 80089ba:	b9c8      	cbnz	r0, 80089f0 <_dtoa_r+0x6f8>
 80089bc:	4642      	mov	r2, r8
 80089be:	464b      	mov	r3, r9
 80089c0:	4630      	mov	r0, r6
 80089c2:	4639      	mov	r1, r7
 80089c4:	f7f8 f880 	bl	8000ac8 <__aeabi_dcmpeq>
 80089c8:	b110      	cbz	r0, 80089d0 <_dtoa_r+0x6d8>
 80089ca:	9b02      	ldr	r3, [sp, #8]
 80089cc:	07d9      	lsls	r1, r3, #31
 80089ce:	d40f      	bmi.n	80089f0 <_dtoa_r+0x6f8>
 80089d0:	4620      	mov	r0, r4
 80089d2:	4659      	mov	r1, fp
 80089d4:	f000 fada 	bl	8008f8c <_Bfree>
 80089d8:	2300      	movs	r3, #0
 80089da:	702b      	strb	r3, [r5, #0]
 80089dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089de:	f10a 0001 	add.w	r0, sl, #1
 80089e2:	6018      	str	r0, [r3, #0]
 80089e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f43f acd8 	beq.w	800839c <_dtoa_r+0xa4>
 80089ec:	601d      	str	r5, [r3, #0]
 80089ee:	e4d5      	b.n	800839c <_dtoa_r+0xa4>
 80089f0:	f8cd a01c 	str.w	sl, [sp, #28]
 80089f4:	462b      	mov	r3, r5
 80089f6:	461d      	mov	r5, r3
 80089f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089fc:	2a39      	cmp	r2, #57	; 0x39
 80089fe:	d108      	bne.n	8008a12 <_dtoa_r+0x71a>
 8008a00:	9a00      	ldr	r2, [sp, #0]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d1f7      	bne.n	80089f6 <_dtoa_r+0x6fe>
 8008a06:	9a07      	ldr	r2, [sp, #28]
 8008a08:	9900      	ldr	r1, [sp, #0]
 8008a0a:	3201      	adds	r2, #1
 8008a0c:	9207      	str	r2, [sp, #28]
 8008a0e:	2230      	movs	r2, #48	; 0x30
 8008a10:	700a      	strb	r2, [r1, #0]
 8008a12:	781a      	ldrb	r2, [r3, #0]
 8008a14:	3201      	adds	r2, #1
 8008a16:	701a      	strb	r2, [r3, #0]
 8008a18:	e78c      	b.n	8008934 <_dtoa_r+0x63c>
 8008a1a:	4b7f      	ldr	r3, [pc, #508]	; (8008c18 <_dtoa_r+0x920>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f7f7 fdeb 	bl	80005f8 <__aeabi_dmul>
 8008a22:	2200      	movs	r2, #0
 8008a24:	2300      	movs	r3, #0
 8008a26:	4606      	mov	r6, r0
 8008a28:	460f      	mov	r7, r1
 8008a2a:	f7f8 f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d09b      	beq.n	800896a <_dtoa_r+0x672>
 8008a32:	e7cd      	b.n	80089d0 <_dtoa_r+0x6d8>
 8008a34:	9a08      	ldr	r2, [sp, #32]
 8008a36:	2a00      	cmp	r2, #0
 8008a38:	f000 80c4 	beq.w	8008bc4 <_dtoa_r+0x8cc>
 8008a3c:	9a05      	ldr	r2, [sp, #20]
 8008a3e:	2a01      	cmp	r2, #1
 8008a40:	f300 80a8 	bgt.w	8008b94 <_dtoa_r+0x89c>
 8008a44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a46:	2a00      	cmp	r2, #0
 8008a48:	f000 80a0 	beq.w	8008b8c <_dtoa_r+0x894>
 8008a4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a50:	9e06      	ldr	r6, [sp, #24]
 8008a52:	4645      	mov	r5, r8
 8008a54:	9a04      	ldr	r2, [sp, #16]
 8008a56:	2101      	movs	r1, #1
 8008a58:	441a      	add	r2, r3
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	4498      	add	r8, r3
 8008a5e:	9204      	str	r2, [sp, #16]
 8008a60:	f000 fb50 	bl	8009104 <__i2b>
 8008a64:	4607      	mov	r7, r0
 8008a66:	2d00      	cmp	r5, #0
 8008a68:	dd0b      	ble.n	8008a82 <_dtoa_r+0x78a>
 8008a6a:	9b04      	ldr	r3, [sp, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	dd08      	ble.n	8008a82 <_dtoa_r+0x78a>
 8008a70:	42ab      	cmp	r3, r5
 8008a72:	9a04      	ldr	r2, [sp, #16]
 8008a74:	bfa8      	it	ge
 8008a76:	462b      	movge	r3, r5
 8008a78:	eba8 0803 	sub.w	r8, r8, r3
 8008a7c:	1aed      	subs	r5, r5, r3
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	9304      	str	r3, [sp, #16]
 8008a82:	9b06      	ldr	r3, [sp, #24]
 8008a84:	b1fb      	cbz	r3, 8008ac6 <_dtoa_r+0x7ce>
 8008a86:	9b08      	ldr	r3, [sp, #32]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f000 809f 	beq.w	8008bcc <_dtoa_r+0x8d4>
 8008a8e:	2e00      	cmp	r6, #0
 8008a90:	dd11      	ble.n	8008ab6 <_dtoa_r+0x7be>
 8008a92:	4639      	mov	r1, r7
 8008a94:	4632      	mov	r2, r6
 8008a96:	4620      	mov	r0, r4
 8008a98:	f000 fbf0 	bl	800927c <__pow5mult>
 8008a9c:	465a      	mov	r2, fp
 8008a9e:	4601      	mov	r1, r0
 8008aa0:	4607      	mov	r7, r0
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f000 fb44 	bl	8009130 <__multiply>
 8008aa8:	4659      	mov	r1, fp
 8008aaa:	9007      	str	r0, [sp, #28]
 8008aac:	4620      	mov	r0, r4
 8008aae:	f000 fa6d 	bl	8008f8c <_Bfree>
 8008ab2:	9b07      	ldr	r3, [sp, #28]
 8008ab4:	469b      	mov	fp, r3
 8008ab6:	9b06      	ldr	r3, [sp, #24]
 8008ab8:	1b9a      	subs	r2, r3, r6
 8008aba:	d004      	beq.n	8008ac6 <_dtoa_r+0x7ce>
 8008abc:	4659      	mov	r1, fp
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 fbdc 	bl	800927c <__pow5mult>
 8008ac4:	4683      	mov	fp, r0
 8008ac6:	2101      	movs	r1, #1
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f000 fb1b 	bl	8009104 <__i2b>
 8008ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	dd7c      	ble.n	8008bd0 <_dtoa_r+0x8d8>
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	4601      	mov	r1, r0
 8008ada:	4620      	mov	r0, r4
 8008adc:	f000 fbce 	bl	800927c <__pow5mult>
 8008ae0:	9b05      	ldr	r3, [sp, #20]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	dd76      	ble.n	8008bd6 <_dtoa_r+0x8de>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	9306      	str	r3, [sp, #24]
 8008aec:	6933      	ldr	r3, [r6, #16]
 8008aee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008af2:	6918      	ldr	r0, [r3, #16]
 8008af4:	f000 fab6 	bl	8009064 <__hi0bits>
 8008af8:	f1c0 0020 	rsb	r0, r0, #32
 8008afc:	9b04      	ldr	r3, [sp, #16]
 8008afe:	4418      	add	r0, r3
 8008b00:	f010 001f 	ands.w	r0, r0, #31
 8008b04:	f000 8086 	beq.w	8008c14 <_dtoa_r+0x91c>
 8008b08:	f1c0 0320 	rsb	r3, r0, #32
 8008b0c:	2b04      	cmp	r3, #4
 8008b0e:	dd7f      	ble.n	8008c10 <_dtoa_r+0x918>
 8008b10:	f1c0 001c 	rsb	r0, r0, #28
 8008b14:	9b04      	ldr	r3, [sp, #16]
 8008b16:	4403      	add	r3, r0
 8008b18:	4480      	add	r8, r0
 8008b1a:	4405      	add	r5, r0
 8008b1c:	9304      	str	r3, [sp, #16]
 8008b1e:	f1b8 0f00 	cmp.w	r8, #0
 8008b22:	dd05      	ble.n	8008b30 <_dtoa_r+0x838>
 8008b24:	4659      	mov	r1, fp
 8008b26:	4642      	mov	r2, r8
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f000 fc01 	bl	8009330 <__lshift>
 8008b2e:	4683      	mov	fp, r0
 8008b30:	9b04      	ldr	r3, [sp, #16]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	dd05      	ble.n	8008b42 <_dtoa_r+0x84a>
 8008b36:	4631      	mov	r1, r6
 8008b38:	461a      	mov	r2, r3
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f000 fbf8 	bl	8009330 <__lshift>
 8008b40:	4606      	mov	r6, r0
 8008b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d069      	beq.n	8008c1c <_dtoa_r+0x924>
 8008b48:	4631      	mov	r1, r6
 8008b4a:	4658      	mov	r0, fp
 8008b4c:	f000 fc5c 	bl	8009408 <__mcmp>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	da63      	bge.n	8008c1c <_dtoa_r+0x924>
 8008b54:	2300      	movs	r3, #0
 8008b56:	4659      	mov	r1, fp
 8008b58:	220a      	movs	r2, #10
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f000 fa38 	bl	8008fd0 <__multadd>
 8008b60:	9b08      	ldr	r3, [sp, #32]
 8008b62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b66:	4683      	mov	fp, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 818f 	beq.w	8008e8c <_dtoa_r+0xb94>
 8008b6e:	4639      	mov	r1, r7
 8008b70:	2300      	movs	r3, #0
 8008b72:	220a      	movs	r2, #10
 8008b74:	4620      	mov	r0, r4
 8008b76:	f000 fa2b 	bl	8008fd0 <__multadd>
 8008b7a:	f1b9 0f00 	cmp.w	r9, #0
 8008b7e:	4607      	mov	r7, r0
 8008b80:	f300 808e 	bgt.w	8008ca0 <_dtoa_r+0x9a8>
 8008b84:	9b05      	ldr	r3, [sp, #20]
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	dc50      	bgt.n	8008c2c <_dtoa_r+0x934>
 8008b8a:	e089      	b.n	8008ca0 <_dtoa_r+0x9a8>
 8008b8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b92:	e75d      	b.n	8008a50 <_dtoa_r+0x758>
 8008b94:	9b01      	ldr	r3, [sp, #4]
 8008b96:	1e5e      	subs	r6, r3, #1
 8008b98:	9b06      	ldr	r3, [sp, #24]
 8008b9a:	42b3      	cmp	r3, r6
 8008b9c:	bfbf      	itttt	lt
 8008b9e:	9b06      	ldrlt	r3, [sp, #24]
 8008ba0:	9606      	strlt	r6, [sp, #24]
 8008ba2:	1af2      	sublt	r2, r6, r3
 8008ba4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008ba6:	bfb6      	itet	lt
 8008ba8:	189b      	addlt	r3, r3, r2
 8008baa:	1b9e      	subge	r6, r3, r6
 8008bac:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008bae:	9b01      	ldr	r3, [sp, #4]
 8008bb0:	bfb8      	it	lt
 8008bb2:	2600      	movlt	r6, #0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	bfb5      	itete	lt
 8008bb8:	eba8 0503 	sublt.w	r5, r8, r3
 8008bbc:	9b01      	ldrge	r3, [sp, #4]
 8008bbe:	2300      	movlt	r3, #0
 8008bc0:	4645      	movge	r5, r8
 8008bc2:	e747      	b.n	8008a54 <_dtoa_r+0x75c>
 8008bc4:	9e06      	ldr	r6, [sp, #24]
 8008bc6:	9f08      	ldr	r7, [sp, #32]
 8008bc8:	4645      	mov	r5, r8
 8008bca:	e74c      	b.n	8008a66 <_dtoa_r+0x76e>
 8008bcc:	9a06      	ldr	r2, [sp, #24]
 8008bce:	e775      	b.n	8008abc <_dtoa_r+0x7c4>
 8008bd0:	9b05      	ldr	r3, [sp, #20]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	dc18      	bgt.n	8008c08 <_dtoa_r+0x910>
 8008bd6:	9b02      	ldr	r3, [sp, #8]
 8008bd8:	b9b3      	cbnz	r3, 8008c08 <_dtoa_r+0x910>
 8008bda:	9b03      	ldr	r3, [sp, #12]
 8008bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008be0:	b9a3      	cbnz	r3, 8008c0c <_dtoa_r+0x914>
 8008be2:	9b03      	ldr	r3, [sp, #12]
 8008be4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008be8:	0d1b      	lsrs	r3, r3, #20
 8008bea:	051b      	lsls	r3, r3, #20
 8008bec:	b12b      	cbz	r3, 8008bfa <_dtoa_r+0x902>
 8008bee:	9b04      	ldr	r3, [sp, #16]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	9304      	str	r3, [sp, #16]
 8008bf4:	f108 0801 	add.w	r8, r8, #1
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	9306      	str	r3, [sp, #24]
 8008bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f47f af74 	bne.w	8008aec <_dtoa_r+0x7f4>
 8008c04:	2001      	movs	r0, #1
 8008c06:	e779      	b.n	8008afc <_dtoa_r+0x804>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	e7f6      	b.n	8008bfa <_dtoa_r+0x902>
 8008c0c:	9b02      	ldr	r3, [sp, #8]
 8008c0e:	e7f4      	b.n	8008bfa <_dtoa_r+0x902>
 8008c10:	d085      	beq.n	8008b1e <_dtoa_r+0x826>
 8008c12:	4618      	mov	r0, r3
 8008c14:	301c      	adds	r0, #28
 8008c16:	e77d      	b.n	8008b14 <_dtoa_r+0x81c>
 8008c18:	40240000 	.word	0x40240000
 8008c1c:	9b01      	ldr	r3, [sp, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	dc38      	bgt.n	8008c94 <_dtoa_r+0x99c>
 8008c22:	9b05      	ldr	r3, [sp, #20]
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	dd35      	ble.n	8008c94 <_dtoa_r+0x99c>
 8008c28:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008c2c:	f1b9 0f00 	cmp.w	r9, #0
 8008c30:	d10d      	bne.n	8008c4e <_dtoa_r+0x956>
 8008c32:	4631      	mov	r1, r6
 8008c34:	464b      	mov	r3, r9
 8008c36:	2205      	movs	r2, #5
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f000 f9c9 	bl	8008fd0 <__multadd>
 8008c3e:	4601      	mov	r1, r0
 8008c40:	4606      	mov	r6, r0
 8008c42:	4658      	mov	r0, fp
 8008c44:	f000 fbe0 	bl	8009408 <__mcmp>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	f73f adbd 	bgt.w	80087c8 <_dtoa_r+0x4d0>
 8008c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c50:	9d00      	ldr	r5, [sp, #0]
 8008c52:	ea6f 0a03 	mvn.w	sl, r3
 8008c56:	f04f 0800 	mov.w	r8, #0
 8008c5a:	4631      	mov	r1, r6
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f000 f995 	bl	8008f8c <_Bfree>
 8008c62:	2f00      	cmp	r7, #0
 8008c64:	f43f aeb4 	beq.w	80089d0 <_dtoa_r+0x6d8>
 8008c68:	f1b8 0f00 	cmp.w	r8, #0
 8008c6c:	d005      	beq.n	8008c7a <_dtoa_r+0x982>
 8008c6e:	45b8      	cmp	r8, r7
 8008c70:	d003      	beq.n	8008c7a <_dtoa_r+0x982>
 8008c72:	4641      	mov	r1, r8
 8008c74:	4620      	mov	r0, r4
 8008c76:	f000 f989 	bl	8008f8c <_Bfree>
 8008c7a:	4639      	mov	r1, r7
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f000 f985 	bl	8008f8c <_Bfree>
 8008c82:	e6a5      	b.n	80089d0 <_dtoa_r+0x6d8>
 8008c84:	2600      	movs	r6, #0
 8008c86:	4637      	mov	r7, r6
 8008c88:	e7e1      	b.n	8008c4e <_dtoa_r+0x956>
 8008c8a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008c8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008c90:	4637      	mov	r7, r6
 8008c92:	e599      	b.n	80087c8 <_dtoa_r+0x4d0>
 8008c94:	9b08      	ldr	r3, [sp, #32]
 8008c96:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 80fd 	beq.w	8008e9a <_dtoa_r+0xba2>
 8008ca0:	2d00      	cmp	r5, #0
 8008ca2:	dd05      	ble.n	8008cb0 <_dtoa_r+0x9b8>
 8008ca4:	4639      	mov	r1, r7
 8008ca6:	462a      	mov	r2, r5
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f000 fb41 	bl	8009330 <__lshift>
 8008cae:	4607      	mov	r7, r0
 8008cb0:	9b06      	ldr	r3, [sp, #24]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d05c      	beq.n	8008d70 <_dtoa_r+0xa78>
 8008cb6:	6879      	ldr	r1, [r7, #4]
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f000 f927 	bl	8008f0c <_Balloc>
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	b928      	cbnz	r0, 8008cce <_dtoa_r+0x9d6>
 8008cc2:	4b80      	ldr	r3, [pc, #512]	; (8008ec4 <_dtoa_r+0xbcc>)
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008cca:	f7ff bb2e 	b.w	800832a <_dtoa_r+0x32>
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	3202      	adds	r2, #2
 8008cd2:	0092      	lsls	r2, r2, #2
 8008cd4:	f107 010c 	add.w	r1, r7, #12
 8008cd8:	300c      	adds	r0, #12
 8008cda:	f000 f8fd 	bl	8008ed8 <memcpy>
 8008cde:	2201      	movs	r2, #1
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f000 fb24 	bl	8009330 <__lshift>
 8008ce8:	9b00      	ldr	r3, [sp, #0]
 8008cea:	3301      	adds	r3, #1
 8008cec:	9301      	str	r3, [sp, #4]
 8008cee:	9b00      	ldr	r3, [sp, #0]
 8008cf0:	444b      	add	r3, r9
 8008cf2:	9307      	str	r3, [sp, #28]
 8008cf4:	9b02      	ldr	r3, [sp, #8]
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	46b8      	mov	r8, r7
 8008cfc:	9306      	str	r3, [sp, #24]
 8008cfe:	4607      	mov	r7, r0
 8008d00:	9b01      	ldr	r3, [sp, #4]
 8008d02:	4631      	mov	r1, r6
 8008d04:	3b01      	subs	r3, #1
 8008d06:	4658      	mov	r0, fp
 8008d08:	9302      	str	r3, [sp, #8]
 8008d0a:	f7ff fa68 	bl	80081de <quorem>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	3330      	adds	r3, #48	; 0x30
 8008d12:	9004      	str	r0, [sp, #16]
 8008d14:	4641      	mov	r1, r8
 8008d16:	4658      	mov	r0, fp
 8008d18:	9308      	str	r3, [sp, #32]
 8008d1a:	f000 fb75 	bl	8009408 <__mcmp>
 8008d1e:	463a      	mov	r2, r7
 8008d20:	4681      	mov	r9, r0
 8008d22:	4631      	mov	r1, r6
 8008d24:	4620      	mov	r0, r4
 8008d26:	f000 fb8b 	bl	8009440 <__mdiff>
 8008d2a:	68c2      	ldr	r2, [r0, #12]
 8008d2c:	9b08      	ldr	r3, [sp, #32]
 8008d2e:	4605      	mov	r5, r0
 8008d30:	bb02      	cbnz	r2, 8008d74 <_dtoa_r+0xa7c>
 8008d32:	4601      	mov	r1, r0
 8008d34:	4658      	mov	r0, fp
 8008d36:	f000 fb67 	bl	8009408 <__mcmp>
 8008d3a:	9b08      	ldr	r3, [sp, #32]
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	4629      	mov	r1, r5
 8008d40:	4620      	mov	r0, r4
 8008d42:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008d46:	f000 f921 	bl	8008f8c <_Bfree>
 8008d4a:	9b05      	ldr	r3, [sp, #20]
 8008d4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d4e:	9d01      	ldr	r5, [sp, #4]
 8008d50:	ea43 0102 	orr.w	r1, r3, r2
 8008d54:	9b06      	ldr	r3, [sp, #24]
 8008d56:	430b      	orrs	r3, r1
 8008d58:	9b08      	ldr	r3, [sp, #32]
 8008d5a:	d10d      	bne.n	8008d78 <_dtoa_r+0xa80>
 8008d5c:	2b39      	cmp	r3, #57	; 0x39
 8008d5e:	d029      	beq.n	8008db4 <_dtoa_r+0xabc>
 8008d60:	f1b9 0f00 	cmp.w	r9, #0
 8008d64:	dd01      	ble.n	8008d6a <_dtoa_r+0xa72>
 8008d66:	9b04      	ldr	r3, [sp, #16]
 8008d68:	3331      	adds	r3, #49	; 0x31
 8008d6a:	9a02      	ldr	r2, [sp, #8]
 8008d6c:	7013      	strb	r3, [r2, #0]
 8008d6e:	e774      	b.n	8008c5a <_dtoa_r+0x962>
 8008d70:	4638      	mov	r0, r7
 8008d72:	e7b9      	b.n	8008ce8 <_dtoa_r+0x9f0>
 8008d74:	2201      	movs	r2, #1
 8008d76:	e7e2      	b.n	8008d3e <_dtoa_r+0xa46>
 8008d78:	f1b9 0f00 	cmp.w	r9, #0
 8008d7c:	db06      	blt.n	8008d8c <_dtoa_r+0xa94>
 8008d7e:	9905      	ldr	r1, [sp, #20]
 8008d80:	ea41 0909 	orr.w	r9, r1, r9
 8008d84:	9906      	ldr	r1, [sp, #24]
 8008d86:	ea59 0101 	orrs.w	r1, r9, r1
 8008d8a:	d120      	bne.n	8008dce <_dtoa_r+0xad6>
 8008d8c:	2a00      	cmp	r2, #0
 8008d8e:	ddec      	ble.n	8008d6a <_dtoa_r+0xa72>
 8008d90:	4659      	mov	r1, fp
 8008d92:	2201      	movs	r2, #1
 8008d94:	4620      	mov	r0, r4
 8008d96:	9301      	str	r3, [sp, #4]
 8008d98:	f000 faca 	bl	8009330 <__lshift>
 8008d9c:	4631      	mov	r1, r6
 8008d9e:	4683      	mov	fp, r0
 8008da0:	f000 fb32 	bl	8009408 <__mcmp>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	9b01      	ldr	r3, [sp, #4]
 8008da8:	dc02      	bgt.n	8008db0 <_dtoa_r+0xab8>
 8008daa:	d1de      	bne.n	8008d6a <_dtoa_r+0xa72>
 8008dac:	07da      	lsls	r2, r3, #31
 8008dae:	d5dc      	bpl.n	8008d6a <_dtoa_r+0xa72>
 8008db0:	2b39      	cmp	r3, #57	; 0x39
 8008db2:	d1d8      	bne.n	8008d66 <_dtoa_r+0xa6e>
 8008db4:	9a02      	ldr	r2, [sp, #8]
 8008db6:	2339      	movs	r3, #57	; 0x39
 8008db8:	7013      	strb	r3, [r2, #0]
 8008dba:	462b      	mov	r3, r5
 8008dbc:	461d      	mov	r5, r3
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008dc4:	2a39      	cmp	r2, #57	; 0x39
 8008dc6:	d050      	beq.n	8008e6a <_dtoa_r+0xb72>
 8008dc8:	3201      	adds	r2, #1
 8008dca:	701a      	strb	r2, [r3, #0]
 8008dcc:	e745      	b.n	8008c5a <_dtoa_r+0x962>
 8008dce:	2a00      	cmp	r2, #0
 8008dd0:	dd03      	ble.n	8008dda <_dtoa_r+0xae2>
 8008dd2:	2b39      	cmp	r3, #57	; 0x39
 8008dd4:	d0ee      	beq.n	8008db4 <_dtoa_r+0xabc>
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	e7c7      	b.n	8008d6a <_dtoa_r+0xa72>
 8008dda:	9a01      	ldr	r2, [sp, #4]
 8008ddc:	9907      	ldr	r1, [sp, #28]
 8008dde:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008de2:	428a      	cmp	r2, r1
 8008de4:	d02a      	beq.n	8008e3c <_dtoa_r+0xb44>
 8008de6:	4659      	mov	r1, fp
 8008de8:	2300      	movs	r3, #0
 8008dea:	220a      	movs	r2, #10
 8008dec:	4620      	mov	r0, r4
 8008dee:	f000 f8ef 	bl	8008fd0 <__multadd>
 8008df2:	45b8      	cmp	r8, r7
 8008df4:	4683      	mov	fp, r0
 8008df6:	f04f 0300 	mov.w	r3, #0
 8008dfa:	f04f 020a 	mov.w	r2, #10
 8008dfe:	4641      	mov	r1, r8
 8008e00:	4620      	mov	r0, r4
 8008e02:	d107      	bne.n	8008e14 <_dtoa_r+0xb1c>
 8008e04:	f000 f8e4 	bl	8008fd0 <__multadd>
 8008e08:	4680      	mov	r8, r0
 8008e0a:	4607      	mov	r7, r0
 8008e0c:	9b01      	ldr	r3, [sp, #4]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	9301      	str	r3, [sp, #4]
 8008e12:	e775      	b.n	8008d00 <_dtoa_r+0xa08>
 8008e14:	f000 f8dc 	bl	8008fd0 <__multadd>
 8008e18:	4639      	mov	r1, r7
 8008e1a:	4680      	mov	r8, r0
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	220a      	movs	r2, #10
 8008e20:	4620      	mov	r0, r4
 8008e22:	f000 f8d5 	bl	8008fd0 <__multadd>
 8008e26:	4607      	mov	r7, r0
 8008e28:	e7f0      	b.n	8008e0c <_dtoa_r+0xb14>
 8008e2a:	f1b9 0f00 	cmp.w	r9, #0
 8008e2e:	9a00      	ldr	r2, [sp, #0]
 8008e30:	bfcc      	ite	gt
 8008e32:	464d      	movgt	r5, r9
 8008e34:	2501      	movle	r5, #1
 8008e36:	4415      	add	r5, r2
 8008e38:	f04f 0800 	mov.w	r8, #0
 8008e3c:	4659      	mov	r1, fp
 8008e3e:	2201      	movs	r2, #1
 8008e40:	4620      	mov	r0, r4
 8008e42:	9301      	str	r3, [sp, #4]
 8008e44:	f000 fa74 	bl	8009330 <__lshift>
 8008e48:	4631      	mov	r1, r6
 8008e4a:	4683      	mov	fp, r0
 8008e4c:	f000 fadc 	bl	8009408 <__mcmp>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	dcb2      	bgt.n	8008dba <_dtoa_r+0xac2>
 8008e54:	d102      	bne.n	8008e5c <_dtoa_r+0xb64>
 8008e56:	9b01      	ldr	r3, [sp, #4]
 8008e58:	07db      	lsls	r3, r3, #31
 8008e5a:	d4ae      	bmi.n	8008dba <_dtoa_r+0xac2>
 8008e5c:	462b      	mov	r3, r5
 8008e5e:	461d      	mov	r5, r3
 8008e60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e64:	2a30      	cmp	r2, #48	; 0x30
 8008e66:	d0fa      	beq.n	8008e5e <_dtoa_r+0xb66>
 8008e68:	e6f7      	b.n	8008c5a <_dtoa_r+0x962>
 8008e6a:	9a00      	ldr	r2, [sp, #0]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d1a5      	bne.n	8008dbc <_dtoa_r+0xac4>
 8008e70:	f10a 0a01 	add.w	sl, sl, #1
 8008e74:	2331      	movs	r3, #49	; 0x31
 8008e76:	e779      	b.n	8008d6c <_dtoa_r+0xa74>
 8008e78:	4b13      	ldr	r3, [pc, #76]	; (8008ec8 <_dtoa_r+0xbd0>)
 8008e7a:	f7ff baaf 	b.w	80083dc <_dtoa_r+0xe4>
 8008e7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f47f aa86 	bne.w	8008392 <_dtoa_r+0x9a>
 8008e86:	4b11      	ldr	r3, [pc, #68]	; (8008ecc <_dtoa_r+0xbd4>)
 8008e88:	f7ff baa8 	b.w	80083dc <_dtoa_r+0xe4>
 8008e8c:	f1b9 0f00 	cmp.w	r9, #0
 8008e90:	dc03      	bgt.n	8008e9a <_dtoa_r+0xba2>
 8008e92:	9b05      	ldr	r3, [sp, #20]
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	f73f aec9 	bgt.w	8008c2c <_dtoa_r+0x934>
 8008e9a:	9d00      	ldr	r5, [sp, #0]
 8008e9c:	4631      	mov	r1, r6
 8008e9e:	4658      	mov	r0, fp
 8008ea0:	f7ff f99d 	bl	80081de <quorem>
 8008ea4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008ea8:	f805 3b01 	strb.w	r3, [r5], #1
 8008eac:	9a00      	ldr	r2, [sp, #0]
 8008eae:	1aaa      	subs	r2, r5, r2
 8008eb0:	4591      	cmp	r9, r2
 8008eb2:	ddba      	ble.n	8008e2a <_dtoa_r+0xb32>
 8008eb4:	4659      	mov	r1, fp
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	220a      	movs	r2, #10
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f000 f888 	bl	8008fd0 <__multadd>
 8008ec0:	4683      	mov	fp, r0
 8008ec2:	e7eb      	b.n	8008e9c <_dtoa_r+0xba4>
 8008ec4:	0800a5c7 	.word	0x0800a5c7
 8008ec8:	0800a520 	.word	0x0800a520
 8008ecc:	0800a544 	.word	0x0800a544

08008ed0 <_localeconv_r>:
 8008ed0:	4800      	ldr	r0, [pc, #0]	; (8008ed4 <_localeconv_r+0x4>)
 8008ed2:	4770      	bx	lr
 8008ed4:	200001e4 	.word	0x200001e4

08008ed8 <memcpy>:
 8008ed8:	440a      	add	r2, r1
 8008eda:	4291      	cmp	r1, r2
 8008edc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ee0:	d100      	bne.n	8008ee4 <memcpy+0xc>
 8008ee2:	4770      	bx	lr
 8008ee4:	b510      	push	{r4, lr}
 8008ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008eee:	4291      	cmp	r1, r2
 8008ef0:	d1f9      	bne.n	8008ee6 <memcpy+0xe>
 8008ef2:	bd10      	pop	{r4, pc}

08008ef4 <__malloc_lock>:
 8008ef4:	4801      	ldr	r0, [pc, #4]	; (8008efc <__malloc_lock+0x8>)
 8008ef6:	f000 bd22 	b.w	800993e <__retarget_lock_acquire_recursive>
 8008efa:	bf00      	nop
 8008efc:	20000560 	.word	0x20000560

08008f00 <__malloc_unlock>:
 8008f00:	4801      	ldr	r0, [pc, #4]	; (8008f08 <__malloc_unlock+0x8>)
 8008f02:	f000 bd1d 	b.w	8009940 <__retarget_lock_release_recursive>
 8008f06:	bf00      	nop
 8008f08:	20000560 	.word	0x20000560

08008f0c <_Balloc>:
 8008f0c:	b570      	push	{r4, r5, r6, lr}
 8008f0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f10:	4604      	mov	r4, r0
 8008f12:	460d      	mov	r5, r1
 8008f14:	b976      	cbnz	r6, 8008f34 <_Balloc+0x28>
 8008f16:	2010      	movs	r0, #16
 8008f18:	f7fe fbf2 	bl	8007700 <malloc>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	6260      	str	r0, [r4, #36]	; 0x24
 8008f20:	b920      	cbnz	r0, 8008f2c <_Balloc+0x20>
 8008f22:	4b18      	ldr	r3, [pc, #96]	; (8008f84 <_Balloc+0x78>)
 8008f24:	4818      	ldr	r0, [pc, #96]	; (8008f88 <_Balloc+0x7c>)
 8008f26:	2166      	movs	r1, #102	; 0x66
 8008f28:	f000 fcd8 	bl	80098dc <__assert_func>
 8008f2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f30:	6006      	str	r6, [r0, #0]
 8008f32:	60c6      	str	r6, [r0, #12]
 8008f34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f36:	68f3      	ldr	r3, [r6, #12]
 8008f38:	b183      	cbz	r3, 8008f5c <_Balloc+0x50>
 8008f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f42:	b9b8      	cbnz	r0, 8008f74 <_Balloc+0x68>
 8008f44:	2101      	movs	r1, #1
 8008f46:	fa01 f605 	lsl.w	r6, r1, r5
 8008f4a:	1d72      	adds	r2, r6, #5
 8008f4c:	0092      	lsls	r2, r2, #2
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f000 fb5a 	bl	8009608 <_calloc_r>
 8008f54:	b160      	cbz	r0, 8008f70 <_Balloc+0x64>
 8008f56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f5a:	e00e      	b.n	8008f7a <_Balloc+0x6e>
 8008f5c:	2221      	movs	r2, #33	; 0x21
 8008f5e:	2104      	movs	r1, #4
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 fb51 	bl	8009608 <_calloc_r>
 8008f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f68:	60f0      	str	r0, [r6, #12]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e4      	bne.n	8008f3a <_Balloc+0x2e>
 8008f70:	2000      	movs	r0, #0
 8008f72:	bd70      	pop	{r4, r5, r6, pc}
 8008f74:	6802      	ldr	r2, [r0, #0]
 8008f76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f80:	e7f7      	b.n	8008f72 <_Balloc+0x66>
 8008f82:	bf00      	nop
 8008f84:	0800a551 	.word	0x0800a551
 8008f88:	0800a5d8 	.word	0x0800a5d8

08008f8c <_Bfree>:
 8008f8c:	b570      	push	{r4, r5, r6, lr}
 8008f8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f90:	4605      	mov	r5, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	b976      	cbnz	r6, 8008fb4 <_Bfree+0x28>
 8008f96:	2010      	movs	r0, #16
 8008f98:	f7fe fbb2 	bl	8007700 <malloc>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	6268      	str	r0, [r5, #36]	; 0x24
 8008fa0:	b920      	cbnz	r0, 8008fac <_Bfree+0x20>
 8008fa2:	4b09      	ldr	r3, [pc, #36]	; (8008fc8 <_Bfree+0x3c>)
 8008fa4:	4809      	ldr	r0, [pc, #36]	; (8008fcc <_Bfree+0x40>)
 8008fa6:	218a      	movs	r1, #138	; 0x8a
 8008fa8:	f000 fc98 	bl	80098dc <__assert_func>
 8008fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fb0:	6006      	str	r6, [r0, #0]
 8008fb2:	60c6      	str	r6, [r0, #12]
 8008fb4:	b13c      	cbz	r4, 8008fc6 <_Bfree+0x3a>
 8008fb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008fb8:	6862      	ldr	r2, [r4, #4]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fc0:	6021      	str	r1, [r4, #0]
 8008fc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fc6:	bd70      	pop	{r4, r5, r6, pc}
 8008fc8:	0800a551 	.word	0x0800a551
 8008fcc:	0800a5d8 	.word	0x0800a5d8

08008fd0 <__multadd>:
 8008fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd4:	690e      	ldr	r6, [r1, #16]
 8008fd6:	4607      	mov	r7, r0
 8008fd8:	4698      	mov	r8, r3
 8008fda:	460c      	mov	r4, r1
 8008fdc:	f101 0014 	add.w	r0, r1, #20
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	6805      	ldr	r5, [r0, #0]
 8008fe4:	b2a9      	uxth	r1, r5
 8008fe6:	fb02 8101 	mla	r1, r2, r1, r8
 8008fea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008fee:	0c2d      	lsrs	r5, r5, #16
 8008ff0:	fb02 c505 	mla	r5, r2, r5, ip
 8008ff4:	b289      	uxth	r1, r1
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008ffc:	429e      	cmp	r6, r3
 8008ffe:	f840 1b04 	str.w	r1, [r0], #4
 8009002:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009006:	dcec      	bgt.n	8008fe2 <__multadd+0x12>
 8009008:	f1b8 0f00 	cmp.w	r8, #0
 800900c:	d022      	beq.n	8009054 <__multadd+0x84>
 800900e:	68a3      	ldr	r3, [r4, #8]
 8009010:	42b3      	cmp	r3, r6
 8009012:	dc19      	bgt.n	8009048 <__multadd+0x78>
 8009014:	6861      	ldr	r1, [r4, #4]
 8009016:	4638      	mov	r0, r7
 8009018:	3101      	adds	r1, #1
 800901a:	f7ff ff77 	bl	8008f0c <_Balloc>
 800901e:	4605      	mov	r5, r0
 8009020:	b928      	cbnz	r0, 800902e <__multadd+0x5e>
 8009022:	4602      	mov	r2, r0
 8009024:	4b0d      	ldr	r3, [pc, #52]	; (800905c <__multadd+0x8c>)
 8009026:	480e      	ldr	r0, [pc, #56]	; (8009060 <__multadd+0x90>)
 8009028:	21b5      	movs	r1, #181	; 0xb5
 800902a:	f000 fc57 	bl	80098dc <__assert_func>
 800902e:	6922      	ldr	r2, [r4, #16]
 8009030:	3202      	adds	r2, #2
 8009032:	f104 010c 	add.w	r1, r4, #12
 8009036:	0092      	lsls	r2, r2, #2
 8009038:	300c      	adds	r0, #12
 800903a:	f7ff ff4d 	bl	8008ed8 <memcpy>
 800903e:	4621      	mov	r1, r4
 8009040:	4638      	mov	r0, r7
 8009042:	f7ff ffa3 	bl	8008f8c <_Bfree>
 8009046:	462c      	mov	r4, r5
 8009048:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800904c:	3601      	adds	r6, #1
 800904e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009052:	6126      	str	r6, [r4, #16]
 8009054:	4620      	mov	r0, r4
 8009056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800905a:	bf00      	nop
 800905c:	0800a5c7 	.word	0x0800a5c7
 8009060:	0800a5d8 	.word	0x0800a5d8

08009064 <__hi0bits>:
 8009064:	0c03      	lsrs	r3, r0, #16
 8009066:	041b      	lsls	r3, r3, #16
 8009068:	b9d3      	cbnz	r3, 80090a0 <__hi0bits+0x3c>
 800906a:	0400      	lsls	r0, r0, #16
 800906c:	2310      	movs	r3, #16
 800906e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009072:	bf04      	itt	eq
 8009074:	0200      	lsleq	r0, r0, #8
 8009076:	3308      	addeq	r3, #8
 8009078:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800907c:	bf04      	itt	eq
 800907e:	0100      	lsleq	r0, r0, #4
 8009080:	3304      	addeq	r3, #4
 8009082:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009086:	bf04      	itt	eq
 8009088:	0080      	lsleq	r0, r0, #2
 800908a:	3302      	addeq	r3, #2
 800908c:	2800      	cmp	r0, #0
 800908e:	db05      	blt.n	800909c <__hi0bits+0x38>
 8009090:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009094:	f103 0301 	add.w	r3, r3, #1
 8009098:	bf08      	it	eq
 800909a:	2320      	moveq	r3, #32
 800909c:	4618      	mov	r0, r3
 800909e:	4770      	bx	lr
 80090a0:	2300      	movs	r3, #0
 80090a2:	e7e4      	b.n	800906e <__hi0bits+0xa>

080090a4 <__lo0bits>:
 80090a4:	6803      	ldr	r3, [r0, #0]
 80090a6:	f013 0207 	ands.w	r2, r3, #7
 80090aa:	4601      	mov	r1, r0
 80090ac:	d00b      	beq.n	80090c6 <__lo0bits+0x22>
 80090ae:	07da      	lsls	r2, r3, #31
 80090b0:	d424      	bmi.n	80090fc <__lo0bits+0x58>
 80090b2:	0798      	lsls	r0, r3, #30
 80090b4:	bf49      	itett	mi
 80090b6:	085b      	lsrmi	r3, r3, #1
 80090b8:	089b      	lsrpl	r3, r3, #2
 80090ba:	2001      	movmi	r0, #1
 80090bc:	600b      	strmi	r3, [r1, #0]
 80090be:	bf5c      	itt	pl
 80090c0:	600b      	strpl	r3, [r1, #0]
 80090c2:	2002      	movpl	r0, #2
 80090c4:	4770      	bx	lr
 80090c6:	b298      	uxth	r0, r3
 80090c8:	b9b0      	cbnz	r0, 80090f8 <__lo0bits+0x54>
 80090ca:	0c1b      	lsrs	r3, r3, #16
 80090cc:	2010      	movs	r0, #16
 80090ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80090d2:	bf04      	itt	eq
 80090d4:	0a1b      	lsreq	r3, r3, #8
 80090d6:	3008      	addeq	r0, #8
 80090d8:	071a      	lsls	r2, r3, #28
 80090da:	bf04      	itt	eq
 80090dc:	091b      	lsreq	r3, r3, #4
 80090de:	3004      	addeq	r0, #4
 80090e0:	079a      	lsls	r2, r3, #30
 80090e2:	bf04      	itt	eq
 80090e4:	089b      	lsreq	r3, r3, #2
 80090e6:	3002      	addeq	r0, #2
 80090e8:	07da      	lsls	r2, r3, #31
 80090ea:	d403      	bmi.n	80090f4 <__lo0bits+0x50>
 80090ec:	085b      	lsrs	r3, r3, #1
 80090ee:	f100 0001 	add.w	r0, r0, #1
 80090f2:	d005      	beq.n	8009100 <__lo0bits+0x5c>
 80090f4:	600b      	str	r3, [r1, #0]
 80090f6:	4770      	bx	lr
 80090f8:	4610      	mov	r0, r2
 80090fa:	e7e8      	b.n	80090ce <__lo0bits+0x2a>
 80090fc:	2000      	movs	r0, #0
 80090fe:	4770      	bx	lr
 8009100:	2020      	movs	r0, #32
 8009102:	4770      	bx	lr

08009104 <__i2b>:
 8009104:	b510      	push	{r4, lr}
 8009106:	460c      	mov	r4, r1
 8009108:	2101      	movs	r1, #1
 800910a:	f7ff feff 	bl	8008f0c <_Balloc>
 800910e:	4602      	mov	r2, r0
 8009110:	b928      	cbnz	r0, 800911e <__i2b+0x1a>
 8009112:	4b05      	ldr	r3, [pc, #20]	; (8009128 <__i2b+0x24>)
 8009114:	4805      	ldr	r0, [pc, #20]	; (800912c <__i2b+0x28>)
 8009116:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800911a:	f000 fbdf 	bl	80098dc <__assert_func>
 800911e:	2301      	movs	r3, #1
 8009120:	6144      	str	r4, [r0, #20]
 8009122:	6103      	str	r3, [r0, #16]
 8009124:	bd10      	pop	{r4, pc}
 8009126:	bf00      	nop
 8009128:	0800a5c7 	.word	0x0800a5c7
 800912c:	0800a5d8 	.word	0x0800a5d8

08009130 <__multiply>:
 8009130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009134:	4614      	mov	r4, r2
 8009136:	690a      	ldr	r2, [r1, #16]
 8009138:	6923      	ldr	r3, [r4, #16]
 800913a:	429a      	cmp	r2, r3
 800913c:	bfb8      	it	lt
 800913e:	460b      	movlt	r3, r1
 8009140:	460d      	mov	r5, r1
 8009142:	bfbc      	itt	lt
 8009144:	4625      	movlt	r5, r4
 8009146:	461c      	movlt	r4, r3
 8009148:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800914c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009150:	68ab      	ldr	r3, [r5, #8]
 8009152:	6869      	ldr	r1, [r5, #4]
 8009154:	eb0a 0709 	add.w	r7, sl, r9
 8009158:	42bb      	cmp	r3, r7
 800915a:	b085      	sub	sp, #20
 800915c:	bfb8      	it	lt
 800915e:	3101      	addlt	r1, #1
 8009160:	f7ff fed4 	bl	8008f0c <_Balloc>
 8009164:	b930      	cbnz	r0, 8009174 <__multiply+0x44>
 8009166:	4602      	mov	r2, r0
 8009168:	4b42      	ldr	r3, [pc, #264]	; (8009274 <__multiply+0x144>)
 800916a:	4843      	ldr	r0, [pc, #268]	; (8009278 <__multiply+0x148>)
 800916c:	f240 115d 	movw	r1, #349	; 0x15d
 8009170:	f000 fbb4 	bl	80098dc <__assert_func>
 8009174:	f100 0614 	add.w	r6, r0, #20
 8009178:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800917c:	4633      	mov	r3, r6
 800917e:	2200      	movs	r2, #0
 8009180:	4543      	cmp	r3, r8
 8009182:	d31e      	bcc.n	80091c2 <__multiply+0x92>
 8009184:	f105 0c14 	add.w	ip, r5, #20
 8009188:	f104 0314 	add.w	r3, r4, #20
 800918c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009190:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009194:	9202      	str	r2, [sp, #8]
 8009196:	ebac 0205 	sub.w	r2, ip, r5
 800919a:	3a15      	subs	r2, #21
 800919c:	f022 0203 	bic.w	r2, r2, #3
 80091a0:	3204      	adds	r2, #4
 80091a2:	f105 0115 	add.w	r1, r5, #21
 80091a6:	458c      	cmp	ip, r1
 80091a8:	bf38      	it	cc
 80091aa:	2204      	movcc	r2, #4
 80091ac:	9201      	str	r2, [sp, #4]
 80091ae:	9a02      	ldr	r2, [sp, #8]
 80091b0:	9303      	str	r3, [sp, #12]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d808      	bhi.n	80091c8 <__multiply+0x98>
 80091b6:	2f00      	cmp	r7, #0
 80091b8:	dc55      	bgt.n	8009266 <__multiply+0x136>
 80091ba:	6107      	str	r7, [r0, #16]
 80091bc:	b005      	add	sp, #20
 80091be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c2:	f843 2b04 	str.w	r2, [r3], #4
 80091c6:	e7db      	b.n	8009180 <__multiply+0x50>
 80091c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80091cc:	f1ba 0f00 	cmp.w	sl, #0
 80091d0:	d020      	beq.n	8009214 <__multiply+0xe4>
 80091d2:	f105 0e14 	add.w	lr, r5, #20
 80091d6:	46b1      	mov	r9, r6
 80091d8:	2200      	movs	r2, #0
 80091da:	f85e 4b04 	ldr.w	r4, [lr], #4
 80091de:	f8d9 b000 	ldr.w	fp, [r9]
 80091e2:	b2a1      	uxth	r1, r4
 80091e4:	fa1f fb8b 	uxth.w	fp, fp
 80091e8:	fb0a b101 	mla	r1, sl, r1, fp
 80091ec:	4411      	add	r1, r2
 80091ee:	f8d9 2000 	ldr.w	r2, [r9]
 80091f2:	0c24      	lsrs	r4, r4, #16
 80091f4:	0c12      	lsrs	r2, r2, #16
 80091f6:	fb0a 2404 	mla	r4, sl, r4, r2
 80091fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80091fe:	b289      	uxth	r1, r1
 8009200:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009204:	45f4      	cmp	ip, lr
 8009206:	f849 1b04 	str.w	r1, [r9], #4
 800920a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800920e:	d8e4      	bhi.n	80091da <__multiply+0xaa>
 8009210:	9901      	ldr	r1, [sp, #4]
 8009212:	5072      	str	r2, [r6, r1]
 8009214:	9a03      	ldr	r2, [sp, #12]
 8009216:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800921a:	3304      	adds	r3, #4
 800921c:	f1b9 0f00 	cmp.w	r9, #0
 8009220:	d01f      	beq.n	8009262 <__multiply+0x132>
 8009222:	6834      	ldr	r4, [r6, #0]
 8009224:	f105 0114 	add.w	r1, r5, #20
 8009228:	46b6      	mov	lr, r6
 800922a:	f04f 0a00 	mov.w	sl, #0
 800922e:	880a      	ldrh	r2, [r1, #0]
 8009230:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009234:	fb09 b202 	mla	r2, r9, r2, fp
 8009238:	4492      	add	sl, r2
 800923a:	b2a4      	uxth	r4, r4
 800923c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009240:	f84e 4b04 	str.w	r4, [lr], #4
 8009244:	f851 4b04 	ldr.w	r4, [r1], #4
 8009248:	f8be 2000 	ldrh.w	r2, [lr]
 800924c:	0c24      	lsrs	r4, r4, #16
 800924e:	fb09 2404 	mla	r4, r9, r4, r2
 8009252:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009256:	458c      	cmp	ip, r1
 8009258:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800925c:	d8e7      	bhi.n	800922e <__multiply+0xfe>
 800925e:	9a01      	ldr	r2, [sp, #4]
 8009260:	50b4      	str	r4, [r6, r2]
 8009262:	3604      	adds	r6, #4
 8009264:	e7a3      	b.n	80091ae <__multiply+0x7e>
 8009266:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1a5      	bne.n	80091ba <__multiply+0x8a>
 800926e:	3f01      	subs	r7, #1
 8009270:	e7a1      	b.n	80091b6 <__multiply+0x86>
 8009272:	bf00      	nop
 8009274:	0800a5c7 	.word	0x0800a5c7
 8009278:	0800a5d8 	.word	0x0800a5d8

0800927c <__pow5mult>:
 800927c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009280:	4615      	mov	r5, r2
 8009282:	f012 0203 	ands.w	r2, r2, #3
 8009286:	4606      	mov	r6, r0
 8009288:	460f      	mov	r7, r1
 800928a:	d007      	beq.n	800929c <__pow5mult+0x20>
 800928c:	4c25      	ldr	r4, [pc, #148]	; (8009324 <__pow5mult+0xa8>)
 800928e:	3a01      	subs	r2, #1
 8009290:	2300      	movs	r3, #0
 8009292:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009296:	f7ff fe9b 	bl	8008fd0 <__multadd>
 800929a:	4607      	mov	r7, r0
 800929c:	10ad      	asrs	r5, r5, #2
 800929e:	d03d      	beq.n	800931c <__pow5mult+0xa0>
 80092a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80092a2:	b97c      	cbnz	r4, 80092c4 <__pow5mult+0x48>
 80092a4:	2010      	movs	r0, #16
 80092a6:	f7fe fa2b 	bl	8007700 <malloc>
 80092aa:	4602      	mov	r2, r0
 80092ac:	6270      	str	r0, [r6, #36]	; 0x24
 80092ae:	b928      	cbnz	r0, 80092bc <__pow5mult+0x40>
 80092b0:	4b1d      	ldr	r3, [pc, #116]	; (8009328 <__pow5mult+0xac>)
 80092b2:	481e      	ldr	r0, [pc, #120]	; (800932c <__pow5mult+0xb0>)
 80092b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80092b8:	f000 fb10 	bl	80098dc <__assert_func>
 80092bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092c0:	6004      	str	r4, [r0, #0]
 80092c2:	60c4      	str	r4, [r0, #12]
 80092c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80092c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092cc:	b94c      	cbnz	r4, 80092e2 <__pow5mult+0x66>
 80092ce:	f240 2171 	movw	r1, #625	; 0x271
 80092d2:	4630      	mov	r0, r6
 80092d4:	f7ff ff16 	bl	8009104 <__i2b>
 80092d8:	2300      	movs	r3, #0
 80092da:	f8c8 0008 	str.w	r0, [r8, #8]
 80092de:	4604      	mov	r4, r0
 80092e0:	6003      	str	r3, [r0, #0]
 80092e2:	f04f 0900 	mov.w	r9, #0
 80092e6:	07eb      	lsls	r3, r5, #31
 80092e8:	d50a      	bpl.n	8009300 <__pow5mult+0x84>
 80092ea:	4639      	mov	r1, r7
 80092ec:	4622      	mov	r2, r4
 80092ee:	4630      	mov	r0, r6
 80092f0:	f7ff ff1e 	bl	8009130 <__multiply>
 80092f4:	4639      	mov	r1, r7
 80092f6:	4680      	mov	r8, r0
 80092f8:	4630      	mov	r0, r6
 80092fa:	f7ff fe47 	bl	8008f8c <_Bfree>
 80092fe:	4647      	mov	r7, r8
 8009300:	106d      	asrs	r5, r5, #1
 8009302:	d00b      	beq.n	800931c <__pow5mult+0xa0>
 8009304:	6820      	ldr	r0, [r4, #0]
 8009306:	b938      	cbnz	r0, 8009318 <__pow5mult+0x9c>
 8009308:	4622      	mov	r2, r4
 800930a:	4621      	mov	r1, r4
 800930c:	4630      	mov	r0, r6
 800930e:	f7ff ff0f 	bl	8009130 <__multiply>
 8009312:	6020      	str	r0, [r4, #0]
 8009314:	f8c0 9000 	str.w	r9, [r0]
 8009318:	4604      	mov	r4, r0
 800931a:	e7e4      	b.n	80092e6 <__pow5mult+0x6a>
 800931c:	4638      	mov	r0, r7
 800931e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009322:	bf00      	nop
 8009324:	0800a728 	.word	0x0800a728
 8009328:	0800a551 	.word	0x0800a551
 800932c:	0800a5d8 	.word	0x0800a5d8

08009330 <__lshift>:
 8009330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009334:	460c      	mov	r4, r1
 8009336:	6849      	ldr	r1, [r1, #4]
 8009338:	6923      	ldr	r3, [r4, #16]
 800933a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800933e:	68a3      	ldr	r3, [r4, #8]
 8009340:	4607      	mov	r7, r0
 8009342:	4691      	mov	r9, r2
 8009344:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009348:	f108 0601 	add.w	r6, r8, #1
 800934c:	42b3      	cmp	r3, r6
 800934e:	db0b      	blt.n	8009368 <__lshift+0x38>
 8009350:	4638      	mov	r0, r7
 8009352:	f7ff fddb 	bl	8008f0c <_Balloc>
 8009356:	4605      	mov	r5, r0
 8009358:	b948      	cbnz	r0, 800936e <__lshift+0x3e>
 800935a:	4602      	mov	r2, r0
 800935c:	4b28      	ldr	r3, [pc, #160]	; (8009400 <__lshift+0xd0>)
 800935e:	4829      	ldr	r0, [pc, #164]	; (8009404 <__lshift+0xd4>)
 8009360:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009364:	f000 faba 	bl	80098dc <__assert_func>
 8009368:	3101      	adds	r1, #1
 800936a:	005b      	lsls	r3, r3, #1
 800936c:	e7ee      	b.n	800934c <__lshift+0x1c>
 800936e:	2300      	movs	r3, #0
 8009370:	f100 0114 	add.w	r1, r0, #20
 8009374:	f100 0210 	add.w	r2, r0, #16
 8009378:	4618      	mov	r0, r3
 800937a:	4553      	cmp	r3, sl
 800937c:	db33      	blt.n	80093e6 <__lshift+0xb6>
 800937e:	6920      	ldr	r0, [r4, #16]
 8009380:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009384:	f104 0314 	add.w	r3, r4, #20
 8009388:	f019 091f 	ands.w	r9, r9, #31
 800938c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009390:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009394:	d02b      	beq.n	80093ee <__lshift+0xbe>
 8009396:	f1c9 0e20 	rsb	lr, r9, #32
 800939a:	468a      	mov	sl, r1
 800939c:	2200      	movs	r2, #0
 800939e:	6818      	ldr	r0, [r3, #0]
 80093a0:	fa00 f009 	lsl.w	r0, r0, r9
 80093a4:	4302      	orrs	r2, r0
 80093a6:	f84a 2b04 	str.w	r2, [sl], #4
 80093aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ae:	459c      	cmp	ip, r3
 80093b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80093b4:	d8f3      	bhi.n	800939e <__lshift+0x6e>
 80093b6:	ebac 0304 	sub.w	r3, ip, r4
 80093ba:	3b15      	subs	r3, #21
 80093bc:	f023 0303 	bic.w	r3, r3, #3
 80093c0:	3304      	adds	r3, #4
 80093c2:	f104 0015 	add.w	r0, r4, #21
 80093c6:	4584      	cmp	ip, r0
 80093c8:	bf38      	it	cc
 80093ca:	2304      	movcc	r3, #4
 80093cc:	50ca      	str	r2, [r1, r3]
 80093ce:	b10a      	cbz	r2, 80093d4 <__lshift+0xa4>
 80093d0:	f108 0602 	add.w	r6, r8, #2
 80093d4:	3e01      	subs	r6, #1
 80093d6:	4638      	mov	r0, r7
 80093d8:	612e      	str	r6, [r5, #16]
 80093da:	4621      	mov	r1, r4
 80093dc:	f7ff fdd6 	bl	8008f8c <_Bfree>
 80093e0:	4628      	mov	r0, r5
 80093e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80093ea:	3301      	adds	r3, #1
 80093ec:	e7c5      	b.n	800937a <__lshift+0x4a>
 80093ee:	3904      	subs	r1, #4
 80093f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80093f8:	459c      	cmp	ip, r3
 80093fa:	d8f9      	bhi.n	80093f0 <__lshift+0xc0>
 80093fc:	e7ea      	b.n	80093d4 <__lshift+0xa4>
 80093fe:	bf00      	nop
 8009400:	0800a5c7 	.word	0x0800a5c7
 8009404:	0800a5d8 	.word	0x0800a5d8

08009408 <__mcmp>:
 8009408:	b530      	push	{r4, r5, lr}
 800940a:	6902      	ldr	r2, [r0, #16]
 800940c:	690c      	ldr	r4, [r1, #16]
 800940e:	1b12      	subs	r2, r2, r4
 8009410:	d10e      	bne.n	8009430 <__mcmp+0x28>
 8009412:	f100 0314 	add.w	r3, r0, #20
 8009416:	3114      	adds	r1, #20
 8009418:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800941c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009420:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009424:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009428:	42a5      	cmp	r5, r4
 800942a:	d003      	beq.n	8009434 <__mcmp+0x2c>
 800942c:	d305      	bcc.n	800943a <__mcmp+0x32>
 800942e:	2201      	movs	r2, #1
 8009430:	4610      	mov	r0, r2
 8009432:	bd30      	pop	{r4, r5, pc}
 8009434:	4283      	cmp	r3, r0
 8009436:	d3f3      	bcc.n	8009420 <__mcmp+0x18>
 8009438:	e7fa      	b.n	8009430 <__mcmp+0x28>
 800943a:	f04f 32ff 	mov.w	r2, #4294967295
 800943e:	e7f7      	b.n	8009430 <__mcmp+0x28>

08009440 <__mdiff>:
 8009440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009444:	460c      	mov	r4, r1
 8009446:	4606      	mov	r6, r0
 8009448:	4611      	mov	r1, r2
 800944a:	4620      	mov	r0, r4
 800944c:	4617      	mov	r7, r2
 800944e:	f7ff ffdb 	bl	8009408 <__mcmp>
 8009452:	1e05      	subs	r5, r0, #0
 8009454:	d110      	bne.n	8009478 <__mdiff+0x38>
 8009456:	4629      	mov	r1, r5
 8009458:	4630      	mov	r0, r6
 800945a:	f7ff fd57 	bl	8008f0c <_Balloc>
 800945e:	b930      	cbnz	r0, 800946e <__mdiff+0x2e>
 8009460:	4b39      	ldr	r3, [pc, #228]	; (8009548 <__mdiff+0x108>)
 8009462:	4602      	mov	r2, r0
 8009464:	f240 2132 	movw	r1, #562	; 0x232
 8009468:	4838      	ldr	r0, [pc, #224]	; (800954c <__mdiff+0x10c>)
 800946a:	f000 fa37 	bl	80098dc <__assert_func>
 800946e:	2301      	movs	r3, #1
 8009470:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009478:	bfa4      	itt	ge
 800947a:	463b      	movge	r3, r7
 800947c:	4627      	movge	r7, r4
 800947e:	4630      	mov	r0, r6
 8009480:	6879      	ldr	r1, [r7, #4]
 8009482:	bfa6      	itte	ge
 8009484:	461c      	movge	r4, r3
 8009486:	2500      	movge	r5, #0
 8009488:	2501      	movlt	r5, #1
 800948a:	f7ff fd3f 	bl	8008f0c <_Balloc>
 800948e:	b920      	cbnz	r0, 800949a <__mdiff+0x5a>
 8009490:	4b2d      	ldr	r3, [pc, #180]	; (8009548 <__mdiff+0x108>)
 8009492:	4602      	mov	r2, r0
 8009494:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009498:	e7e6      	b.n	8009468 <__mdiff+0x28>
 800949a:	693e      	ldr	r6, [r7, #16]
 800949c:	60c5      	str	r5, [r0, #12]
 800949e:	6925      	ldr	r5, [r4, #16]
 80094a0:	f107 0114 	add.w	r1, r7, #20
 80094a4:	f104 0914 	add.w	r9, r4, #20
 80094a8:	f100 0e14 	add.w	lr, r0, #20
 80094ac:	f107 0210 	add.w	r2, r7, #16
 80094b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80094b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80094b8:	46f2      	mov	sl, lr
 80094ba:	2700      	movs	r7, #0
 80094bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80094c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094c4:	fa1f f883 	uxth.w	r8, r3
 80094c8:	fa17 f78b 	uxtah	r7, r7, fp
 80094cc:	0c1b      	lsrs	r3, r3, #16
 80094ce:	eba7 0808 	sub.w	r8, r7, r8
 80094d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094da:	fa1f f888 	uxth.w	r8, r8
 80094de:	141f      	asrs	r7, r3, #16
 80094e0:	454d      	cmp	r5, r9
 80094e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094e6:	f84a 3b04 	str.w	r3, [sl], #4
 80094ea:	d8e7      	bhi.n	80094bc <__mdiff+0x7c>
 80094ec:	1b2b      	subs	r3, r5, r4
 80094ee:	3b15      	subs	r3, #21
 80094f0:	f023 0303 	bic.w	r3, r3, #3
 80094f4:	3304      	adds	r3, #4
 80094f6:	3415      	adds	r4, #21
 80094f8:	42a5      	cmp	r5, r4
 80094fa:	bf38      	it	cc
 80094fc:	2304      	movcc	r3, #4
 80094fe:	4419      	add	r1, r3
 8009500:	4473      	add	r3, lr
 8009502:	469e      	mov	lr, r3
 8009504:	460d      	mov	r5, r1
 8009506:	4565      	cmp	r5, ip
 8009508:	d30e      	bcc.n	8009528 <__mdiff+0xe8>
 800950a:	f10c 0203 	add.w	r2, ip, #3
 800950e:	1a52      	subs	r2, r2, r1
 8009510:	f022 0203 	bic.w	r2, r2, #3
 8009514:	3903      	subs	r1, #3
 8009516:	458c      	cmp	ip, r1
 8009518:	bf38      	it	cc
 800951a:	2200      	movcc	r2, #0
 800951c:	441a      	add	r2, r3
 800951e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009522:	b17b      	cbz	r3, 8009544 <__mdiff+0x104>
 8009524:	6106      	str	r6, [r0, #16]
 8009526:	e7a5      	b.n	8009474 <__mdiff+0x34>
 8009528:	f855 8b04 	ldr.w	r8, [r5], #4
 800952c:	fa17 f488 	uxtah	r4, r7, r8
 8009530:	1422      	asrs	r2, r4, #16
 8009532:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009536:	b2a4      	uxth	r4, r4
 8009538:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800953c:	f84e 4b04 	str.w	r4, [lr], #4
 8009540:	1417      	asrs	r7, r2, #16
 8009542:	e7e0      	b.n	8009506 <__mdiff+0xc6>
 8009544:	3e01      	subs	r6, #1
 8009546:	e7ea      	b.n	800951e <__mdiff+0xde>
 8009548:	0800a5c7 	.word	0x0800a5c7
 800954c:	0800a5d8 	.word	0x0800a5d8

08009550 <__d2b>:
 8009550:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009554:	4689      	mov	r9, r1
 8009556:	2101      	movs	r1, #1
 8009558:	ec57 6b10 	vmov	r6, r7, d0
 800955c:	4690      	mov	r8, r2
 800955e:	f7ff fcd5 	bl	8008f0c <_Balloc>
 8009562:	4604      	mov	r4, r0
 8009564:	b930      	cbnz	r0, 8009574 <__d2b+0x24>
 8009566:	4602      	mov	r2, r0
 8009568:	4b25      	ldr	r3, [pc, #148]	; (8009600 <__d2b+0xb0>)
 800956a:	4826      	ldr	r0, [pc, #152]	; (8009604 <__d2b+0xb4>)
 800956c:	f240 310a 	movw	r1, #778	; 0x30a
 8009570:	f000 f9b4 	bl	80098dc <__assert_func>
 8009574:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009578:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800957c:	bb35      	cbnz	r5, 80095cc <__d2b+0x7c>
 800957e:	2e00      	cmp	r6, #0
 8009580:	9301      	str	r3, [sp, #4]
 8009582:	d028      	beq.n	80095d6 <__d2b+0x86>
 8009584:	4668      	mov	r0, sp
 8009586:	9600      	str	r6, [sp, #0]
 8009588:	f7ff fd8c 	bl	80090a4 <__lo0bits>
 800958c:	9900      	ldr	r1, [sp, #0]
 800958e:	b300      	cbz	r0, 80095d2 <__d2b+0x82>
 8009590:	9a01      	ldr	r2, [sp, #4]
 8009592:	f1c0 0320 	rsb	r3, r0, #32
 8009596:	fa02 f303 	lsl.w	r3, r2, r3
 800959a:	430b      	orrs	r3, r1
 800959c:	40c2      	lsrs	r2, r0
 800959e:	6163      	str	r3, [r4, #20]
 80095a0:	9201      	str	r2, [sp, #4]
 80095a2:	9b01      	ldr	r3, [sp, #4]
 80095a4:	61a3      	str	r3, [r4, #24]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	bf14      	ite	ne
 80095aa:	2202      	movne	r2, #2
 80095ac:	2201      	moveq	r2, #1
 80095ae:	6122      	str	r2, [r4, #16]
 80095b0:	b1d5      	cbz	r5, 80095e8 <__d2b+0x98>
 80095b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80095b6:	4405      	add	r5, r0
 80095b8:	f8c9 5000 	str.w	r5, [r9]
 80095bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095c0:	f8c8 0000 	str.w	r0, [r8]
 80095c4:	4620      	mov	r0, r4
 80095c6:	b003      	add	sp, #12
 80095c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095d0:	e7d5      	b.n	800957e <__d2b+0x2e>
 80095d2:	6161      	str	r1, [r4, #20]
 80095d4:	e7e5      	b.n	80095a2 <__d2b+0x52>
 80095d6:	a801      	add	r0, sp, #4
 80095d8:	f7ff fd64 	bl	80090a4 <__lo0bits>
 80095dc:	9b01      	ldr	r3, [sp, #4]
 80095de:	6163      	str	r3, [r4, #20]
 80095e0:	2201      	movs	r2, #1
 80095e2:	6122      	str	r2, [r4, #16]
 80095e4:	3020      	adds	r0, #32
 80095e6:	e7e3      	b.n	80095b0 <__d2b+0x60>
 80095e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095f0:	f8c9 0000 	str.w	r0, [r9]
 80095f4:	6918      	ldr	r0, [r3, #16]
 80095f6:	f7ff fd35 	bl	8009064 <__hi0bits>
 80095fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095fe:	e7df      	b.n	80095c0 <__d2b+0x70>
 8009600:	0800a5c7 	.word	0x0800a5c7
 8009604:	0800a5d8 	.word	0x0800a5d8

08009608 <_calloc_r>:
 8009608:	b513      	push	{r0, r1, r4, lr}
 800960a:	434a      	muls	r2, r1
 800960c:	4611      	mov	r1, r2
 800960e:	9201      	str	r2, [sp, #4]
 8009610:	f7fe f8de 	bl	80077d0 <_malloc_r>
 8009614:	4604      	mov	r4, r0
 8009616:	b118      	cbz	r0, 8009620 <_calloc_r+0x18>
 8009618:	9a01      	ldr	r2, [sp, #4]
 800961a:	2100      	movs	r1, #0
 800961c:	f7fe f880 	bl	8007720 <memset>
 8009620:	4620      	mov	r0, r4
 8009622:	b002      	add	sp, #8
 8009624:	bd10      	pop	{r4, pc}

08009626 <__ssputs_r>:
 8009626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800962a:	688e      	ldr	r6, [r1, #8]
 800962c:	429e      	cmp	r6, r3
 800962e:	4682      	mov	sl, r0
 8009630:	460c      	mov	r4, r1
 8009632:	4690      	mov	r8, r2
 8009634:	461f      	mov	r7, r3
 8009636:	d838      	bhi.n	80096aa <__ssputs_r+0x84>
 8009638:	898a      	ldrh	r2, [r1, #12]
 800963a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800963e:	d032      	beq.n	80096a6 <__ssputs_r+0x80>
 8009640:	6825      	ldr	r5, [r4, #0]
 8009642:	6909      	ldr	r1, [r1, #16]
 8009644:	eba5 0901 	sub.w	r9, r5, r1
 8009648:	6965      	ldr	r5, [r4, #20]
 800964a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800964e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009652:	3301      	adds	r3, #1
 8009654:	444b      	add	r3, r9
 8009656:	106d      	asrs	r5, r5, #1
 8009658:	429d      	cmp	r5, r3
 800965a:	bf38      	it	cc
 800965c:	461d      	movcc	r5, r3
 800965e:	0553      	lsls	r3, r2, #21
 8009660:	d531      	bpl.n	80096c6 <__ssputs_r+0xa0>
 8009662:	4629      	mov	r1, r5
 8009664:	f7fe f8b4 	bl	80077d0 <_malloc_r>
 8009668:	4606      	mov	r6, r0
 800966a:	b950      	cbnz	r0, 8009682 <__ssputs_r+0x5c>
 800966c:	230c      	movs	r3, #12
 800966e:	f8ca 3000 	str.w	r3, [sl]
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009678:	81a3      	strh	r3, [r4, #12]
 800967a:	f04f 30ff 	mov.w	r0, #4294967295
 800967e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009682:	6921      	ldr	r1, [r4, #16]
 8009684:	464a      	mov	r2, r9
 8009686:	f7ff fc27 	bl	8008ed8 <memcpy>
 800968a:	89a3      	ldrh	r3, [r4, #12]
 800968c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009694:	81a3      	strh	r3, [r4, #12]
 8009696:	6126      	str	r6, [r4, #16]
 8009698:	6165      	str	r5, [r4, #20]
 800969a:	444e      	add	r6, r9
 800969c:	eba5 0509 	sub.w	r5, r5, r9
 80096a0:	6026      	str	r6, [r4, #0]
 80096a2:	60a5      	str	r5, [r4, #8]
 80096a4:	463e      	mov	r6, r7
 80096a6:	42be      	cmp	r6, r7
 80096a8:	d900      	bls.n	80096ac <__ssputs_r+0x86>
 80096aa:	463e      	mov	r6, r7
 80096ac:	4632      	mov	r2, r6
 80096ae:	6820      	ldr	r0, [r4, #0]
 80096b0:	4641      	mov	r1, r8
 80096b2:	f000 f958 	bl	8009966 <memmove>
 80096b6:	68a3      	ldr	r3, [r4, #8]
 80096b8:	6822      	ldr	r2, [r4, #0]
 80096ba:	1b9b      	subs	r3, r3, r6
 80096bc:	4432      	add	r2, r6
 80096be:	60a3      	str	r3, [r4, #8]
 80096c0:	6022      	str	r2, [r4, #0]
 80096c2:	2000      	movs	r0, #0
 80096c4:	e7db      	b.n	800967e <__ssputs_r+0x58>
 80096c6:	462a      	mov	r2, r5
 80096c8:	f000 f967 	bl	800999a <_realloc_r>
 80096cc:	4606      	mov	r6, r0
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d1e1      	bne.n	8009696 <__ssputs_r+0x70>
 80096d2:	6921      	ldr	r1, [r4, #16]
 80096d4:	4650      	mov	r0, sl
 80096d6:	f7fe f82b 	bl	8007730 <_free_r>
 80096da:	e7c7      	b.n	800966c <__ssputs_r+0x46>

080096dc <_svfiprintf_r>:
 80096dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e0:	4698      	mov	r8, r3
 80096e2:	898b      	ldrh	r3, [r1, #12]
 80096e4:	061b      	lsls	r3, r3, #24
 80096e6:	b09d      	sub	sp, #116	; 0x74
 80096e8:	4607      	mov	r7, r0
 80096ea:	460d      	mov	r5, r1
 80096ec:	4614      	mov	r4, r2
 80096ee:	d50e      	bpl.n	800970e <_svfiprintf_r+0x32>
 80096f0:	690b      	ldr	r3, [r1, #16]
 80096f2:	b963      	cbnz	r3, 800970e <_svfiprintf_r+0x32>
 80096f4:	2140      	movs	r1, #64	; 0x40
 80096f6:	f7fe f86b 	bl	80077d0 <_malloc_r>
 80096fa:	6028      	str	r0, [r5, #0]
 80096fc:	6128      	str	r0, [r5, #16]
 80096fe:	b920      	cbnz	r0, 800970a <_svfiprintf_r+0x2e>
 8009700:	230c      	movs	r3, #12
 8009702:	603b      	str	r3, [r7, #0]
 8009704:	f04f 30ff 	mov.w	r0, #4294967295
 8009708:	e0d1      	b.n	80098ae <_svfiprintf_r+0x1d2>
 800970a:	2340      	movs	r3, #64	; 0x40
 800970c:	616b      	str	r3, [r5, #20]
 800970e:	2300      	movs	r3, #0
 8009710:	9309      	str	r3, [sp, #36]	; 0x24
 8009712:	2320      	movs	r3, #32
 8009714:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009718:	f8cd 800c 	str.w	r8, [sp, #12]
 800971c:	2330      	movs	r3, #48	; 0x30
 800971e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80098c8 <_svfiprintf_r+0x1ec>
 8009722:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009726:	f04f 0901 	mov.w	r9, #1
 800972a:	4623      	mov	r3, r4
 800972c:	469a      	mov	sl, r3
 800972e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009732:	b10a      	cbz	r2, 8009738 <_svfiprintf_r+0x5c>
 8009734:	2a25      	cmp	r2, #37	; 0x25
 8009736:	d1f9      	bne.n	800972c <_svfiprintf_r+0x50>
 8009738:	ebba 0b04 	subs.w	fp, sl, r4
 800973c:	d00b      	beq.n	8009756 <_svfiprintf_r+0x7a>
 800973e:	465b      	mov	r3, fp
 8009740:	4622      	mov	r2, r4
 8009742:	4629      	mov	r1, r5
 8009744:	4638      	mov	r0, r7
 8009746:	f7ff ff6e 	bl	8009626 <__ssputs_r>
 800974a:	3001      	adds	r0, #1
 800974c:	f000 80aa 	beq.w	80098a4 <_svfiprintf_r+0x1c8>
 8009750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009752:	445a      	add	r2, fp
 8009754:	9209      	str	r2, [sp, #36]	; 0x24
 8009756:	f89a 3000 	ldrb.w	r3, [sl]
 800975a:	2b00      	cmp	r3, #0
 800975c:	f000 80a2 	beq.w	80098a4 <_svfiprintf_r+0x1c8>
 8009760:	2300      	movs	r3, #0
 8009762:	f04f 32ff 	mov.w	r2, #4294967295
 8009766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800976a:	f10a 0a01 	add.w	sl, sl, #1
 800976e:	9304      	str	r3, [sp, #16]
 8009770:	9307      	str	r3, [sp, #28]
 8009772:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009776:	931a      	str	r3, [sp, #104]	; 0x68
 8009778:	4654      	mov	r4, sl
 800977a:	2205      	movs	r2, #5
 800977c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009780:	4851      	ldr	r0, [pc, #324]	; (80098c8 <_svfiprintf_r+0x1ec>)
 8009782:	f7f6 fd2d 	bl	80001e0 <memchr>
 8009786:	9a04      	ldr	r2, [sp, #16]
 8009788:	b9d8      	cbnz	r0, 80097c2 <_svfiprintf_r+0xe6>
 800978a:	06d0      	lsls	r0, r2, #27
 800978c:	bf44      	itt	mi
 800978e:	2320      	movmi	r3, #32
 8009790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009794:	0711      	lsls	r1, r2, #28
 8009796:	bf44      	itt	mi
 8009798:	232b      	movmi	r3, #43	; 0x2b
 800979a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800979e:	f89a 3000 	ldrb.w	r3, [sl]
 80097a2:	2b2a      	cmp	r3, #42	; 0x2a
 80097a4:	d015      	beq.n	80097d2 <_svfiprintf_r+0xf6>
 80097a6:	9a07      	ldr	r2, [sp, #28]
 80097a8:	4654      	mov	r4, sl
 80097aa:	2000      	movs	r0, #0
 80097ac:	f04f 0c0a 	mov.w	ip, #10
 80097b0:	4621      	mov	r1, r4
 80097b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097b6:	3b30      	subs	r3, #48	; 0x30
 80097b8:	2b09      	cmp	r3, #9
 80097ba:	d94e      	bls.n	800985a <_svfiprintf_r+0x17e>
 80097bc:	b1b0      	cbz	r0, 80097ec <_svfiprintf_r+0x110>
 80097be:	9207      	str	r2, [sp, #28]
 80097c0:	e014      	b.n	80097ec <_svfiprintf_r+0x110>
 80097c2:	eba0 0308 	sub.w	r3, r0, r8
 80097c6:	fa09 f303 	lsl.w	r3, r9, r3
 80097ca:	4313      	orrs	r3, r2
 80097cc:	9304      	str	r3, [sp, #16]
 80097ce:	46a2      	mov	sl, r4
 80097d0:	e7d2      	b.n	8009778 <_svfiprintf_r+0x9c>
 80097d2:	9b03      	ldr	r3, [sp, #12]
 80097d4:	1d19      	adds	r1, r3, #4
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	9103      	str	r1, [sp, #12]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	bfbb      	ittet	lt
 80097de:	425b      	neglt	r3, r3
 80097e0:	f042 0202 	orrlt.w	r2, r2, #2
 80097e4:	9307      	strge	r3, [sp, #28]
 80097e6:	9307      	strlt	r3, [sp, #28]
 80097e8:	bfb8      	it	lt
 80097ea:	9204      	strlt	r2, [sp, #16]
 80097ec:	7823      	ldrb	r3, [r4, #0]
 80097ee:	2b2e      	cmp	r3, #46	; 0x2e
 80097f0:	d10c      	bne.n	800980c <_svfiprintf_r+0x130>
 80097f2:	7863      	ldrb	r3, [r4, #1]
 80097f4:	2b2a      	cmp	r3, #42	; 0x2a
 80097f6:	d135      	bne.n	8009864 <_svfiprintf_r+0x188>
 80097f8:	9b03      	ldr	r3, [sp, #12]
 80097fa:	1d1a      	adds	r2, r3, #4
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	9203      	str	r2, [sp, #12]
 8009800:	2b00      	cmp	r3, #0
 8009802:	bfb8      	it	lt
 8009804:	f04f 33ff 	movlt.w	r3, #4294967295
 8009808:	3402      	adds	r4, #2
 800980a:	9305      	str	r3, [sp, #20]
 800980c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80098d8 <_svfiprintf_r+0x1fc>
 8009810:	7821      	ldrb	r1, [r4, #0]
 8009812:	2203      	movs	r2, #3
 8009814:	4650      	mov	r0, sl
 8009816:	f7f6 fce3 	bl	80001e0 <memchr>
 800981a:	b140      	cbz	r0, 800982e <_svfiprintf_r+0x152>
 800981c:	2340      	movs	r3, #64	; 0x40
 800981e:	eba0 000a 	sub.w	r0, r0, sl
 8009822:	fa03 f000 	lsl.w	r0, r3, r0
 8009826:	9b04      	ldr	r3, [sp, #16]
 8009828:	4303      	orrs	r3, r0
 800982a:	3401      	adds	r4, #1
 800982c:	9304      	str	r3, [sp, #16]
 800982e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009832:	4826      	ldr	r0, [pc, #152]	; (80098cc <_svfiprintf_r+0x1f0>)
 8009834:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009838:	2206      	movs	r2, #6
 800983a:	f7f6 fcd1 	bl	80001e0 <memchr>
 800983e:	2800      	cmp	r0, #0
 8009840:	d038      	beq.n	80098b4 <_svfiprintf_r+0x1d8>
 8009842:	4b23      	ldr	r3, [pc, #140]	; (80098d0 <_svfiprintf_r+0x1f4>)
 8009844:	bb1b      	cbnz	r3, 800988e <_svfiprintf_r+0x1b2>
 8009846:	9b03      	ldr	r3, [sp, #12]
 8009848:	3307      	adds	r3, #7
 800984a:	f023 0307 	bic.w	r3, r3, #7
 800984e:	3308      	adds	r3, #8
 8009850:	9303      	str	r3, [sp, #12]
 8009852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009854:	4433      	add	r3, r6
 8009856:	9309      	str	r3, [sp, #36]	; 0x24
 8009858:	e767      	b.n	800972a <_svfiprintf_r+0x4e>
 800985a:	fb0c 3202 	mla	r2, ip, r2, r3
 800985e:	460c      	mov	r4, r1
 8009860:	2001      	movs	r0, #1
 8009862:	e7a5      	b.n	80097b0 <_svfiprintf_r+0xd4>
 8009864:	2300      	movs	r3, #0
 8009866:	3401      	adds	r4, #1
 8009868:	9305      	str	r3, [sp, #20]
 800986a:	4619      	mov	r1, r3
 800986c:	f04f 0c0a 	mov.w	ip, #10
 8009870:	4620      	mov	r0, r4
 8009872:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009876:	3a30      	subs	r2, #48	; 0x30
 8009878:	2a09      	cmp	r2, #9
 800987a:	d903      	bls.n	8009884 <_svfiprintf_r+0x1a8>
 800987c:	2b00      	cmp	r3, #0
 800987e:	d0c5      	beq.n	800980c <_svfiprintf_r+0x130>
 8009880:	9105      	str	r1, [sp, #20]
 8009882:	e7c3      	b.n	800980c <_svfiprintf_r+0x130>
 8009884:	fb0c 2101 	mla	r1, ip, r1, r2
 8009888:	4604      	mov	r4, r0
 800988a:	2301      	movs	r3, #1
 800988c:	e7f0      	b.n	8009870 <_svfiprintf_r+0x194>
 800988e:	ab03      	add	r3, sp, #12
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	462a      	mov	r2, r5
 8009894:	4b0f      	ldr	r3, [pc, #60]	; (80098d4 <_svfiprintf_r+0x1f8>)
 8009896:	a904      	add	r1, sp, #16
 8009898:	4638      	mov	r0, r7
 800989a:	f7fe f893 	bl	80079c4 <_printf_float>
 800989e:	1c42      	adds	r2, r0, #1
 80098a0:	4606      	mov	r6, r0
 80098a2:	d1d6      	bne.n	8009852 <_svfiprintf_r+0x176>
 80098a4:	89ab      	ldrh	r3, [r5, #12]
 80098a6:	065b      	lsls	r3, r3, #25
 80098a8:	f53f af2c 	bmi.w	8009704 <_svfiprintf_r+0x28>
 80098ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098ae:	b01d      	add	sp, #116	; 0x74
 80098b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b4:	ab03      	add	r3, sp, #12
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	462a      	mov	r2, r5
 80098ba:	4b06      	ldr	r3, [pc, #24]	; (80098d4 <_svfiprintf_r+0x1f8>)
 80098bc:	a904      	add	r1, sp, #16
 80098be:	4638      	mov	r0, r7
 80098c0:	f7fe fb24 	bl	8007f0c <_printf_i>
 80098c4:	e7eb      	b.n	800989e <_svfiprintf_r+0x1c2>
 80098c6:	bf00      	nop
 80098c8:	0800a734 	.word	0x0800a734
 80098cc:	0800a73e 	.word	0x0800a73e
 80098d0:	080079c5 	.word	0x080079c5
 80098d4:	08009627 	.word	0x08009627
 80098d8:	0800a73a 	.word	0x0800a73a

080098dc <__assert_func>:
 80098dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098de:	4614      	mov	r4, r2
 80098e0:	461a      	mov	r2, r3
 80098e2:	4b09      	ldr	r3, [pc, #36]	; (8009908 <__assert_func+0x2c>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4605      	mov	r5, r0
 80098e8:	68d8      	ldr	r0, [r3, #12]
 80098ea:	b14c      	cbz	r4, 8009900 <__assert_func+0x24>
 80098ec:	4b07      	ldr	r3, [pc, #28]	; (800990c <__assert_func+0x30>)
 80098ee:	9100      	str	r1, [sp, #0]
 80098f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098f4:	4906      	ldr	r1, [pc, #24]	; (8009910 <__assert_func+0x34>)
 80098f6:	462b      	mov	r3, r5
 80098f8:	f000 f80e 	bl	8009918 <fiprintf>
 80098fc:	f000 fa9a 	bl	8009e34 <abort>
 8009900:	4b04      	ldr	r3, [pc, #16]	; (8009914 <__assert_func+0x38>)
 8009902:	461c      	mov	r4, r3
 8009904:	e7f3      	b.n	80098ee <__assert_func+0x12>
 8009906:	bf00      	nop
 8009908:	20000090 	.word	0x20000090
 800990c:	0800a745 	.word	0x0800a745
 8009910:	0800a752 	.word	0x0800a752
 8009914:	0800a780 	.word	0x0800a780

08009918 <fiprintf>:
 8009918:	b40e      	push	{r1, r2, r3}
 800991a:	b503      	push	{r0, r1, lr}
 800991c:	4601      	mov	r1, r0
 800991e:	ab03      	add	r3, sp, #12
 8009920:	4805      	ldr	r0, [pc, #20]	; (8009938 <fiprintf+0x20>)
 8009922:	f853 2b04 	ldr.w	r2, [r3], #4
 8009926:	6800      	ldr	r0, [r0, #0]
 8009928:	9301      	str	r3, [sp, #4]
 800992a:	f000 f885 	bl	8009a38 <_vfiprintf_r>
 800992e:	b002      	add	sp, #8
 8009930:	f85d eb04 	ldr.w	lr, [sp], #4
 8009934:	b003      	add	sp, #12
 8009936:	4770      	bx	lr
 8009938:	20000090 	.word	0x20000090

0800993c <__retarget_lock_init_recursive>:
 800993c:	4770      	bx	lr

0800993e <__retarget_lock_acquire_recursive>:
 800993e:	4770      	bx	lr

08009940 <__retarget_lock_release_recursive>:
 8009940:	4770      	bx	lr

08009942 <__ascii_mbtowc>:
 8009942:	b082      	sub	sp, #8
 8009944:	b901      	cbnz	r1, 8009948 <__ascii_mbtowc+0x6>
 8009946:	a901      	add	r1, sp, #4
 8009948:	b142      	cbz	r2, 800995c <__ascii_mbtowc+0x1a>
 800994a:	b14b      	cbz	r3, 8009960 <__ascii_mbtowc+0x1e>
 800994c:	7813      	ldrb	r3, [r2, #0]
 800994e:	600b      	str	r3, [r1, #0]
 8009950:	7812      	ldrb	r2, [r2, #0]
 8009952:	1e10      	subs	r0, r2, #0
 8009954:	bf18      	it	ne
 8009956:	2001      	movne	r0, #1
 8009958:	b002      	add	sp, #8
 800995a:	4770      	bx	lr
 800995c:	4610      	mov	r0, r2
 800995e:	e7fb      	b.n	8009958 <__ascii_mbtowc+0x16>
 8009960:	f06f 0001 	mvn.w	r0, #1
 8009964:	e7f8      	b.n	8009958 <__ascii_mbtowc+0x16>

08009966 <memmove>:
 8009966:	4288      	cmp	r0, r1
 8009968:	b510      	push	{r4, lr}
 800996a:	eb01 0402 	add.w	r4, r1, r2
 800996e:	d902      	bls.n	8009976 <memmove+0x10>
 8009970:	4284      	cmp	r4, r0
 8009972:	4623      	mov	r3, r4
 8009974:	d807      	bhi.n	8009986 <memmove+0x20>
 8009976:	1e43      	subs	r3, r0, #1
 8009978:	42a1      	cmp	r1, r4
 800997a:	d008      	beq.n	800998e <memmove+0x28>
 800997c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009980:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009984:	e7f8      	b.n	8009978 <memmove+0x12>
 8009986:	4402      	add	r2, r0
 8009988:	4601      	mov	r1, r0
 800998a:	428a      	cmp	r2, r1
 800998c:	d100      	bne.n	8009990 <memmove+0x2a>
 800998e:	bd10      	pop	{r4, pc}
 8009990:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009994:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009998:	e7f7      	b.n	800998a <memmove+0x24>

0800999a <_realloc_r>:
 800999a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999c:	4607      	mov	r7, r0
 800999e:	4614      	mov	r4, r2
 80099a0:	460e      	mov	r6, r1
 80099a2:	b921      	cbnz	r1, 80099ae <_realloc_r+0x14>
 80099a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80099a8:	4611      	mov	r1, r2
 80099aa:	f7fd bf11 	b.w	80077d0 <_malloc_r>
 80099ae:	b922      	cbnz	r2, 80099ba <_realloc_r+0x20>
 80099b0:	f7fd febe 	bl	8007730 <_free_r>
 80099b4:	4625      	mov	r5, r4
 80099b6:	4628      	mov	r0, r5
 80099b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099ba:	f000 fc5f 	bl	800a27c <_malloc_usable_size_r>
 80099be:	42a0      	cmp	r0, r4
 80099c0:	d20f      	bcs.n	80099e2 <_realloc_r+0x48>
 80099c2:	4621      	mov	r1, r4
 80099c4:	4638      	mov	r0, r7
 80099c6:	f7fd ff03 	bl	80077d0 <_malloc_r>
 80099ca:	4605      	mov	r5, r0
 80099cc:	2800      	cmp	r0, #0
 80099ce:	d0f2      	beq.n	80099b6 <_realloc_r+0x1c>
 80099d0:	4631      	mov	r1, r6
 80099d2:	4622      	mov	r2, r4
 80099d4:	f7ff fa80 	bl	8008ed8 <memcpy>
 80099d8:	4631      	mov	r1, r6
 80099da:	4638      	mov	r0, r7
 80099dc:	f7fd fea8 	bl	8007730 <_free_r>
 80099e0:	e7e9      	b.n	80099b6 <_realloc_r+0x1c>
 80099e2:	4635      	mov	r5, r6
 80099e4:	e7e7      	b.n	80099b6 <_realloc_r+0x1c>

080099e6 <__sfputc_r>:
 80099e6:	6893      	ldr	r3, [r2, #8]
 80099e8:	3b01      	subs	r3, #1
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	b410      	push	{r4}
 80099ee:	6093      	str	r3, [r2, #8]
 80099f0:	da08      	bge.n	8009a04 <__sfputc_r+0x1e>
 80099f2:	6994      	ldr	r4, [r2, #24]
 80099f4:	42a3      	cmp	r3, r4
 80099f6:	db01      	blt.n	80099fc <__sfputc_r+0x16>
 80099f8:	290a      	cmp	r1, #10
 80099fa:	d103      	bne.n	8009a04 <__sfputc_r+0x1e>
 80099fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a00:	f000 b94a 	b.w	8009c98 <__swbuf_r>
 8009a04:	6813      	ldr	r3, [r2, #0]
 8009a06:	1c58      	adds	r0, r3, #1
 8009a08:	6010      	str	r0, [r2, #0]
 8009a0a:	7019      	strb	r1, [r3, #0]
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <__sfputs_r>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	4606      	mov	r6, r0
 8009a18:	460f      	mov	r7, r1
 8009a1a:	4614      	mov	r4, r2
 8009a1c:	18d5      	adds	r5, r2, r3
 8009a1e:	42ac      	cmp	r4, r5
 8009a20:	d101      	bne.n	8009a26 <__sfputs_r+0x12>
 8009a22:	2000      	movs	r0, #0
 8009a24:	e007      	b.n	8009a36 <__sfputs_r+0x22>
 8009a26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a2a:	463a      	mov	r2, r7
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	f7ff ffda 	bl	80099e6 <__sfputc_r>
 8009a32:	1c43      	adds	r3, r0, #1
 8009a34:	d1f3      	bne.n	8009a1e <__sfputs_r+0xa>
 8009a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a38 <_vfiprintf_r>:
 8009a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3c:	460d      	mov	r5, r1
 8009a3e:	b09d      	sub	sp, #116	; 0x74
 8009a40:	4614      	mov	r4, r2
 8009a42:	4698      	mov	r8, r3
 8009a44:	4606      	mov	r6, r0
 8009a46:	b118      	cbz	r0, 8009a50 <_vfiprintf_r+0x18>
 8009a48:	6983      	ldr	r3, [r0, #24]
 8009a4a:	b90b      	cbnz	r3, 8009a50 <_vfiprintf_r+0x18>
 8009a4c:	f000 fb14 	bl	800a078 <__sinit>
 8009a50:	4b89      	ldr	r3, [pc, #548]	; (8009c78 <_vfiprintf_r+0x240>)
 8009a52:	429d      	cmp	r5, r3
 8009a54:	d11b      	bne.n	8009a8e <_vfiprintf_r+0x56>
 8009a56:	6875      	ldr	r5, [r6, #4]
 8009a58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a5a:	07d9      	lsls	r1, r3, #31
 8009a5c:	d405      	bmi.n	8009a6a <_vfiprintf_r+0x32>
 8009a5e:	89ab      	ldrh	r3, [r5, #12]
 8009a60:	059a      	lsls	r2, r3, #22
 8009a62:	d402      	bmi.n	8009a6a <_vfiprintf_r+0x32>
 8009a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a66:	f7ff ff6a 	bl	800993e <__retarget_lock_acquire_recursive>
 8009a6a:	89ab      	ldrh	r3, [r5, #12]
 8009a6c:	071b      	lsls	r3, r3, #28
 8009a6e:	d501      	bpl.n	8009a74 <_vfiprintf_r+0x3c>
 8009a70:	692b      	ldr	r3, [r5, #16]
 8009a72:	b9eb      	cbnz	r3, 8009ab0 <_vfiprintf_r+0x78>
 8009a74:	4629      	mov	r1, r5
 8009a76:	4630      	mov	r0, r6
 8009a78:	f000 f96e 	bl	8009d58 <__swsetup_r>
 8009a7c:	b1c0      	cbz	r0, 8009ab0 <_vfiprintf_r+0x78>
 8009a7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a80:	07dc      	lsls	r4, r3, #31
 8009a82:	d50e      	bpl.n	8009aa2 <_vfiprintf_r+0x6a>
 8009a84:	f04f 30ff 	mov.w	r0, #4294967295
 8009a88:	b01d      	add	sp, #116	; 0x74
 8009a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a8e:	4b7b      	ldr	r3, [pc, #492]	; (8009c7c <_vfiprintf_r+0x244>)
 8009a90:	429d      	cmp	r5, r3
 8009a92:	d101      	bne.n	8009a98 <_vfiprintf_r+0x60>
 8009a94:	68b5      	ldr	r5, [r6, #8]
 8009a96:	e7df      	b.n	8009a58 <_vfiprintf_r+0x20>
 8009a98:	4b79      	ldr	r3, [pc, #484]	; (8009c80 <_vfiprintf_r+0x248>)
 8009a9a:	429d      	cmp	r5, r3
 8009a9c:	bf08      	it	eq
 8009a9e:	68f5      	ldreq	r5, [r6, #12]
 8009aa0:	e7da      	b.n	8009a58 <_vfiprintf_r+0x20>
 8009aa2:	89ab      	ldrh	r3, [r5, #12]
 8009aa4:	0598      	lsls	r0, r3, #22
 8009aa6:	d4ed      	bmi.n	8009a84 <_vfiprintf_r+0x4c>
 8009aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aaa:	f7ff ff49 	bl	8009940 <__retarget_lock_release_recursive>
 8009aae:	e7e9      	b.n	8009a84 <_vfiprintf_r+0x4c>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab4:	2320      	movs	r3, #32
 8009ab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aba:	f8cd 800c 	str.w	r8, [sp, #12]
 8009abe:	2330      	movs	r3, #48	; 0x30
 8009ac0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c84 <_vfiprintf_r+0x24c>
 8009ac4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ac8:	f04f 0901 	mov.w	r9, #1
 8009acc:	4623      	mov	r3, r4
 8009ace:	469a      	mov	sl, r3
 8009ad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ad4:	b10a      	cbz	r2, 8009ada <_vfiprintf_r+0xa2>
 8009ad6:	2a25      	cmp	r2, #37	; 0x25
 8009ad8:	d1f9      	bne.n	8009ace <_vfiprintf_r+0x96>
 8009ada:	ebba 0b04 	subs.w	fp, sl, r4
 8009ade:	d00b      	beq.n	8009af8 <_vfiprintf_r+0xc0>
 8009ae0:	465b      	mov	r3, fp
 8009ae2:	4622      	mov	r2, r4
 8009ae4:	4629      	mov	r1, r5
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f7ff ff94 	bl	8009a14 <__sfputs_r>
 8009aec:	3001      	adds	r0, #1
 8009aee:	f000 80aa 	beq.w	8009c46 <_vfiprintf_r+0x20e>
 8009af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009af4:	445a      	add	r2, fp
 8009af6:	9209      	str	r2, [sp, #36]	; 0x24
 8009af8:	f89a 3000 	ldrb.w	r3, [sl]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f000 80a2 	beq.w	8009c46 <_vfiprintf_r+0x20e>
 8009b02:	2300      	movs	r3, #0
 8009b04:	f04f 32ff 	mov.w	r2, #4294967295
 8009b08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b0c:	f10a 0a01 	add.w	sl, sl, #1
 8009b10:	9304      	str	r3, [sp, #16]
 8009b12:	9307      	str	r3, [sp, #28]
 8009b14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b18:	931a      	str	r3, [sp, #104]	; 0x68
 8009b1a:	4654      	mov	r4, sl
 8009b1c:	2205      	movs	r2, #5
 8009b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b22:	4858      	ldr	r0, [pc, #352]	; (8009c84 <_vfiprintf_r+0x24c>)
 8009b24:	f7f6 fb5c 	bl	80001e0 <memchr>
 8009b28:	9a04      	ldr	r2, [sp, #16]
 8009b2a:	b9d8      	cbnz	r0, 8009b64 <_vfiprintf_r+0x12c>
 8009b2c:	06d1      	lsls	r1, r2, #27
 8009b2e:	bf44      	itt	mi
 8009b30:	2320      	movmi	r3, #32
 8009b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b36:	0713      	lsls	r3, r2, #28
 8009b38:	bf44      	itt	mi
 8009b3a:	232b      	movmi	r3, #43	; 0x2b
 8009b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b40:	f89a 3000 	ldrb.w	r3, [sl]
 8009b44:	2b2a      	cmp	r3, #42	; 0x2a
 8009b46:	d015      	beq.n	8009b74 <_vfiprintf_r+0x13c>
 8009b48:	9a07      	ldr	r2, [sp, #28]
 8009b4a:	4654      	mov	r4, sl
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	f04f 0c0a 	mov.w	ip, #10
 8009b52:	4621      	mov	r1, r4
 8009b54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b58:	3b30      	subs	r3, #48	; 0x30
 8009b5a:	2b09      	cmp	r3, #9
 8009b5c:	d94e      	bls.n	8009bfc <_vfiprintf_r+0x1c4>
 8009b5e:	b1b0      	cbz	r0, 8009b8e <_vfiprintf_r+0x156>
 8009b60:	9207      	str	r2, [sp, #28]
 8009b62:	e014      	b.n	8009b8e <_vfiprintf_r+0x156>
 8009b64:	eba0 0308 	sub.w	r3, r0, r8
 8009b68:	fa09 f303 	lsl.w	r3, r9, r3
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	9304      	str	r3, [sp, #16]
 8009b70:	46a2      	mov	sl, r4
 8009b72:	e7d2      	b.n	8009b1a <_vfiprintf_r+0xe2>
 8009b74:	9b03      	ldr	r3, [sp, #12]
 8009b76:	1d19      	adds	r1, r3, #4
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	9103      	str	r1, [sp, #12]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	bfbb      	ittet	lt
 8009b80:	425b      	neglt	r3, r3
 8009b82:	f042 0202 	orrlt.w	r2, r2, #2
 8009b86:	9307      	strge	r3, [sp, #28]
 8009b88:	9307      	strlt	r3, [sp, #28]
 8009b8a:	bfb8      	it	lt
 8009b8c:	9204      	strlt	r2, [sp, #16]
 8009b8e:	7823      	ldrb	r3, [r4, #0]
 8009b90:	2b2e      	cmp	r3, #46	; 0x2e
 8009b92:	d10c      	bne.n	8009bae <_vfiprintf_r+0x176>
 8009b94:	7863      	ldrb	r3, [r4, #1]
 8009b96:	2b2a      	cmp	r3, #42	; 0x2a
 8009b98:	d135      	bne.n	8009c06 <_vfiprintf_r+0x1ce>
 8009b9a:	9b03      	ldr	r3, [sp, #12]
 8009b9c:	1d1a      	adds	r2, r3, #4
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	9203      	str	r2, [sp, #12]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	bfb8      	it	lt
 8009ba6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009baa:	3402      	adds	r4, #2
 8009bac:	9305      	str	r3, [sp, #20]
 8009bae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c94 <_vfiprintf_r+0x25c>
 8009bb2:	7821      	ldrb	r1, [r4, #0]
 8009bb4:	2203      	movs	r2, #3
 8009bb6:	4650      	mov	r0, sl
 8009bb8:	f7f6 fb12 	bl	80001e0 <memchr>
 8009bbc:	b140      	cbz	r0, 8009bd0 <_vfiprintf_r+0x198>
 8009bbe:	2340      	movs	r3, #64	; 0x40
 8009bc0:	eba0 000a 	sub.w	r0, r0, sl
 8009bc4:	fa03 f000 	lsl.w	r0, r3, r0
 8009bc8:	9b04      	ldr	r3, [sp, #16]
 8009bca:	4303      	orrs	r3, r0
 8009bcc:	3401      	adds	r4, #1
 8009bce:	9304      	str	r3, [sp, #16]
 8009bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd4:	482c      	ldr	r0, [pc, #176]	; (8009c88 <_vfiprintf_r+0x250>)
 8009bd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bda:	2206      	movs	r2, #6
 8009bdc:	f7f6 fb00 	bl	80001e0 <memchr>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d03f      	beq.n	8009c64 <_vfiprintf_r+0x22c>
 8009be4:	4b29      	ldr	r3, [pc, #164]	; (8009c8c <_vfiprintf_r+0x254>)
 8009be6:	bb1b      	cbnz	r3, 8009c30 <_vfiprintf_r+0x1f8>
 8009be8:	9b03      	ldr	r3, [sp, #12]
 8009bea:	3307      	adds	r3, #7
 8009bec:	f023 0307 	bic.w	r3, r3, #7
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	9303      	str	r3, [sp, #12]
 8009bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf6:	443b      	add	r3, r7
 8009bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bfa:	e767      	b.n	8009acc <_vfiprintf_r+0x94>
 8009bfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c00:	460c      	mov	r4, r1
 8009c02:	2001      	movs	r0, #1
 8009c04:	e7a5      	b.n	8009b52 <_vfiprintf_r+0x11a>
 8009c06:	2300      	movs	r3, #0
 8009c08:	3401      	adds	r4, #1
 8009c0a:	9305      	str	r3, [sp, #20]
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	f04f 0c0a 	mov.w	ip, #10
 8009c12:	4620      	mov	r0, r4
 8009c14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c18:	3a30      	subs	r2, #48	; 0x30
 8009c1a:	2a09      	cmp	r2, #9
 8009c1c:	d903      	bls.n	8009c26 <_vfiprintf_r+0x1ee>
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d0c5      	beq.n	8009bae <_vfiprintf_r+0x176>
 8009c22:	9105      	str	r1, [sp, #20]
 8009c24:	e7c3      	b.n	8009bae <_vfiprintf_r+0x176>
 8009c26:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e7f0      	b.n	8009c12 <_vfiprintf_r+0x1da>
 8009c30:	ab03      	add	r3, sp, #12
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	462a      	mov	r2, r5
 8009c36:	4b16      	ldr	r3, [pc, #88]	; (8009c90 <_vfiprintf_r+0x258>)
 8009c38:	a904      	add	r1, sp, #16
 8009c3a:	4630      	mov	r0, r6
 8009c3c:	f7fd fec2 	bl	80079c4 <_printf_float>
 8009c40:	4607      	mov	r7, r0
 8009c42:	1c78      	adds	r0, r7, #1
 8009c44:	d1d6      	bne.n	8009bf4 <_vfiprintf_r+0x1bc>
 8009c46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c48:	07d9      	lsls	r1, r3, #31
 8009c4a:	d405      	bmi.n	8009c58 <_vfiprintf_r+0x220>
 8009c4c:	89ab      	ldrh	r3, [r5, #12]
 8009c4e:	059a      	lsls	r2, r3, #22
 8009c50:	d402      	bmi.n	8009c58 <_vfiprintf_r+0x220>
 8009c52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c54:	f7ff fe74 	bl	8009940 <__retarget_lock_release_recursive>
 8009c58:	89ab      	ldrh	r3, [r5, #12]
 8009c5a:	065b      	lsls	r3, r3, #25
 8009c5c:	f53f af12 	bmi.w	8009a84 <_vfiprintf_r+0x4c>
 8009c60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c62:	e711      	b.n	8009a88 <_vfiprintf_r+0x50>
 8009c64:	ab03      	add	r3, sp, #12
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	462a      	mov	r2, r5
 8009c6a:	4b09      	ldr	r3, [pc, #36]	; (8009c90 <_vfiprintf_r+0x258>)
 8009c6c:	a904      	add	r1, sp, #16
 8009c6e:	4630      	mov	r0, r6
 8009c70:	f7fe f94c 	bl	8007f0c <_printf_i>
 8009c74:	e7e4      	b.n	8009c40 <_vfiprintf_r+0x208>
 8009c76:	bf00      	nop
 8009c78:	0800a8ac 	.word	0x0800a8ac
 8009c7c:	0800a8cc 	.word	0x0800a8cc
 8009c80:	0800a88c 	.word	0x0800a88c
 8009c84:	0800a734 	.word	0x0800a734
 8009c88:	0800a73e 	.word	0x0800a73e
 8009c8c:	080079c5 	.word	0x080079c5
 8009c90:	08009a15 	.word	0x08009a15
 8009c94:	0800a73a 	.word	0x0800a73a

08009c98 <__swbuf_r>:
 8009c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9a:	460e      	mov	r6, r1
 8009c9c:	4614      	mov	r4, r2
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	b118      	cbz	r0, 8009caa <__swbuf_r+0x12>
 8009ca2:	6983      	ldr	r3, [r0, #24]
 8009ca4:	b90b      	cbnz	r3, 8009caa <__swbuf_r+0x12>
 8009ca6:	f000 f9e7 	bl	800a078 <__sinit>
 8009caa:	4b21      	ldr	r3, [pc, #132]	; (8009d30 <__swbuf_r+0x98>)
 8009cac:	429c      	cmp	r4, r3
 8009cae:	d12b      	bne.n	8009d08 <__swbuf_r+0x70>
 8009cb0:	686c      	ldr	r4, [r5, #4]
 8009cb2:	69a3      	ldr	r3, [r4, #24]
 8009cb4:	60a3      	str	r3, [r4, #8]
 8009cb6:	89a3      	ldrh	r3, [r4, #12]
 8009cb8:	071a      	lsls	r2, r3, #28
 8009cba:	d52f      	bpl.n	8009d1c <__swbuf_r+0x84>
 8009cbc:	6923      	ldr	r3, [r4, #16]
 8009cbe:	b36b      	cbz	r3, 8009d1c <__swbuf_r+0x84>
 8009cc0:	6923      	ldr	r3, [r4, #16]
 8009cc2:	6820      	ldr	r0, [r4, #0]
 8009cc4:	1ac0      	subs	r0, r0, r3
 8009cc6:	6963      	ldr	r3, [r4, #20]
 8009cc8:	b2f6      	uxtb	r6, r6
 8009cca:	4283      	cmp	r3, r0
 8009ccc:	4637      	mov	r7, r6
 8009cce:	dc04      	bgt.n	8009cda <__swbuf_r+0x42>
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	f000 f93c 	bl	8009f50 <_fflush_r>
 8009cd8:	bb30      	cbnz	r0, 8009d28 <__swbuf_r+0x90>
 8009cda:	68a3      	ldr	r3, [r4, #8]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	60a3      	str	r3, [r4, #8]
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	1c5a      	adds	r2, r3, #1
 8009ce4:	6022      	str	r2, [r4, #0]
 8009ce6:	701e      	strb	r6, [r3, #0]
 8009ce8:	6963      	ldr	r3, [r4, #20]
 8009cea:	3001      	adds	r0, #1
 8009cec:	4283      	cmp	r3, r0
 8009cee:	d004      	beq.n	8009cfa <__swbuf_r+0x62>
 8009cf0:	89a3      	ldrh	r3, [r4, #12]
 8009cf2:	07db      	lsls	r3, r3, #31
 8009cf4:	d506      	bpl.n	8009d04 <__swbuf_r+0x6c>
 8009cf6:	2e0a      	cmp	r6, #10
 8009cf8:	d104      	bne.n	8009d04 <__swbuf_r+0x6c>
 8009cfa:	4621      	mov	r1, r4
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	f000 f927 	bl	8009f50 <_fflush_r>
 8009d02:	b988      	cbnz	r0, 8009d28 <__swbuf_r+0x90>
 8009d04:	4638      	mov	r0, r7
 8009d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d08:	4b0a      	ldr	r3, [pc, #40]	; (8009d34 <__swbuf_r+0x9c>)
 8009d0a:	429c      	cmp	r4, r3
 8009d0c:	d101      	bne.n	8009d12 <__swbuf_r+0x7a>
 8009d0e:	68ac      	ldr	r4, [r5, #8]
 8009d10:	e7cf      	b.n	8009cb2 <__swbuf_r+0x1a>
 8009d12:	4b09      	ldr	r3, [pc, #36]	; (8009d38 <__swbuf_r+0xa0>)
 8009d14:	429c      	cmp	r4, r3
 8009d16:	bf08      	it	eq
 8009d18:	68ec      	ldreq	r4, [r5, #12]
 8009d1a:	e7ca      	b.n	8009cb2 <__swbuf_r+0x1a>
 8009d1c:	4621      	mov	r1, r4
 8009d1e:	4628      	mov	r0, r5
 8009d20:	f000 f81a 	bl	8009d58 <__swsetup_r>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d0cb      	beq.n	8009cc0 <__swbuf_r+0x28>
 8009d28:	f04f 37ff 	mov.w	r7, #4294967295
 8009d2c:	e7ea      	b.n	8009d04 <__swbuf_r+0x6c>
 8009d2e:	bf00      	nop
 8009d30:	0800a8ac 	.word	0x0800a8ac
 8009d34:	0800a8cc 	.word	0x0800a8cc
 8009d38:	0800a88c 	.word	0x0800a88c

08009d3c <__ascii_wctomb>:
 8009d3c:	b149      	cbz	r1, 8009d52 <__ascii_wctomb+0x16>
 8009d3e:	2aff      	cmp	r2, #255	; 0xff
 8009d40:	bf85      	ittet	hi
 8009d42:	238a      	movhi	r3, #138	; 0x8a
 8009d44:	6003      	strhi	r3, [r0, #0]
 8009d46:	700a      	strbls	r2, [r1, #0]
 8009d48:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d4c:	bf98      	it	ls
 8009d4e:	2001      	movls	r0, #1
 8009d50:	4770      	bx	lr
 8009d52:	4608      	mov	r0, r1
 8009d54:	4770      	bx	lr
	...

08009d58 <__swsetup_r>:
 8009d58:	4b32      	ldr	r3, [pc, #200]	; (8009e24 <__swsetup_r+0xcc>)
 8009d5a:	b570      	push	{r4, r5, r6, lr}
 8009d5c:	681d      	ldr	r5, [r3, #0]
 8009d5e:	4606      	mov	r6, r0
 8009d60:	460c      	mov	r4, r1
 8009d62:	b125      	cbz	r5, 8009d6e <__swsetup_r+0x16>
 8009d64:	69ab      	ldr	r3, [r5, #24]
 8009d66:	b913      	cbnz	r3, 8009d6e <__swsetup_r+0x16>
 8009d68:	4628      	mov	r0, r5
 8009d6a:	f000 f985 	bl	800a078 <__sinit>
 8009d6e:	4b2e      	ldr	r3, [pc, #184]	; (8009e28 <__swsetup_r+0xd0>)
 8009d70:	429c      	cmp	r4, r3
 8009d72:	d10f      	bne.n	8009d94 <__swsetup_r+0x3c>
 8009d74:	686c      	ldr	r4, [r5, #4]
 8009d76:	89a3      	ldrh	r3, [r4, #12]
 8009d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d7c:	0719      	lsls	r1, r3, #28
 8009d7e:	d42c      	bmi.n	8009dda <__swsetup_r+0x82>
 8009d80:	06dd      	lsls	r5, r3, #27
 8009d82:	d411      	bmi.n	8009da8 <__swsetup_r+0x50>
 8009d84:	2309      	movs	r3, #9
 8009d86:	6033      	str	r3, [r6, #0]
 8009d88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d8c:	81a3      	strh	r3, [r4, #12]
 8009d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d92:	e03e      	b.n	8009e12 <__swsetup_r+0xba>
 8009d94:	4b25      	ldr	r3, [pc, #148]	; (8009e2c <__swsetup_r+0xd4>)
 8009d96:	429c      	cmp	r4, r3
 8009d98:	d101      	bne.n	8009d9e <__swsetup_r+0x46>
 8009d9a:	68ac      	ldr	r4, [r5, #8]
 8009d9c:	e7eb      	b.n	8009d76 <__swsetup_r+0x1e>
 8009d9e:	4b24      	ldr	r3, [pc, #144]	; (8009e30 <__swsetup_r+0xd8>)
 8009da0:	429c      	cmp	r4, r3
 8009da2:	bf08      	it	eq
 8009da4:	68ec      	ldreq	r4, [r5, #12]
 8009da6:	e7e6      	b.n	8009d76 <__swsetup_r+0x1e>
 8009da8:	0758      	lsls	r0, r3, #29
 8009daa:	d512      	bpl.n	8009dd2 <__swsetup_r+0x7a>
 8009dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dae:	b141      	cbz	r1, 8009dc2 <__swsetup_r+0x6a>
 8009db0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009db4:	4299      	cmp	r1, r3
 8009db6:	d002      	beq.n	8009dbe <__swsetup_r+0x66>
 8009db8:	4630      	mov	r0, r6
 8009dba:	f7fd fcb9 	bl	8007730 <_free_r>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	6363      	str	r3, [r4, #52]	; 0x34
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dc8:	81a3      	strh	r3, [r4, #12]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	6063      	str	r3, [r4, #4]
 8009dce:	6923      	ldr	r3, [r4, #16]
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	f043 0308 	orr.w	r3, r3, #8
 8009dd8:	81a3      	strh	r3, [r4, #12]
 8009dda:	6923      	ldr	r3, [r4, #16]
 8009ddc:	b94b      	cbnz	r3, 8009df2 <__swsetup_r+0x9a>
 8009dde:	89a3      	ldrh	r3, [r4, #12]
 8009de0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009de8:	d003      	beq.n	8009df2 <__swsetup_r+0x9a>
 8009dea:	4621      	mov	r1, r4
 8009dec:	4630      	mov	r0, r6
 8009dee:	f000 fa05 	bl	800a1fc <__smakebuf_r>
 8009df2:	89a0      	ldrh	r0, [r4, #12]
 8009df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009df8:	f010 0301 	ands.w	r3, r0, #1
 8009dfc:	d00a      	beq.n	8009e14 <__swsetup_r+0xbc>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	60a3      	str	r3, [r4, #8]
 8009e02:	6963      	ldr	r3, [r4, #20]
 8009e04:	425b      	negs	r3, r3
 8009e06:	61a3      	str	r3, [r4, #24]
 8009e08:	6923      	ldr	r3, [r4, #16]
 8009e0a:	b943      	cbnz	r3, 8009e1e <__swsetup_r+0xc6>
 8009e0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e10:	d1ba      	bne.n	8009d88 <__swsetup_r+0x30>
 8009e12:	bd70      	pop	{r4, r5, r6, pc}
 8009e14:	0781      	lsls	r1, r0, #30
 8009e16:	bf58      	it	pl
 8009e18:	6963      	ldrpl	r3, [r4, #20]
 8009e1a:	60a3      	str	r3, [r4, #8]
 8009e1c:	e7f4      	b.n	8009e08 <__swsetup_r+0xb0>
 8009e1e:	2000      	movs	r0, #0
 8009e20:	e7f7      	b.n	8009e12 <__swsetup_r+0xba>
 8009e22:	bf00      	nop
 8009e24:	20000090 	.word	0x20000090
 8009e28:	0800a8ac 	.word	0x0800a8ac
 8009e2c:	0800a8cc 	.word	0x0800a8cc
 8009e30:	0800a88c 	.word	0x0800a88c

08009e34 <abort>:
 8009e34:	b508      	push	{r3, lr}
 8009e36:	2006      	movs	r0, #6
 8009e38:	f000 fa50 	bl	800a2dc <raise>
 8009e3c:	2001      	movs	r0, #1
 8009e3e:	f7f8 f999 	bl	8002174 <_exit>
	...

08009e44 <__sflush_r>:
 8009e44:	898a      	ldrh	r2, [r1, #12]
 8009e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4a:	4605      	mov	r5, r0
 8009e4c:	0710      	lsls	r0, r2, #28
 8009e4e:	460c      	mov	r4, r1
 8009e50:	d458      	bmi.n	8009f04 <__sflush_r+0xc0>
 8009e52:	684b      	ldr	r3, [r1, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	dc05      	bgt.n	8009e64 <__sflush_r+0x20>
 8009e58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	dc02      	bgt.n	8009e64 <__sflush_r+0x20>
 8009e5e:	2000      	movs	r0, #0
 8009e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e66:	2e00      	cmp	r6, #0
 8009e68:	d0f9      	beq.n	8009e5e <__sflush_r+0x1a>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e70:	682f      	ldr	r7, [r5, #0]
 8009e72:	602b      	str	r3, [r5, #0]
 8009e74:	d032      	beq.n	8009edc <__sflush_r+0x98>
 8009e76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	075a      	lsls	r2, r3, #29
 8009e7c:	d505      	bpl.n	8009e8a <__sflush_r+0x46>
 8009e7e:	6863      	ldr	r3, [r4, #4]
 8009e80:	1ac0      	subs	r0, r0, r3
 8009e82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e84:	b10b      	cbz	r3, 8009e8a <__sflush_r+0x46>
 8009e86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e88:	1ac0      	subs	r0, r0, r3
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e90:	6a21      	ldr	r1, [r4, #32]
 8009e92:	4628      	mov	r0, r5
 8009e94:	47b0      	blx	r6
 8009e96:	1c43      	adds	r3, r0, #1
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	d106      	bne.n	8009eaa <__sflush_r+0x66>
 8009e9c:	6829      	ldr	r1, [r5, #0]
 8009e9e:	291d      	cmp	r1, #29
 8009ea0:	d82c      	bhi.n	8009efc <__sflush_r+0xb8>
 8009ea2:	4a2a      	ldr	r2, [pc, #168]	; (8009f4c <__sflush_r+0x108>)
 8009ea4:	40ca      	lsrs	r2, r1
 8009ea6:	07d6      	lsls	r6, r2, #31
 8009ea8:	d528      	bpl.n	8009efc <__sflush_r+0xb8>
 8009eaa:	2200      	movs	r2, #0
 8009eac:	6062      	str	r2, [r4, #4]
 8009eae:	04d9      	lsls	r1, r3, #19
 8009eb0:	6922      	ldr	r2, [r4, #16]
 8009eb2:	6022      	str	r2, [r4, #0]
 8009eb4:	d504      	bpl.n	8009ec0 <__sflush_r+0x7c>
 8009eb6:	1c42      	adds	r2, r0, #1
 8009eb8:	d101      	bne.n	8009ebe <__sflush_r+0x7a>
 8009eba:	682b      	ldr	r3, [r5, #0]
 8009ebc:	b903      	cbnz	r3, 8009ec0 <__sflush_r+0x7c>
 8009ebe:	6560      	str	r0, [r4, #84]	; 0x54
 8009ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ec2:	602f      	str	r7, [r5, #0]
 8009ec4:	2900      	cmp	r1, #0
 8009ec6:	d0ca      	beq.n	8009e5e <__sflush_r+0x1a>
 8009ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ecc:	4299      	cmp	r1, r3
 8009ece:	d002      	beq.n	8009ed6 <__sflush_r+0x92>
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	f7fd fc2d 	bl	8007730 <_free_r>
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	6360      	str	r0, [r4, #52]	; 0x34
 8009eda:	e7c1      	b.n	8009e60 <__sflush_r+0x1c>
 8009edc:	6a21      	ldr	r1, [r4, #32]
 8009ede:	2301      	movs	r3, #1
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	47b0      	blx	r6
 8009ee4:	1c41      	adds	r1, r0, #1
 8009ee6:	d1c7      	bne.n	8009e78 <__sflush_r+0x34>
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d0c4      	beq.n	8009e78 <__sflush_r+0x34>
 8009eee:	2b1d      	cmp	r3, #29
 8009ef0:	d001      	beq.n	8009ef6 <__sflush_r+0xb2>
 8009ef2:	2b16      	cmp	r3, #22
 8009ef4:	d101      	bne.n	8009efa <__sflush_r+0xb6>
 8009ef6:	602f      	str	r7, [r5, #0]
 8009ef8:	e7b1      	b.n	8009e5e <__sflush_r+0x1a>
 8009efa:	89a3      	ldrh	r3, [r4, #12]
 8009efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f00:	81a3      	strh	r3, [r4, #12]
 8009f02:	e7ad      	b.n	8009e60 <__sflush_r+0x1c>
 8009f04:	690f      	ldr	r7, [r1, #16]
 8009f06:	2f00      	cmp	r7, #0
 8009f08:	d0a9      	beq.n	8009e5e <__sflush_r+0x1a>
 8009f0a:	0793      	lsls	r3, r2, #30
 8009f0c:	680e      	ldr	r6, [r1, #0]
 8009f0e:	bf08      	it	eq
 8009f10:	694b      	ldreq	r3, [r1, #20]
 8009f12:	600f      	str	r7, [r1, #0]
 8009f14:	bf18      	it	ne
 8009f16:	2300      	movne	r3, #0
 8009f18:	eba6 0807 	sub.w	r8, r6, r7
 8009f1c:	608b      	str	r3, [r1, #8]
 8009f1e:	f1b8 0f00 	cmp.w	r8, #0
 8009f22:	dd9c      	ble.n	8009e5e <__sflush_r+0x1a>
 8009f24:	6a21      	ldr	r1, [r4, #32]
 8009f26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f28:	4643      	mov	r3, r8
 8009f2a:	463a      	mov	r2, r7
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	47b0      	blx	r6
 8009f30:	2800      	cmp	r0, #0
 8009f32:	dc06      	bgt.n	8009f42 <__sflush_r+0xfe>
 8009f34:	89a3      	ldrh	r3, [r4, #12]
 8009f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f3a:	81a3      	strh	r3, [r4, #12]
 8009f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f40:	e78e      	b.n	8009e60 <__sflush_r+0x1c>
 8009f42:	4407      	add	r7, r0
 8009f44:	eba8 0800 	sub.w	r8, r8, r0
 8009f48:	e7e9      	b.n	8009f1e <__sflush_r+0xda>
 8009f4a:	bf00      	nop
 8009f4c:	20400001 	.word	0x20400001

08009f50 <_fflush_r>:
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	690b      	ldr	r3, [r1, #16]
 8009f54:	4605      	mov	r5, r0
 8009f56:	460c      	mov	r4, r1
 8009f58:	b913      	cbnz	r3, 8009f60 <_fflush_r+0x10>
 8009f5a:	2500      	movs	r5, #0
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	bd38      	pop	{r3, r4, r5, pc}
 8009f60:	b118      	cbz	r0, 8009f6a <_fflush_r+0x1a>
 8009f62:	6983      	ldr	r3, [r0, #24]
 8009f64:	b90b      	cbnz	r3, 8009f6a <_fflush_r+0x1a>
 8009f66:	f000 f887 	bl	800a078 <__sinit>
 8009f6a:	4b14      	ldr	r3, [pc, #80]	; (8009fbc <_fflush_r+0x6c>)
 8009f6c:	429c      	cmp	r4, r3
 8009f6e:	d11b      	bne.n	8009fa8 <_fflush_r+0x58>
 8009f70:	686c      	ldr	r4, [r5, #4]
 8009f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d0ef      	beq.n	8009f5a <_fflush_r+0xa>
 8009f7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f7c:	07d0      	lsls	r0, r2, #31
 8009f7e:	d404      	bmi.n	8009f8a <_fflush_r+0x3a>
 8009f80:	0599      	lsls	r1, r3, #22
 8009f82:	d402      	bmi.n	8009f8a <_fflush_r+0x3a>
 8009f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f86:	f7ff fcda 	bl	800993e <__retarget_lock_acquire_recursive>
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	f7ff ff59 	bl	8009e44 <__sflush_r>
 8009f92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f94:	07da      	lsls	r2, r3, #31
 8009f96:	4605      	mov	r5, r0
 8009f98:	d4e0      	bmi.n	8009f5c <_fflush_r+0xc>
 8009f9a:	89a3      	ldrh	r3, [r4, #12]
 8009f9c:	059b      	lsls	r3, r3, #22
 8009f9e:	d4dd      	bmi.n	8009f5c <_fflush_r+0xc>
 8009fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fa2:	f7ff fccd 	bl	8009940 <__retarget_lock_release_recursive>
 8009fa6:	e7d9      	b.n	8009f5c <_fflush_r+0xc>
 8009fa8:	4b05      	ldr	r3, [pc, #20]	; (8009fc0 <_fflush_r+0x70>)
 8009faa:	429c      	cmp	r4, r3
 8009fac:	d101      	bne.n	8009fb2 <_fflush_r+0x62>
 8009fae:	68ac      	ldr	r4, [r5, #8]
 8009fb0:	e7df      	b.n	8009f72 <_fflush_r+0x22>
 8009fb2:	4b04      	ldr	r3, [pc, #16]	; (8009fc4 <_fflush_r+0x74>)
 8009fb4:	429c      	cmp	r4, r3
 8009fb6:	bf08      	it	eq
 8009fb8:	68ec      	ldreq	r4, [r5, #12]
 8009fba:	e7da      	b.n	8009f72 <_fflush_r+0x22>
 8009fbc:	0800a8ac 	.word	0x0800a8ac
 8009fc0:	0800a8cc 	.word	0x0800a8cc
 8009fc4:	0800a88c 	.word	0x0800a88c

08009fc8 <std>:
 8009fc8:	2300      	movs	r3, #0
 8009fca:	b510      	push	{r4, lr}
 8009fcc:	4604      	mov	r4, r0
 8009fce:	e9c0 3300 	strd	r3, r3, [r0]
 8009fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fd6:	6083      	str	r3, [r0, #8]
 8009fd8:	8181      	strh	r1, [r0, #12]
 8009fda:	6643      	str	r3, [r0, #100]	; 0x64
 8009fdc:	81c2      	strh	r2, [r0, #14]
 8009fde:	6183      	str	r3, [r0, #24]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	2208      	movs	r2, #8
 8009fe4:	305c      	adds	r0, #92	; 0x5c
 8009fe6:	f7fd fb9b 	bl	8007720 <memset>
 8009fea:	4b05      	ldr	r3, [pc, #20]	; (800a000 <std+0x38>)
 8009fec:	6263      	str	r3, [r4, #36]	; 0x24
 8009fee:	4b05      	ldr	r3, [pc, #20]	; (800a004 <std+0x3c>)
 8009ff0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ff2:	4b05      	ldr	r3, [pc, #20]	; (800a008 <std+0x40>)
 8009ff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ff6:	4b05      	ldr	r3, [pc, #20]	; (800a00c <std+0x44>)
 8009ff8:	6224      	str	r4, [r4, #32]
 8009ffa:	6323      	str	r3, [r4, #48]	; 0x30
 8009ffc:	bd10      	pop	{r4, pc}
 8009ffe:	bf00      	nop
 800a000:	0800a315 	.word	0x0800a315
 800a004:	0800a337 	.word	0x0800a337
 800a008:	0800a36f 	.word	0x0800a36f
 800a00c:	0800a393 	.word	0x0800a393

0800a010 <_cleanup_r>:
 800a010:	4901      	ldr	r1, [pc, #4]	; (800a018 <_cleanup_r+0x8>)
 800a012:	f000 b8af 	b.w	800a174 <_fwalk_reent>
 800a016:	bf00      	nop
 800a018:	08009f51 	.word	0x08009f51

0800a01c <__sfmoreglue>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	1e4a      	subs	r2, r1, #1
 800a020:	2568      	movs	r5, #104	; 0x68
 800a022:	4355      	muls	r5, r2
 800a024:	460e      	mov	r6, r1
 800a026:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a02a:	f7fd fbd1 	bl	80077d0 <_malloc_r>
 800a02e:	4604      	mov	r4, r0
 800a030:	b140      	cbz	r0, 800a044 <__sfmoreglue+0x28>
 800a032:	2100      	movs	r1, #0
 800a034:	e9c0 1600 	strd	r1, r6, [r0]
 800a038:	300c      	adds	r0, #12
 800a03a:	60a0      	str	r0, [r4, #8]
 800a03c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a040:	f7fd fb6e 	bl	8007720 <memset>
 800a044:	4620      	mov	r0, r4
 800a046:	bd70      	pop	{r4, r5, r6, pc}

0800a048 <__sfp_lock_acquire>:
 800a048:	4801      	ldr	r0, [pc, #4]	; (800a050 <__sfp_lock_acquire+0x8>)
 800a04a:	f7ff bc78 	b.w	800993e <__retarget_lock_acquire_recursive>
 800a04e:	bf00      	nop
 800a050:	20000564 	.word	0x20000564

0800a054 <__sfp_lock_release>:
 800a054:	4801      	ldr	r0, [pc, #4]	; (800a05c <__sfp_lock_release+0x8>)
 800a056:	f7ff bc73 	b.w	8009940 <__retarget_lock_release_recursive>
 800a05a:	bf00      	nop
 800a05c:	20000564 	.word	0x20000564

0800a060 <__sinit_lock_acquire>:
 800a060:	4801      	ldr	r0, [pc, #4]	; (800a068 <__sinit_lock_acquire+0x8>)
 800a062:	f7ff bc6c 	b.w	800993e <__retarget_lock_acquire_recursive>
 800a066:	bf00      	nop
 800a068:	2000055f 	.word	0x2000055f

0800a06c <__sinit_lock_release>:
 800a06c:	4801      	ldr	r0, [pc, #4]	; (800a074 <__sinit_lock_release+0x8>)
 800a06e:	f7ff bc67 	b.w	8009940 <__retarget_lock_release_recursive>
 800a072:	bf00      	nop
 800a074:	2000055f 	.word	0x2000055f

0800a078 <__sinit>:
 800a078:	b510      	push	{r4, lr}
 800a07a:	4604      	mov	r4, r0
 800a07c:	f7ff fff0 	bl	800a060 <__sinit_lock_acquire>
 800a080:	69a3      	ldr	r3, [r4, #24]
 800a082:	b11b      	cbz	r3, 800a08c <__sinit+0x14>
 800a084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a088:	f7ff bff0 	b.w	800a06c <__sinit_lock_release>
 800a08c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a090:	6523      	str	r3, [r4, #80]	; 0x50
 800a092:	4b13      	ldr	r3, [pc, #76]	; (800a0e0 <__sinit+0x68>)
 800a094:	4a13      	ldr	r2, [pc, #76]	; (800a0e4 <__sinit+0x6c>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	62a2      	str	r2, [r4, #40]	; 0x28
 800a09a:	42a3      	cmp	r3, r4
 800a09c:	bf04      	itt	eq
 800a09e:	2301      	moveq	r3, #1
 800a0a0:	61a3      	streq	r3, [r4, #24]
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f000 f820 	bl	800a0e8 <__sfp>
 800a0a8:	6060      	str	r0, [r4, #4]
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f000 f81c 	bl	800a0e8 <__sfp>
 800a0b0:	60a0      	str	r0, [r4, #8]
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f000 f818 	bl	800a0e8 <__sfp>
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	60e0      	str	r0, [r4, #12]
 800a0bc:	2104      	movs	r1, #4
 800a0be:	6860      	ldr	r0, [r4, #4]
 800a0c0:	f7ff ff82 	bl	8009fc8 <std>
 800a0c4:	68a0      	ldr	r0, [r4, #8]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	2109      	movs	r1, #9
 800a0ca:	f7ff ff7d 	bl	8009fc8 <std>
 800a0ce:	68e0      	ldr	r0, [r4, #12]
 800a0d0:	2202      	movs	r2, #2
 800a0d2:	2112      	movs	r1, #18
 800a0d4:	f7ff ff78 	bl	8009fc8 <std>
 800a0d8:	2301      	movs	r3, #1
 800a0da:	61a3      	str	r3, [r4, #24]
 800a0dc:	e7d2      	b.n	800a084 <__sinit+0xc>
 800a0de:	bf00      	nop
 800a0e0:	0800a50c 	.word	0x0800a50c
 800a0e4:	0800a011 	.word	0x0800a011

0800a0e8 <__sfp>:
 800a0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ea:	4607      	mov	r7, r0
 800a0ec:	f7ff ffac 	bl	800a048 <__sfp_lock_acquire>
 800a0f0:	4b1e      	ldr	r3, [pc, #120]	; (800a16c <__sfp+0x84>)
 800a0f2:	681e      	ldr	r6, [r3, #0]
 800a0f4:	69b3      	ldr	r3, [r6, #24]
 800a0f6:	b913      	cbnz	r3, 800a0fe <__sfp+0x16>
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	f7ff ffbd 	bl	800a078 <__sinit>
 800a0fe:	3648      	adds	r6, #72	; 0x48
 800a100:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a104:	3b01      	subs	r3, #1
 800a106:	d503      	bpl.n	800a110 <__sfp+0x28>
 800a108:	6833      	ldr	r3, [r6, #0]
 800a10a:	b30b      	cbz	r3, 800a150 <__sfp+0x68>
 800a10c:	6836      	ldr	r6, [r6, #0]
 800a10e:	e7f7      	b.n	800a100 <__sfp+0x18>
 800a110:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a114:	b9d5      	cbnz	r5, 800a14c <__sfp+0x64>
 800a116:	4b16      	ldr	r3, [pc, #88]	; (800a170 <__sfp+0x88>)
 800a118:	60e3      	str	r3, [r4, #12]
 800a11a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a11e:	6665      	str	r5, [r4, #100]	; 0x64
 800a120:	f7ff fc0c 	bl	800993c <__retarget_lock_init_recursive>
 800a124:	f7ff ff96 	bl	800a054 <__sfp_lock_release>
 800a128:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a12c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a130:	6025      	str	r5, [r4, #0]
 800a132:	61a5      	str	r5, [r4, #24]
 800a134:	2208      	movs	r2, #8
 800a136:	4629      	mov	r1, r5
 800a138:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a13c:	f7fd faf0 	bl	8007720 <memset>
 800a140:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a144:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a148:	4620      	mov	r0, r4
 800a14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a14c:	3468      	adds	r4, #104	; 0x68
 800a14e:	e7d9      	b.n	800a104 <__sfp+0x1c>
 800a150:	2104      	movs	r1, #4
 800a152:	4638      	mov	r0, r7
 800a154:	f7ff ff62 	bl	800a01c <__sfmoreglue>
 800a158:	4604      	mov	r4, r0
 800a15a:	6030      	str	r0, [r6, #0]
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d1d5      	bne.n	800a10c <__sfp+0x24>
 800a160:	f7ff ff78 	bl	800a054 <__sfp_lock_release>
 800a164:	230c      	movs	r3, #12
 800a166:	603b      	str	r3, [r7, #0]
 800a168:	e7ee      	b.n	800a148 <__sfp+0x60>
 800a16a:	bf00      	nop
 800a16c:	0800a50c 	.word	0x0800a50c
 800a170:	ffff0001 	.word	0xffff0001

0800a174 <_fwalk_reent>:
 800a174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a178:	4606      	mov	r6, r0
 800a17a:	4688      	mov	r8, r1
 800a17c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a180:	2700      	movs	r7, #0
 800a182:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a186:	f1b9 0901 	subs.w	r9, r9, #1
 800a18a:	d505      	bpl.n	800a198 <_fwalk_reent+0x24>
 800a18c:	6824      	ldr	r4, [r4, #0]
 800a18e:	2c00      	cmp	r4, #0
 800a190:	d1f7      	bne.n	800a182 <_fwalk_reent+0xe>
 800a192:	4638      	mov	r0, r7
 800a194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a198:	89ab      	ldrh	r3, [r5, #12]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d907      	bls.n	800a1ae <_fwalk_reent+0x3a>
 800a19e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	d003      	beq.n	800a1ae <_fwalk_reent+0x3a>
 800a1a6:	4629      	mov	r1, r5
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	47c0      	blx	r8
 800a1ac:	4307      	orrs	r7, r0
 800a1ae:	3568      	adds	r5, #104	; 0x68
 800a1b0:	e7e9      	b.n	800a186 <_fwalk_reent+0x12>

0800a1b2 <__swhatbuf_r>:
 800a1b2:	b570      	push	{r4, r5, r6, lr}
 800a1b4:	460e      	mov	r6, r1
 800a1b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ba:	2900      	cmp	r1, #0
 800a1bc:	b096      	sub	sp, #88	; 0x58
 800a1be:	4614      	mov	r4, r2
 800a1c0:	461d      	mov	r5, r3
 800a1c2:	da07      	bge.n	800a1d4 <__swhatbuf_r+0x22>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	602b      	str	r3, [r5, #0]
 800a1c8:	89b3      	ldrh	r3, [r6, #12]
 800a1ca:	061a      	lsls	r2, r3, #24
 800a1cc:	d410      	bmi.n	800a1f0 <__swhatbuf_r+0x3e>
 800a1ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1d2:	e00e      	b.n	800a1f2 <__swhatbuf_r+0x40>
 800a1d4:	466a      	mov	r2, sp
 800a1d6:	f000 f903 	bl	800a3e0 <_fstat_r>
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	dbf2      	blt.n	800a1c4 <__swhatbuf_r+0x12>
 800a1de:	9a01      	ldr	r2, [sp, #4]
 800a1e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1e8:	425a      	negs	r2, r3
 800a1ea:	415a      	adcs	r2, r3
 800a1ec:	602a      	str	r2, [r5, #0]
 800a1ee:	e7ee      	b.n	800a1ce <__swhatbuf_r+0x1c>
 800a1f0:	2340      	movs	r3, #64	; 0x40
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	6023      	str	r3, [r4, #0]
 800a1f6:	b016      	add	sp, #88	; 0x58
 800a1f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a1fc <__smakebuf_r>:
 800a1fc:	898b      	ldrh	r3, [r1, #12]
 800a1fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a200:	079d      	lsls	r5, r3, #30
 800a202:	4606      	mov	r6, r0
 800a204:	460c      	mov	r4, r1
 800a206:	d507      	bpl.n	800a218 <__smakebuf_r+0x1c>
 800a208:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a20c:	6023      	str	r3, [r4, #0]
 800a20e:	6123      	str	r3, [r4, #16]
 800a210:	2301      	movs	r3, #1
 800a212:	6163      	str	r3, [r4, #20]
 800a214:	b002      	add	sp, #8
 800a216:	bd70      	pop	{r4, r5, r6, pc}
 800a218:	ab01      	add	r3, sp, #4
 800a21a:	466a      	mov	r2, sp
 800a21c:	f7ff ffc9 	bl	800a1b2 <__swhatbuf_r>
 800a220:	9900      	ldr	r1, [sp, #0]
 800a222:	4605      	mov	r5, r0
 800a224:	4630      	mov	r0, r6
 800a226:	f7fd fad3 	bl	80077d0 <_malloc_r>
 800a22a:	b948      	cbnz	r0, 800a240 <__smakebuf_r+0x44>
 800a22c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a230:	059a      	lsls	r2, r3, #22
 800a232:	d4ef      	bmi.n	800a214 <__smakebuf_r+0x18>
 800a234:	f023 0303 	bic.w	r3, r3, #3
 800a238:	f043 0302 	orr.w	r3, r3, #2
 800a23c:	81a3      	strh	r3, [r4, #12]
 800a23e:	e7e3      	b.n	800a208 <__smakebuf_r+0xc>
 800a240:	4b0d      	ldr	r3, [pc, #52]	; (800a278 <__smakebuf_r+0x7c>)
 800a242:	62b3      	str	r3, [r6, #40]	; 0x28
 800a244:	89a3      	ldrh	r3, [r4, #12]
 800a246:	6020      	str	r0, [r4, #0]
 800a248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a24c:	81a3      	strh	r3, [r4, #12]
 800a24e:	9b00      	ldr	r3, [sp, #0]
 800a250:	6163      	str	r3, [r4, #20]
 800a252:	9b01      	ldr	r3, [sp, #4]
 800a254:	6120      	str	r0, [r4, #16]
 800a256:	b15b      	cbz	r3, 800a270 <__smakebuf_r+0x74>
 800a258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a25c:	4630      	mov	r0, r6
 800a25e:	f000 f8d1 	bl	800a404 <_isatty_r>
 800a262:	b128      	cbz	r0, 800a270 <__smakebuf_r+0x74>
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	f023 0303 	bic.w	r3, r3, #3
 800a26a:	f043 0301 	orr.w	r3, r3, #1
 800a26e:	81a3      	strh	r3, [r4, #12]
 800a270:	89a0      	ldrh	r0, [r4, #12]
 800a272:	4305      	orrs	r5, r0
 800a274:	81a5      	strh	r5, [r4, #12]
 800a276:	e7cd      	b.n	800a214 <__smakebuf_r+0x18>
 800a278:	0800a011 	.word	0x0800a011

0800a27c <_malloc_usable_size_r>:
 800a27c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a280:	1f18      	subs	r0, r3, #4
 800a282:	2b00      	cmp	r3, #0
 800a284:	bfbc      	itt	lt
 800a286:	580b      	ldrlt	r3, [r1, r0]
 800a288:	18c0      	addlt	r0, r0, r3
 800a28a:	4770      	bx	lr

0800a28c <_raise_r>:
 800a28c:	291f      	cmp	r1, #31
 800a28e:	b538      	push	{r3, r4, r5, lr}
 800a290:	4604      	mov	r4, r0
 800a292:	460d      	mov	r5, r1
 800a294:	d904      	bls.n	800a2a0 <_raise_r+0x14>
 800a296:	2316      	movs	r3, #22
 800a298:	6003      	str	r3, [r0, #0]
 800a29a:	f04f 30ff 	mov.w	r0, #4294967295
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a2a2:	b112      	cbz	r2, 800a2aa <_raise_r+0x1e>
 800a2a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2a8:	b94b      	cbnz	r3, 800a2be <_raise_r+0x32>
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f000 f830 	bl	800a310 <_getpid_r>
 800a2b0:	462a      	mov	r2, r5
 800a2b2:	4601      	mov	r1, r0
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2ba:	f000 b817 	b.w	800a2ec <_kill_r>
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d00a      	beq.n	800a2d8 <_raise_r+0x4c>
 800a2c2:	1c59      	adds	r1, r3, #1
 800a2c4:	d103      	bne.n	800a2ce <_raise_r+0x42>
 800a2c6:	2316      	movs	r3, #22
 800a2c8:	6003      	str	r3, [r0, #0]
 800a2ca:	2001      	movs	r0, #1
 800a2cc:	e7e7      	b.n	800a29e <_raise_r+0x12>
 800a2ce:	2400      	movs	r4, #0
 800a2d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	4798      	blx	r3
 800a2d8:	2000      	movs	r0, #0
 800a2da:	e7e0      	b.n	800a29e <_raise_r+0x12>

0800a2dc <raise>:
 800a2dc:	4b02      	ldr	r3, [pc, #8]	; (800a2e8 <raise+0xc>)
 800a2de:	4601      	mov	r1, r0
 800a2e0:	6818      	ldr	r0, [r3, #0]
 800a2e2:	f7ff bfd3 	b.w	800a28c <_raise_r>
 800a2e6:	bf00      	nop
 800a2e8:	20000090 	.word	0x20000090

0800a2ec <_kill_r>:
 800a2ec:	b538      	push	{r3, r4, r5, lr}
 800a2ee:	4d07      	ldr	r5, [pc, #28]	; (800a30c <_kill_r+0x20>)
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	4608      	mov	r0, r1
 800a2f6:	4611      	mov	r1, r2
 800a2f8:	602b      	str	r3, [r5, #0]
 800a2fa:	f7f7 ff2b 	bl	8002154 <_kill>
 800a2fe:	1c43      	adds	r3, r0, #1
 800a300:	d102      	bne.n	800a308 <_kill_r+0x1c>
 800a302:	682b      	ldr	r3, [r5, #0]
 800a304:	b103      	cbz	r3, 800a308 <_kill_r+0x1c>
 800a306:	6023      	str	r3, [r4, #0]
 800a308:	bd38      	pop	{r3, r4, r5, pc}
 800a30a:	bf00      	nop
 800a30c:	20000558 	.word	0x20000558

0800a310 <_getpid_r>:
 800a310:	f7f7 bf18 	b.w	8002144 <_getpid>

0800a314 <__sread>:
 800a314:	b510      	push	{r4, lr}
 800a316:	460c      	mov	r4, r1
 800a318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31c:	f000 f894 	bl	800a448 <_read_r>
 800a320:	2800      	cmp	r0, #0
 800a322:	bfab      	itete	ge
 800a324:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a326:	89a3      	ldrhlt	r3, [r4, #12]
 800a328:	181b      	addge	r3, r3, r0
 800a32a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a32e:	bfac      	ite	ge
 800a330:	6563      	strge	r3, [r4, #84]	; 0x54
 800a332:	81a3      	strhlt	r3, [r4, #12]
 800a334:	bd10      	pop	{r4, pc}

0800a336 <__swrite>:
 800a336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a33a:	461f      	mov	r7, r3
 800a33c:	898b      	ldrh	r3, [r1, #12]
 800a33e:	05db      	lsls	r3, r3, #23
 800a340:	4605      	mov	r5, r0
 800a342:	460c      	mov	r4, r1
 800a344:	4616      	mov	r6, r2
 800a346:	d505      	bpl.n	800a354 <__swrite+0x1e>
 800a348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a34c:	2302      	movs	r3, #2
 800a34e:	2200      	movs	r2, #0
 800a350:	f000 f868 	bl	800a424 <_lseek_r>
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a35a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a35e:	81a3      	strh	r3, [r4, #12]
 800a360:	4632      	mov	r2, r6
 800a362:	463b      	mov	r3, r7
 800a364:	4628      	mov	r0, r5
 800a366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a36a:	f000 b817 	b.w	800a39c <_write_r>

0800a36e <__sseek>:
 800a36e:	b510      	push	{r4, lr}
 800a370:	460c      	mov	r4, r1
 800a372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a376:	f000 f855 	bl	800a424 <_lseek_r>
 800a37a:	1c43      	adds	r3, r0, #1
 800a37c:	89a3      	ldrh	r3, [r4, #12]
 800a37e:	bf15      	itete	ne
 800a380:	6560      	strne	r0, [r4, #84]	; 0x54
 800a382:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a386:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a38a:	81a3      	strheq	r3, [r4, #12]
 800a38c:	bf18      	it	ne
 800a38e:	81a3      	strhne	r3, [r4, #12]
 800a390:	bd10      	pop	{r4, pc}

0800a392 <__sclose>:
 800a392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a396:	f000 b813 	b.w	800a3c0 <_close_r>
	...

0800a39c <_write_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	4d07      	ldr	r5, [pc, #28]	; (800a3bc <_write_r+0x20>)
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	4608      	mov	r0, r1
 800a3a4:	4611      	mov	r1, r2
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	602a      	str	r2, [r5, #0]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	f7f7 ff09 	bl	80021c2 <_write>
 800a3b0:	1c43      	adds	r3, r0, #1
 800a3b2:	d102      	bne.n	800a3ba <_write_r+0x1e>
 800a3b4:	682b      	ldr	r3, [r5, #0]
 800a3b6:	b103      	cbz	r3, 800a3ba <_write_r+0x1e>
 800a3b8:	6023      	str	r3, [r4, #0]
 800a3ba:	bd38      	pop	{r3, r4, r5, pc}
 800a3bc:	20000558 	.word	0x20000558

0800a3c0 <_close_r>:
 800a3c0:	b538      	push	{r3, r4, r5, lr}
 800a3c2:	4d06      	ldr	r5, [pc, #24]	; (800a3dc <_close_r+0x1c>)
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	4608      	mov	r0, r1
 800a3ca:	602b      	str	r3, [r5, #0]
 800a3cc:	f7f7 ff15 	bl	80021fa <_close>
 800a3d0:	1c43      	adds	r3, r0, #1
 800a3d2:	d102      	bne.n	800a3da <_close_r+0x1a>
 800a3d4:	682b      	ldr	r3, [r5, #0]
 800a3d6:	b103      	cbz	r3, 800a3da <_close_r+0x1a>
 800a3d8:	6023      	str	r3, [r4, #0]
 800a3da:	bd38      	pop	{r3, r4, r5, pc}
 800a3dc:	20000558 	.word	0x20000558

0800a3e0 <_fstat_r>:
 800a3e0:	b538      	push	{r3, r4, r5, lr}
 800a3e2:	4d07      	ldr	r5, [pc, #28]	; (800a400 <_fstat_r+0x20>)
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	4608      	mov	r0, r1
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	602b      	str	r3, [r5, #0]
 800a3ee:	f7f7 ff10 	bl	8002212 <_fstat>
 800a3f2:	1c43      	adds	r3, r0, #1
 800a3f4:	d102      	bne.n	800a3fc <_fstat_r+0x1c>
 800a3f6:	682b      	ldr	r3, [r5, #0]
 800a3f8:	b103      	cbz	r3, 800a3fc <_fstat_r+0x1c>
 800a3fa:	6023      	str	r3, [r4, #0]
 800a3fc:	bd38      	pop	{r3, r4, r5, pc}
 800a3fe:	bf00      	nop
 800a400:	20000558 	.word	0x20000558

0800a404 <_isatty_r>:
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	4d06      	ldr	r5, [pc, #24]	; (800a420 <_isatty_r+0x1c>)
 800a408:	2300      	movs	r3, #0
 800a40a:	4604      	mov	r4, r0
 800a40c:	4608      	mov	r0, r1
 800a40e:	602b      	str	r3, [r5, #0]
 800a410:	f7f7 ff0f 	bl	8002232 <_isatty>
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	d102      	bne.n	800a41e <_isatty_r+0x1a>
 800a418:	682b      	ldr	r3, [r5, #0]
 800a41a:	b103      	cbz	r3, 800a41e <_isatty_r+0x1a>
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	bd38      	pop	{r3, r4, r5, pc}
 800a420:	20000558 	.word	0x20000558

0800a424 <_lseek_r>:
 800a424:	b538      	push	{r3, r4, r5, lr}
 800a426:	4d07      	ldr	r5, [pc, #28]	; (800a444 <_lseek_r+0x20>)
 800a428:	4604      	mov	r4, r0
 800a42a:	4608      	mov	r0, r1
 800a42c:	4611      	mov	r1, r2
 800a42e:	2200      	movs	r2, #0
 800a430:	602a      	str	r2, [r5, #0]
 800a432:	461a      	mov	r2, r3
 800a434:	f7f7 ff08 	bl	8002248 <_lseek>
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	d102      	bne.n	800a442 <_lseek_r+0x1e>
 800a43c:	682b      	ldr	r3, [r5, #0]
 800a43e:	b103      	cbz	r3, 800a442 <_lseek_r+0x1e>
 800a440:	6023      	str	r3, [r4, #0]
 800a442:	bd38      	pop	{r3, r4, r5, pc}
 800a444:	20000558 	.word	0x20000558

0800a448 <_read_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4d07      	ldr	r5, [pc, #28]	; (800a468 <_read_r+0x20>)
 800a44c:	4604      	mov	r4, r0
 800a44e:	4608      	mov	r0, r1
 800a450:	4611      	mov	r1, r2
 800a452:	2200      	movs	r2, #0
 800a454:	602a      	str	r2, [r5, #0]
 800a456:	461a      	mov	r2, r3
 800a458:	f7f7 fe96 	bl	8002188 <_read>
 800a45c:	1c43      	adds	r3, r0, #1
 800a45e:	d102      	bne.n	800a466 <_read_r+0x1e>
 800a460:	682b      	ldr	r3, [r5, #0]
 800a462:	b103      	cbz	r3, 800a466 <_read_r+0x1e>
 800a464:	6023      	str	r3, [r4, #0]
 800a466:	bd38      	pop	{r3, r4, r5, pc}
 800a468:	20000558 	.word	0x20000558

0800a46c <_init>:
 800a46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46e:	bf00      	nop
 800a470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a472:	bc08      	pop	{r3}
 800a474:	469e      	mov	lr, r3
 800a476:	4770      	bx	lr

0800a478 <_fini>:
 800a478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47a:	bf00      	nop
 800a47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a47e:	bc08      	pop	{r3}
 800a480:	469e      	mov	lr, r3
 800a482:	4770      	bx	lr
