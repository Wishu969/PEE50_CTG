
PEE50_CTG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007464  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080075f4  080075f4  000175f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007690  08007690  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  08007690  08007690  00017690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007698  08007698  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007698  08007698  00017698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800769c  0800769c  0001769c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  080076a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200000f0  08007790  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08007790  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018678  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c4d  00000000  00000000  00038798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0003b3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  0003c820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b03  00000000  00000000  0003db40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015dee  00000000  00000000  00067643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109505  00000000  00000000  0007d431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00186936  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ba4  00000000  00000000  0018698c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080075dc 	.word	0x080075dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	080075dc 	.word	0x080075dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <ctg_print>:

/* @brief	uart print function with newline
 * @param	huart: pointer to the uart handle
 * @param	buffer: pointer to a char or string */
void ctg_print(UART_HandleTypeDef *huart, char * buffer)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), 10);
 8000d5e:	6838      	ldr	r0, [r7, #0]
 8000d60:	f7ff fa36 	bl	80001d0 <strlen>
 8000d64:	4603      	mov	r3, r0
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	230a      	movs	r3, #10
 8000d6a:	6839      	ldr	r1, [r7, #0]
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f005 fb3d 	bl	80063ec <HAL_UART_Transmit>
	/* print newline */
	char newline[2] = "\r\n";
 8000d72:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000d76:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t *)newline, 2, 10);
 8000d78:	f107 010c 	add.w	r1, r7, #12
 8000d7c:	230a      	movs	r3, #10
 8000d7e:	2202      	movs	r2, #2
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f005 fb33 	bl	80063ec <HAL_UART_Transmit>
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <ctg_read_adc>:

void ctg_read_adc(ADC_HandleTypeDef *hadc, float *voltage)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
	  /* (re)start ADC sampling */
	  HAL_ADC_Start(hadc);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f001 fac0 	bl	8002320 <HAL_ADC_Start>

	  /* poll 1ms for conversion */
	  HAL_ADC_PollForConversion(hadc, 1);
 8000da0:	2101      	movs	r1, #1
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f001 fb76 	bl	8002494 <HAL_ADC_PollForConversion>

	  /* read ADC value */
	  uint32_t sample = HAL_ADC_GetValue(hadc);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f001 fc4b 	bl	8002644 <HAL_ADC_GetValue>
 8000dae:	60f8      	str	r0, [r7, #12]

	  /* convert to voltage */
	  *voltage = ((float)sample * (float)3.3);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	ee07 3a90 	vmov	s15, r3
 8000db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dba:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000de4 <ctg_read_adc+0x54>
 8000dbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	edc3 7a00 	vstr	s15, [r3]
	  /* divide voltage by 4096  */
	  *voltage = *voltage / 4096;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	ed93 7a00 	vldr	s14, [r3]
 8000dce:	eddf 6a06 	vldr	s13, [pc, #24]	; 8000de8 <ctg_read_adc+0x58>
 8000dd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	edc3 7a00 	vstr	s15, [r3]
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40533333 	.word	0x40533333
 8000de8:	45800000 	.word	0x45800000
 8000dec:	00000000 	.word	0x00000000

08000df0 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */
/* Timer interrupt for heart rate and respitory rate */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a3f      	ldr	r2, [pc, #252]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d102      	bne.n	8000e06 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		bHeart = true;
 8000e00:	4b3e      	ldr	r3, [pc, #248]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
	}
	/* read adc */
	ctg_read_adc(&hadc1,&voltage);
 8000e06:	493e      	ldr	r1, [pc, #248]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000e08:	483e      	ldr	r0, [pc, #248]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000e0a:	f7ff ffc1 	bl	8000d90 <ctg_read_adc>

	/* heart beat detected */
	if(voltage > 3)
 8000e0e:	4b3c      	ldr	r3, [pc, #240]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000e10:	edd3 7a00 	vldr	s15, [r3]
 8000e14:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000e18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e20:	dc00      	bgt.n	8000e24 <HAL_TIM_PeriodElapsedCallback+0x34>
			strncpy(array,"",7);
			bpm = 0;
			bHeart = false;
		}
	}
}
 8000e22:	e05e      	b.n	8000ee2 <HAL_TIM_PeriodElapsedCallback+0xf2>
		new_time = HAL_GetTick();
 8000e24:	f000 ff12 	bl	8001c4c <HAL_GetTick>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4a37      	ldr	r2, [pc, #220]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000e2c:	6013      	str	r3, [r2, #0]
		current_time = new_time - previous_time;
 8000e2e:	4b36      	ldr	r3, [pc, #216]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b36      	ldr	r3, [pc, #216]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	4a35      	ldr	r2, [pc, #212]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000e3a:	6013      	str	r3, [r2, #0]
		previous_time = new_time;
 8000e3c:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a32      	ldr	r2, [pc, #200]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000e42:	6013      	str	r3, [r2, #0]
		if(current_time > 250 && bHeart)
 8000e44:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2bfa      	cmp	r3, #250	; 0xfa
 8000e4a:	d94a      	bls.n	8000ee2 <HAL_TIM_PeriodElapsedCallback+0xf2>
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d046      	beq.n	8000ee2 <HAL_TIM_PeriodElapsedCallback+0xf2>
			bpm = (1.0 / (current_time / 1000.0) ) * 60 * 0.91;
 8000e54:	4b2e      	ldr	r3, [pc, #184]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fb53 	bl	8000504 <__aeabi_ui2d>
 8000e5e:	f04f 0200 	mov.w	r2, #0
 8000e62:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000e64:	f7ff fcf2 	bl	800084c <__aeabi_ddiv>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	f04f 0000 	mov.w	r0, #0
 8000e70:	4929      	ldr	r1, [pc, #164]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000e72:	f7ff fceb 	bl	800084c <__aeabi_ddiv>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000e84:	f7ff fbb8 	bl	80005f8 <__aeabi_dmul>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	4619      	mov	r1, r3
 8000e90:	a317      	add	r3, pc, #92	; (adr r3, 8000ef0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e96:	f7ff fbaf 	bl	80005f8 <__aeabi_dmul>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff fdbb 	bl	8000a1c <__aeabi_d2uiz>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4a1d      	ldr	r2, [pc, #116]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000eaa:	6013      	str	r3, [r2, #0]
			sprintf(array,"%lu",bpm);
 8000eac:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	491b      	ldr	r1, [pc, #108]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f005 ff50 	bl	8006d5c <siprintf>
			ctg_print(&huart2, array);
 8000ebc:	f107 0308 	add.w	r3, r7, #8
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4819      	ldr	r0, [pc, #100]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000ec4:	f7ff ff46 	bl	8000d54 <ctg_print>
			strncpy(array,"",7);
 8000ec8:	f107 0308 	add.w	r3, r7, #8
 8000ecc:	2207      	movs	r2, #7
 8000ece:	4917      	ldr	r1, [pc, #92]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f005 ff63 	bl	8006d9c <strncpy>
			bpm = 0;
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
			bHeart = false;
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	f3af 8000 	nop.w
 8000ef0:	51eb851f 	.word	0x51eb851f
 8000ef4:	3fed1eb8 	.word	0x3fed1eb8
 8000ef8:	20000130 	.word	0x20000130
 8000efc:	20000120 	.word	0x20000120
 8000f00:	2000010c 	.word	0x2000010c
 8000f04:	20000224 	.word	0x20000224
 8000f08:	20000110 	.word	0x20000110
 8000f0c:	20000118 	.word	0x20000118
 8000f10:	20000114 	.word	0x20000114
 8000f14:	408f4000 	.word	0x408f4000
 8000f18:	3ff00000 	.word	0x3ff00000
 8000f1c:	404e0000 	.word	0x404e0000
 8000f20:	2000011c 	.word	0x2000011c
 8000f24:	080075f4 	.word	0x080075f4
 8000f28:	200002d4 	.word	0x200002d4
 8000f2c:	080075f8 	.word	0x080075f8

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f36:	f000 fe19 	bl	8001b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3a:	f000 f835 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3e:	f000 fb07 	bl	8001550 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f42:	f000 fae7 	bl	8001514 <MX_DMA_Init>
  MX_DAC1_Init();
 8000f46:	f000 f92d 	bl	80011a4 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000f4a:	f000 f95d 	bl	8001208 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000f4e:	f000 fab1 	bl	80014b4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f52:	f000 f8b1 	bl	80010b8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f56:	f000 f9c7 	bl	80012e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f5a:	f000 fa37 	bl	80013cc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* start dac with dma */
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sinewave32, 32, DAC_ALIGN_12B_R);
 8000f5e:	2300      	movs	r3, #0
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2320      	movs	r3, #32
 8000f64:	4a09      	ldr	r2, [pc, #36]	; (8000f8c <main+0x5c>)
 8000f66:	2100      	movs	r1, #0
 8000f68:	4809      	ldr	r0, [pc, #36]	; (8000f90 <main+0x60>)
 8000f6a:	f002 f9d5 	bl	8003318 <HAL_DAC_Start_DMA>

  /* start timer for dma */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f6e:	4809      	ldr	r0, [pc, #36]	; (8000f94 <main+0x64>)
 8000f70:	f004 fb7e 	bl	8005670 <HAL_TIM_Base_Start_IT>

  /* start timer with interrupt */
  HAL_TIM_Base_Start_IT(&htim3);
 8000f74:	4808      	ldr	r0, [pc, #32]	; (8000f98 <main+0x68>)
 8000f76:	f004 fb7b 	bl	8005670 <HAL_TIM_Base_Start_IT>

  /* start timer for uart sending*/
  HAL_TIM_Base_Start_IT(&htim4);
 8000f7a:	4808      	ldr	r0, [pc, #32]	; (8000f9c <main+0x6c>)
 8000f7c:	f004 fb78 	bl	8005670 <HAL_TIM_Base_Start_IT>

  /* test print */
  ctg_print(&huart2, "PEE50 cardiotacograph");
 8000f80:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <main+0x70>)
 8000f82:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <main+0x74>)
 8000f84:	f7ff fee6 	bl	8000d54 <ctg_print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <main+0x58>
 8000f8a:	bf00      	nop
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	2000017c 	.word	0x2000017c
 8000f94:	20000288 	.word	0x20000288
 8000f98:	20000190 	.word	0x20000190
 8000f9c:	20000130 	.word	0x20000130
 8000fa0:	080075fc 	.word	0x080075fc
 8000fa4:	200002d4 	.word	0x200002d4

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b0b8      	sub	sp, #224	; 0xe0
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fb2:	2244      	movs	r2, #68	; 0x44
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f005 fec8 	bl	8006d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2288      	movs	r2, #136	; 0x88
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f005 feba 	bl	8006d4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe6:	2310      	movs	r3, #16
 8000fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fec:	2302      	movs	r3, #2
 8000fee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ffe:	230a      	movs	r3, #10
 8001000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001004:	2307      	movs	r3, #7
 8001006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800100a:	2302      	movs	r3, #2
 800100c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001010:	2302      	movs	r3, #2
 8001012:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001016:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800101a:	4618      	mov	r0, r3
 800101c:	f003 f828 	bl	8004070 <HAL_RCC_OscConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001026:	f000 fafb 	bl	8001620 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102a:	230f      	movs	r3, #15
 800102c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001030:	2303      	movs	r3, #3
 8001032:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001048:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800104c:	2104      	movs	r1, #4
 800104e:	4618      	mov	r0, r3
 8001050:	f003 fbf4 	bl	800483c <HAL_RCC_ClockConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800105a:	f000 fae1 	bl	8001620 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800105e:	f244 0302 	movw	r3, #16386	; 0x4002
 8001062:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001064:	2300      	movs	r3, #0
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001068:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800106c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800106e:	2302      	movs	r3, #2
 8001070:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001072:	2301      	movs	r3, #1
 8001074:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001076:	2308      	movs	r3, #8
 8001078:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800107a:	2307      	movs	r3, #7
 800107c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800107e:	2302      	movs	r3, #2
 8001080:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001082:	2302      	movs	r3, #2
 8001084:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001086:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800108a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4618      	mov	r0, r3
 8001090:	f003 fdda 	bl	8004c48 <HAL_RCCEx_PeriphCLKConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800109a:	f000 fac1 	bl	8001620 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800109e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010a2:	f002 ff8f 	bl	8003fc4 <HAL_PWREx_ControlVoltageScaling>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80010ac:	f000 fab8 	bl	8001620 <Error_Handler>
  }
}
 80010b0:	bf00      	nop
 80010b2:	37e0      	adds	r7, #224	; 0xe0
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
 80010d8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80010da:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <MX_ADC1_Init+0xe0>)
 80010dc:	4a2f      	ldr	r2, [pc, #188]	; (800119c <MX_ADC1_Init+0xe4>)
 80010de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010e0:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <MX_ADC1_Init+0xe0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e6:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <MX_ADC1_Init+0xe0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <MX_ADC1_Init+0xe0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010f2:	4b29      	ldr	r3, [pc, #164]	; (8001198 <MX_ADC1_Init+0xe0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <MX_ADC1_Init+0xe0>)
 80010fa:	2204      	movs	r2, #4
 80010fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010fe:	4b26      	ldr	r3, [pc, #152]	; (8001198 <MX_ADC1_Init+0xe0>)
 8001100:	2200      	movs	r2, #0
 8001102:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <MX_ADC1_Init+0xe0>)
 8001106:	2200      	movs	r2, #0
 8001108:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800110a:	4b23      	ldr	r3, [pc, #140]	; (8001198 <MX_ADC1_Init+0xe0>)
 800110c:	2201      	movs	r2, #1
 800110e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <MX_ADC1_Init+0xe0>)
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <MX_ADC1_Init+0xe0>)
 800111a:	2200      	movs	r2, #0
 800111c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_ADC1_Init+0xe0>)
 8001120:	2200      	movs	r2, #0
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <MX_ADC1_Init+0xe0>)
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_ADC1_Init+0xe0>)
 800112e:	2200      	movs	r2, #0
 8001130:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_ADC1_Init+0xe0>)
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800113a:	4817      	ldr	r0, [pc, #92]	; (8001198 <MX_ADC1_Init+0xe0>)
 800113c:	f000 ff9a 	bl	8002074 <HAL_ADC_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001146:	f000 fa6b 	bl	8001620 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	4810      	ldr	r0, [pc, #64]	; (8001198 <MX_ADC1_Init+0xe0>)
 8001156:	f001 fefb 	bl	8002f50 <HAL_ADCEx_MultiModeConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001160:	f000 fa5e 	bl	8001620 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_ADC1_Init+0xe8>)
 8001166:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001168:	2306      	movs	r3, #6
 800116a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001170:	237f      	movs	r3, #127	; 0x7f
 8001172:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001174:	2304      	movs	r3, #4
 8001176:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_ADC1_Init+0xe0>)
 8001182:	f001 fa6d 	bl	8002660 <HAL_ADC_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800118c:	f000 fa48 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3728      	adds	r7, #40	; 0x28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000224 	.word	0x20000224
 800119c:	50040000 	.word	0x50040000
 80011a0:	14f00020 	.word	0x14f00020

080011a4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2224      	movs	r2, #36	; 0x24
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f005 fdcb 	bl	8006d4c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_DAC1_Init+0x5c>)
 80011b8:	4a12      	ldr	r2, [pc, #72]	; (8001204 <MX_DAC1_Init+0x60>)
 80011ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80011bc:	4810      	ldr	r0, [pc, #64]	; (8001200 <MX_DAC1_Init+0x5c>)
 80011be:	f002 f888 	bl	80032d2 <HAL_DAC_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80011c8:	f000 fa2a 	bl	8001620 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80011d0:	2324      	movs	r3, #36	; 0x24
 80011d2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2200      	movs	r2, #0
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	; (8001200 <MX_DAC1_Init+0x5c>)
 80011e8:	f002 f980 	bl	80034ec <HAL_DAC_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80011f2:	f000 fa15 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	; 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000017c 	.word	0x2000017c
 8001204:	40007400 	.word	0x40007400

08001208 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	; 0x30
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	f107 0320 	add.w	r3, r7, #32
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001234:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <MX_TIM2_Init+0xdc>)
 8001236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800123a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800123c:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <MX_TIM2_Init+0xdc>)
 800123e:	2200      	movs	r2, #0
 8001240:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <MX_TIM2_Init+0xdc>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24;
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <MX_TIM2_Init+0xdc>)
 800124a:	2218      	movs	r2, #24
 800124c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124e:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <MX_TIM2_Init+0xdc>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <MX_TIM2_Init+0xdc>)
 8001256:	2280      	movs	r2, #128	; 0x80
 8001258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800125a:	4822      	ldr	r0, [pc, #136]	; (80012e4 <MX_TIM2_Init+0xdc>)
 800125c:	f004 f9b0 	bl	80055c0 <HAL_TIM_Base_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001266:	f000 f9db 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	4619      	mov	r1, r3
 8001276:	481b      	ldr	r0, [pc, #108]	; (80012e4 <MX_TIM2_Init+0xdc>)
 8001278:	f004 fc7e 	bl	8005b78 <HAL_TIM_ConfigClockSource>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001282:	f000 f9cd 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001286:	4817      	ldr	r0, [pc, #92]	; (80012e4 <MX_TIM2_Init+0xdc>)
 8001288:	f004 fa62 	bl	8005750 <HAL_TIM_IC_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001292:	f000 f9c5 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001296:	2320      	movs	r3, #32
 8001298:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	480f      	ldr	r0, [pc, #60]	; (80012e4 <MX_TIM2_Init+0xdc>)
 80012a6:	f004 ffad 	bl	8006204 <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80012b0:	f000 f9b6 	bl	8001620 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012b8:	2301      	movs	r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2200      	movs	r2, #0
 80012c8:	4619      	mov	r1, r3
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <MX_TIM2_Init+0xdc>)
 80012cc:	f004 fbc0 	bl	8005a50 <HAL_TIM_IC_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80012d6:	f000 f9a3 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	3730      	adds	r7, #48	; 0x30
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000288 	.word	0x20000288

080012e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	; 0x30
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001314:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <MX_TIM3_Init+0xdc>)
 8001316:	4a2c      	ldr	r2, [pc, #176]	; (80013c8 <MX_TIM3_Init+0xe0>)
 8001318:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <MX_TIM3_Init+0xdc>)
 800131c:	2200      	movs	r2, #0
 800131e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <MX_TIM3_Init+0xdc>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001326:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <MX_TIM3_Init+0xdc>)
 8001328:	f644 6220 	movw	r2, #20000	; 0x4e20
 800132c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <MX_TIM3_Init+0xdc>)
 8001330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001334:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <MX_TIM3_Init+0xdc>)
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800133c:	4821      	ldr	r0, [pc, #132]	; (80013c4 <MX_TIM3_Init+0xdc>)
 800133e:	f004 f93f 	bl	80055c0 <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001348:	f000 f96a 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001350:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	4619      	mov	r1, r3
 8001358:	481a      	ldr	r0, [pc, #104]	; (80013c4 <MX_TIM3_Init+0xdc>)
 800135a:	f004 fc0d 	bl	8005b78 <HAL_TIM_ConfigClockSource>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001364:	f000 f95c 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001368:	4816      	ldr	r0, [pc, #88]	; (80013c4 <MX_TIM3_Init+0xdc>)
 800136a:	f004 f9f1 	bl	8005750 <HAL_TIM_IC_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001374:	f000 f954 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	480f      	ldr	r0, [pc, #60]	; (80013c4 <MX_TIM3_Init+0xdc>)
 8001388:	f004 ff3c 	bl	8006204 <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001392:	f000 f945 	bl	8001620 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800139a:	2301      	movs	r3, #1
 800139c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_TIM3_Init+0xdc>)
 80013ae:	f004 fb4f 	bl	8005a50 <HAL_TIM_IC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80013b8:	f000 f932 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3730      	adds	r7, #48	; 0x30
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000190 	.word	0x20000190
 80013c8:	40000400 	.word	0x40000400

080013cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	; 0x30
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d2:	f107 0320 	add.w	r3, r7, #32
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013f8:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <MX_TIM4_Init+0xe0>)
 80013fa:	4a2d      	ldr	r2, [pc, #180]	; (80014b0 <MX_TIM4_Init+0xe4>)
 80013fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20000;
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <MX_TIM4_Init+0xe0>)
 8001400:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001404:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001406:	4b29      	ldr	r3, [pc, #164]	; (80014ac <MX_TIM4_Init+0xe0>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8000;
 800140c:	4b27      	ldr	r3, [pc, #156]	; (80014ac <MX_TIM4_Init+0xe0>)
 800140e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001412:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001414:	4b25      	ldr	r3, [pc, #148]	; (80014ac <MX_TIM4_Init+0xe0>)
 8001416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800141a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800141c:	4b23      	ldr	r3, [pc, #140]	; (80014ac <MX_TIM4_Init+0xe0>)
 800141e:	2280      	movs	r2, #128	; 0x80
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001422:	4822      	ldr	r0, [pc, #136]	; (80014ac <MX_TIM4_Init+0xe0>)
 8001424:	f004 f8cc 	bl	80055c0 <HAL_TIM_Base_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800142e:	f000 f8f7 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001436:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001438:	f107 0320 	add.w	r3, r7, #32
 800143c:	4619      	mov	r1, r3
 800143e:	481b      	ldr	r0, [pc, #108]	; (80014ac <MX_TIM4_Init+0xe0>)
 8001440:	f004 fb9a 	bl	8005b78 <HAL_TIM_ConfigClockSource>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800144a:	f000 f8e9 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800144e:	4817      	ldr	r0, [pc, #92]	; (80014ac <MX_TIM4_Init+0xe0>)
 8001450:	f004 f97e 	bl	8005750 <HAL_TIM_IC_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800145a:	f000 f8e1 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	480f      	ldr	r0, [pc, #60]	; (80014ac <MX_TIM4_Init+0xe0>)
 800146e:	f004 fec9 	bl	8006204 <HAL_TIMEx_MasterConfigSynchronization>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001478:	f000 f8d2 	bl	8001620 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001480:	2301      	movs	r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	4619      	mov	r1, r3
 8001492:	4806      	ldr	r0, [pc, #24]	; (80014ac <MX_TIM4_Init+0xe0>)
 8001494:	f004 fadc 	bl	8005a50 <HAL_TIM_IC_ConfigChannel>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800149e:	f000 f8bf 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	3730      	adds	r7, #48	; 0x30
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000130 	.word	0x20000130
 80014b0:	40000800 	.word	0x40000800

080014b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <MX_USART2_UART_Init+0x58>)
 80014ba:	4a15      	ldr	r2, [pc, #84]	; (8001510 <MX_USART2_UART_Init+0x5c>)
 80014bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <MX_USART2_UART_Init+0x58>)
 80014c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_USART2_UART_Init+0x58>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_USART2_UART_Init+0x58>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_USART2_UART_Init+0x58>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_USART2_UART_Init+0x58>)
 80014da:	220c      	movs	r2, #12
 80014dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_USART2_UART_Init+0x58>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_USART2_UART_Init+0x58>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_USART2_UART_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_USART2_UART_Init+0x58>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_USART2_UART_Init+0x58>)
 80014f8:	f004 ff2a 	bl	8006350 <HAL_UART_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001502:	f000 f88d 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200002d4 	.word	0x200002d4
 8001510:	40004400 	.word	0x40004400

08001514 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_DMA_Init+0x38>)
 800151c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151e:	4a0b      	ldr	r2, [pc, #44]	; (800154c <MX_DMA_Init+0x38>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6493      	str	r3, [r2, #72]	; 0x48
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_DMA_Init+0x38>)
 8001528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	200d      	movs	r0, #13
 8001538:	f001 fe95 	bl	8003266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800153c:	200d      	movs	r0, #13
 800153e:	f001 feae 	bl	800329e <HAL_NVIC_EnableIRQ>

}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000

08001550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <MX_GPIO_Init+0xc4>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	4a2a      	ldr	r2, [pc, #168]	; (8001614 <MX_GPIO_Init+0xc4>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001572:	4b28      	ldr	r3, [pc, #160]	; (8001614 <MX_GPIO_Init+0xc4>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800157e:	4b25      	ldr	r3, [pc, #148]	; (8001614 <MX_GPIO_Init+0xc4>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	4a24      	ldr	r2, [pc, #144]	; (8001614 <MX_GPIO_Init+0xc4>)
 8001584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158a:	4b22      	ldr	r3, [pc, #136]	; (8001614 <MX_GPIO_Init+0xc4>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <MX_GPIO_Init+0xc4>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	4a1e      	ldr	r2, [pc, #120]	; (8001614 <MX_GPIO_Init+0xc4>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <MX_GPIO_Init+0xc4>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <MX_GPIO_Init+0xc4>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	4a18      	ldr	r2, [pc, #96]	; (8001614 <MX_GPIO_Init+0xc4>)
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <MX_GPIO_Init+0xc4>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2120      	movs	r1, #32
 80015ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ce:	f002 fcd3 	bl	8003f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_GPIO_Init+0xc8>)
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	480d      	ldr	r0, [pc, #52]	; (800161c <MX_GPIO_Init+0xcc>)
 80015e8:	f002 fb1c 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015ec:	2320      	movs	r3, #32
 80015ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001606:	f002 fb0d 	bl	8003c24 <HAL_GPIO_Init>

}
 800160a:	bf00      	nop
 800160c:	3728      	adds	r7, #40	; 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40021000 	.word	0x40021000
 8001618:	10210000 	.word	0x10210000
 800161c:	48000800 	.word	0x48000800

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001628:	e7fe      	b.n	8001628 <Error_Handler+0x8>
	...

0800162c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_MspInit+0x44>)
 8001634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001636:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_MspInit+0x44>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6613      	str	r3, [r2, #96]	; 0x60
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <HAL_MspInit+0x44>)
 8001640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_MspInit+0x44>)
 800164c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_MspInit+0x44>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	6593      	str	r3, [r2, #88]	; 0x58
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_MspInit+0x44>)
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000

08001674 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a15      	ldr	r2, [pc, #84]	; (80016e8 <HAL_ADC_MspInit+0x74>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d124      	bne.n	80016e0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_ADC_MspInit+0x78>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	4a14      	ldr	r2, [pc, #80]	; (80016ec <HAL_ADC_MspInit+0x78>)
 800169c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_ADC_MspInit+0x78>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_ADC_MspInit+0x78>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <HAL_ADC_MspInit+0x78>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_ADC_MspInit+0x78>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016c6:	2301      	movs	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016ca:	230b      	movs	r3, #11
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016dc:	f002 faa2 	bl	8003c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016e0:	bf00      	nop
 80016e2:	3728      	adds	r7, #40	; 0x28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	50040000 	.word	0x50040000
 80016ec:	40021000 	.word	0x40021000

080016f0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a2b      	ldr	r2, [pc, #172]	; (80017bc <HAL_DAC_MspInit+0xcc>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d150      	bne.n	80017b4 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001712:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_DAC_MspInit+0xd0>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001716:	4a2a      	ldr	r2, [pc, #168]	; (80017c0 <HAL_DAC_MspInit+0xd0>)
 8001718:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800171c:	6593      	str	r3, [r2, #88]	; 0x58
 800171e:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <HAL_DAC_MspInit+0xd0>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <HAL_DAC_MspInit+0xd0>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	4a24      	ldr	r2, [pc, #144]	; (80017c0 <HAL_DAC_MspInit+0xd0>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001736:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <HAL_DAC_MspInit+0xd0>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001742:	2310      	movs	r3, #16
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001746:	2303      	movs	r3, #3
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001758:	f002 fa64 	bl	8003c24 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_DAC_MspInit+0xd4>)
 800175e:	4a1a      	ldr	r2, [pc, #104]	; (80017c8 <HAL_DAC_MspInit+0xd8>)
 8001760:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <HAL_DAC_MspInit+0xd4>)
 8001764:	2206      	movs	r2, #6
 8001766:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001768:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <HAL_DAC_MspInit+0xd4>)
 800176a:	2210      	movs	r2, #16
 800176c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_DAC_MspInit+0xd4>)
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <HAL_DAC_MspInit+0xd4>)
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_DAC_MspInit+0xd4>)
 800177c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001780:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_DAC_MspInit+0xd4>)
 8001784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001788:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <HAL_DAC_MspInit+0xd4>)
 800178c:	2220      	movs	r2, #32
 800178e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_DAC_MspInit+0xd4>)
 8001792:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001796:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001798:	480a      	ldr	r0, [pc, #40]	; (80017c4 <HAL_DAC_MspInit+0xd4>)
 800179a:	f002 f84b 	bl	8003834 <HAL_DMA_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80017a4:	f7ff ff3c 	bl	8001620 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <HAL_DAC_MspInit+0xd4>)
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <HAL_DAC_MspInit+0xd4>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80017b4:	bf00      	nop
 80017b6:	3728      	adds	r7, #40	; 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40007400 	.word	0x40007400
 80017c0:	40021000 	.word	0x40021000
 80017c4:	200001dc 	.word	0x200001dc
 80017c8:	40020030 	.word	0x40020030

080017cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08e      	sub	sp, #56	; 0x38
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ec:	d12a      	bne.n	8001844 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ee:	4b4d      	ldr	r3, [pc, #308]	; (8001924 <HAL_TIM_Base_MspInit+0x158>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	4a4c      	ldr	r2, [pc, #304]	; (8001924 <HAL_TIM_Base_MspInit+0x158>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6593      	str	r3, [r2, #88]	; 0x58
 80017fa:	4b4a      	ldr	r3, [pc, #296]	; (8001924 <HAL_TIM_Base_MspInit+0x158>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	623b      	str	r3, [r7, #32]
 8001804:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_TIM_Base_MspInit+0x158>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	4a46      	ldr	r2, [pc, #280]	; (8001924 <HAL_TIM_Base_MspInit+0x158>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001812:	4b44      	ldr	r3, [pc, #272]	; (8001924 <HAL_TIM_Base_MspInit+0x158>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800181e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001830:	2301      	movs	r3, #1
 8001832:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001838:	4619      	mov	r1, r3
 800183a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183e:	f002 f9f1 	bl	8003c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001842:	e06b      	b.n	800191c <HAL_TIM_Base_MspInit+0x150>
  else if(htim_base->Instance==TIM3)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a37      	ldr	r2, [pc, #220]	; (8001928 <HAL_TIM_Base_MspInit+0x15c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d131      	bne.n	80018b2 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800184e:	4b35      	ldr	r3, [pc, #212]	; (8001924 <HAL_TIM_Base_MspInit+0x158>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	4a34      	ldr	r2, [pc, #208]	; (8001924 <HAL_TIM_Base_MspInit+0x158>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6593      	str	r3, [r2, #88]	; 0x58
 800185a:	4b32      	ldr	r3, [pc, #200]	; (8001924 <HAL_TIM_Base_MspInit+0x158>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	61bb      	str	r3, [r7, #24]
 8001864:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	4b2f      	ldr	r3, [pc, #188]	; (8001924 <HAL_TIM_Base_MspInit+0x158>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	4a2e      	ldr	r2, [pc, #184]	; (8001924 <HAL_TIM_Base_MspInit+0x158>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001872:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <HAL_TIM_Base_MspInit+0x158>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800187e:	2340      	movs	r3, #64	; 0x40
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800188e:	2302      	movs	r3, #2
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189c:	f002 f9c2 	bl	8003c24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2100      	movs	r1, #0
 80018a4:	201d      	movs	r0, #29
 80018a6:	f001 fcde 	bl	8003266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018aa:	201d      	movs	r0, #29
 80018ac:	f001 fcf7 	bl	800329e <HAL_NVIC_EnableIRQ>
}
 80018b0:	e034      	b.n	800191c <HAL_TIM_Base_MspInit+0x150>
  else if(htim_base->Instance==TIM4)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a1d      	ldr	r2, [pc, #116]	; (800192c <HAL_TIM_Base_MspInit+0x160>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d12f      	bne.n	800191c <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_TIM_Base_MspInit+0x158>)
 80018be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c0:	4a18      	ldr	r2, [pc, #96]	; (8001924 <HAL_TIM_Base_MspInit+0x158>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	6593      	str	r3, [r2, #88]	; 0x58
 80018c8:	4b16      	ldr	r3, [pc, #88]	; (8001924 <HAL_TIM_Base_MspInit+0x158>)
 80018ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <HAL_TIM_Base_MspInit+0x158>)
 80018d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d8:	4a12      	ldr	r2, [pc, #72]	; (8001924 <HAL_TIM_Base_MspInit+0x158>)
 80018da:	f043 0302 	orr.w	r3, r3, #2
 80018de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_TIM_Base_MspInit+0x158>)
 80018e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018ec:	2340      	movs	r3, #64	; 0x40
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018fc:	2302      	movs	r3, #2
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001904:	4619      	mov	r1, r3
 8001906:	480a      	ldr	r0, [pc, #40]	; (8001930 <HAL_TIM_Base_MspInit+0x164>)
 8001908:	f002 f98c 	bl	8003c24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	2100      	movs	r1, #0
 8001910:	201e      	movs	r0, #30
 8001912:	f001 fca8 	bl	8003266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001916:	201e      	movs	r0, #30
 8001918:	f001 fcc1 	bl	800329e <HAL_NVIC_EnableIRQ>
}
 800191c:	bf00      	nop
 800191e:	3738      	adds	r7, #56	; 0x38
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000
 8001928:	40000400 	.word	0x40000400
 800192c:	40000800 	.word	0x40000800
 8001930:	48000400 	.word	0x48000400

08001934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <HAL_UART_MspInit+0x7c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d128      	bne.n	80019a8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <HAL_UART_MspInit+0x80>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	4a16      	ldr	r2, [pc, #88]	; (80019b4 <HAL_UART_MspInit+0x80>)
 800195c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001960:	6593      	str	r3, [r2, #88]	; 0x58
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <HAL_UART_MspInit+0x80>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HAL_UART_MspInit+0x80>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a10      	ldr	r2, [pc, #64]	; (80019b4 <HAL_UART_MspInit+0x80>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_UART_MspInit+0x80>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001986:	230c      	movs	r3, #12
 8001988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001996:	2307      	movs	r3, #7
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a4:	f002 f93e 	bl	8003c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019a8:	bf00      	nop
 80019aa:	3728      	adds	r7, #40	; 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40004400 	.word	0x40004400
 80019b4:	40021000 	.word	0x40021000

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <NMI_Handler+0x4>

080019be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <HardFault_Handler+0x4>

080019c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <MemManage_Handler+0x4>

080019ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <BusFault_Handler+0x4>

080019d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <UsageFault_Handler+0x4>

080019d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a04:	f000 f90e 	bl	8001c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <DMA1_Channel3_IRQHandler+0x10>)
 8001a12:	f002 f827 	bl	8003a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200001dc 	.word	0x200001dc

08001a20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <TIM3_IRQHandler+0x10>)
 8001a26:	f003 fef4 	bl	8005812 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000190 	.word	0x20000190

08001a34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <TIM4_IRQHandler+0x10>)
 8001a3a:	f003 feea 	bl	8005812 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000130 	.word	0x20000130

08001a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a50:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <_sbrk+0x5c>)
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <_sbrk+0x60>)
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <_sbrk+0x64>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <_sbrk+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d207      	bcs.n	8001a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a78:	f005 f93e 	bl	8006cf8 <__errno>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	220c      	movs	r2, #12
 8001a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	e009      	b.n	8001a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8e:	4b07      	ldr	r3, [pc, #28]	; (8001aac <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a05      	ldr	r2, [pc, #20]	; (8001aac <_sbrk+0x64>)
 8001a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20018000 	.word	0x20018000
 8001aa8:	00000400 	.word	0x00000400
 8001aac:	20000124 	.word	0x20000124
 8001ab0:	20000370 	.word	0x20000370

08001ab4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ab8:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <SystemInit+0x5c>)
 8001aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001abe:	4a14      	ldr	r2, [pc, #80]	; (8001b10 <SystemInit+0x5c>)
 8001ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <SystemInit+0x60>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <SystemInit+0x60>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <SystemInit+0x60>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <SystemInit+0x60>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a0d      	ldr	r2, [pc, #52]	; (8001b14 <SystemInit+0x60>)
 8001ae0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ae4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ae8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <SystemInit+0x60>)
 8001aec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001af0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <SystemInit+0x60>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <SystemInit+0x60>)
 8001af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <SystemInit+0x60>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00
 8001b14:	40021000 	.word	0x40021000

08001b18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b1c:	f7ff ffca 	bl	8001ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b22:	e003      	b.n	8001b2c <LoopCopyDataInit>

08001b24 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b26:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b28:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b2a:	3104      	adds	r1, #4

08001b2c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b2c:	480a      	ldr	r0, [pc, #40]	; (8001b58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b30:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b32:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b34:	d3f6      	bcc.n	8001b24 <CopyDataInit>
	ldr	r2, =_sbss
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b38:	e002      	b.n	8001b40 <LoopFillZerobss>

08001b3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b3a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b3c:	f842 3b04 	str.w	r3, [r2], #4

08001b40 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <LoopForever+0x16>)
	cmp	r2, r3
 8001b42:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b44:	d3f9      	bcc.n	8001b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b46:	f005 f8dd 	bl	8006d04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b4a:	f7ff f9f1 	bl	8000f30 <main>

08001b4e <LoopForever>:

LoopForever:
    b LoopForever
 8001b4e:	e7fe      	b.n	8001b4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b50:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001b54:	080076a0 	.word	0x080076a0
	ldr	r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b5c:	200000f0 	.word	0x200000f0
	ldr	r2, =_sbss
 8001b60:	200000f0 	.word	0x200000f0
	ldr	r3, = _ebss
 8001b64:	2000036c 	.word	0x2000036c

08001b68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC1_2_IRQHandler>
	...

08001b6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_Init+0x3c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <HAL_Init+0x3c>)
 8001b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b80:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b82:	2003      	movs	r0, #3
 8001b84:	f001 fb64 	bl	8003250 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f000 f80f 	bl	8001bac <HAL_InitTick>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	71fb      	strb	r3, [r7, #7]
 8001b98:	e001      	b.n	8001b9e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b9a:	f7ff fd47 	bl	800162c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40022000 	.word	0x40022000

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_InitTick+0x6c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d023      	beq.n	8001c08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bc0:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <HAL_InitTick+0x70>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_InitTick+0x6c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f001 fb6f 	bl	80032ba <HAL_SYSTICK_Config>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10f      	bne.n	8001c02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b0f      	cmp	r3, #15
 8001be6:	d809      	bhi.n	8001bfc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be8:	2200      	movs	r2, #0
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	f001 fb39 	bl	8003266 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <HAL_InitTick+0x74>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e007      	b.n	8001c0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	e004      	b.n	8001c0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
 8001c06:	e001      	b.n	8001c0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000088 	.word	0x20000088
 8001c1c:	20000080 	.word	0x20000080
 8001c20:	20000084 	.word	0x20000084

08001c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x20>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x24>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_IncTick+0x24>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000088 	.word	0x20000088
 8001c48:	20000358 	.word	0x20000358

08001c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_GetTick+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000358 	.word	0x20000358

08001c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff ffee 	bl	8001c4c <HAL_GetTick>
 8001c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d005      	beq.n	8001c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_Delay+0x44>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c8a:	bf00      	nop
 8001c8c:	f7ff ffde 	bl	8001c4c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d8f7      	bhi.n	8001c8c <HAL_Delay+0x28>
  {
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000088 	.word	0x20000088

08001cac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	609a      	str	r2, [r3, #8]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3360      	adds	r3, #96	; 0x60
 8001d26:	461a      	mov	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <LL_ADC_SetOffset+0x44>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d4c:	bf00      	nop
 8001d4e:	371c      	adds	r7, #28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	03fff000 	.word	0x03fff000

08001d5c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3360      	adds	r3, #96	; 0x60
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3360      	adds	r3, #96	; 0x60
 8001d98:	461a      	mov	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001db2:	bf00      	nop
 8001db4:	371c      	adds	r7, #28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	3330      	adds	r3, #48	; 0x30
 8001df4:	461a      	mov	r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	4413      	add	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	211f      	movs	r1, #31
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	401a      	ands	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	0e9b      	lsrs	r3, r3, #26
 8001e1c:	f003 011f 	and.w	r1, r3, #31
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e30:	bf00      	nop
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3314      	adds	r3, #20
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	0e5b      	lsrs	r3, r3, #25
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	4413      	add	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	0d1b      	lsrs	r3, r3, #20
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	2107      	movs	r1, #7
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	401a      	ands	r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	0d1b      	lsrs	r3, r3, #20
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	431a      	orrs	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e86:	bf00      	nop
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eac:	43db      	mvns	r3, r3
 8001eae:	401a      	ands	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0318 	and.w	r3, r3, #24
 8001eb6:	4908      	ldr	r1, [pc, #32]	; (8001ed8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001eb8:	40d9      	lsrs	r1, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	400b      	ands	r3, r1
 8001ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	0007ffff 	.word	0x0007ffff

08001edc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 031f 	and.w	r3, r3, #31
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6093      	str	r3, [r2, #8]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f4c:	d101      	bne.n	8001f52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f9c:	d101      	bne.n	8001fa2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fc4:	f043 0201 	orr.w	r2, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <LL_ADC_IsEnabled+0x18>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <LL_ADC_IsEnabled+0x1a>
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800200e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002012:	f043 0204 	orr.w	r2, r3, #4
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	2b04      	cmp	r3, #4
 8002038:	d101      	bne.n	800203e <LL_ADC_REG_IsConversionOngoing+0x18>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b08      	cmp	r3, #8
 800205e:	d101      	bne.n	8002064 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e136      	b.n	80022fc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002098:	2b00      	cmp	r3, #0
 800209a:	d109      	bne.n	80020b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff fae9 	bl	8001674 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff3f 	bl	8001f38 <LL_ADC_IsDeepPowerDownEnabled>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d004      	beq.n	80020ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff25 	bl	8001f14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ff5a 	bl	8001f88 <LL_ADC_IsInternalRegulatorEnabled>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d115      	bne.n	8002106 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ff3e 	bl	8001f60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020e4:	4b87      	ldr	r3, [pc, #540]	; (8002304 <HAL_ADC_Init+0x290>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	099b      	lsrs	r3, r3, #6
 80020ea:	4a87      	ldr	r2, [pc, #540]	; (8002308 <HAL_ADC_Init+0x294>)
 80020ec:	fba2 2303 	umull	r2, r3, r2, r3
 80020f0:	099b      	lsrs	r3, r3, #6
 80020f2:	3301      	adds	r3, #1
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020f8:	e002      	b.n	8002100 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f9      	bne.n	80020fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ff3c 	bl	8001f88 <LL_ADC_IsInternalRegulatorEnabled>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10d      	bne.n	8002132 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211a:	f043 0210 	orr.w	r2, r3, #16
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	f043 0201 	orr.w	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ff75 	bl	8002026 <LL_ADC_REG_IsConversionOngoing>
 800213c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b00      	cmp	r3, #0
 8002148:	f040 80cf 	bne.w	80022ea <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	f040 80cb 	bne.w	80022ea <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002158:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800215c:	f043 0202 	orr.w	r2, r3, #2
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff35 	bl	8001fd8 <LL_ADC_IsEnabled>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d115      	bne.n	80021a0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002174:	4865      	ldr	r0, [pc, #404]	; (800230c <HAL_ADC_Init+0x298>)
 8002176:	f7ff ff2f 	bl	8001fd8 <LL_ADC_IsEnabled>
 800217a:	4604      	mov	r4, r0
 800217c:	4864      	ldr	r0, [pc, #400]	; (8002310 <HAL_ADC_Init+0x29c>)
 800217e:	f7ff ff2b 	bl	8001fd8 <LL_ADC_IsEnabled>
 8002182:	4603      	mov	r3, r0
 8002184:	431c      	orrs	r4, r3
 8002186:	4863      	ldr	r0, [pc, #396]	; (8002314 <HAL_ADC_Init+0x2a0>)
 8002188:	f7ff ff26 	bl	8001fd8 <LL_ADC_IsEnabled>
 800218c:	4603      	mov	r3, r0
 800218e:	4323      	orrs	r3, r4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d105      	bne.n	80021a0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4619      	mov	r1, r3
 800219a:	485f      	ldr	r0, [pc, #380]	; (8002318 <HAL_ADC_Init+0x2a4>)
 800219c:	f7ff fd86 	bl	8001cac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7e5b      	ldrb	r3, [r3, #25]
 80021a4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021aa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80021b0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80021b6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021be:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d106      	bne.n	80021dc <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	3b01      	subs	r3, #1
 80021d4:	045b      	lsls	r3, r3, #17
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d009      	beq.n	80021f8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	4b47      	ldr	r3, [pc, #284]	; (800231c <HAL_ADC_Init+0x2a8>)
 8002200:	4013      	ands	r3, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	69b9      	ldr	r1, [r7, #24]
 8002208:	430b      	orrs	r3, r1
 800220a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff08 	bl	8002026 <LL_ADC_REG_IsConversionOngoing>
 8002216:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff15 	bl	800204c <LL_ADC_INJ_IsConversionOngoing>
 8002222:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d13d      	bne.n	80022a6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d13a      	bne.n	80022a6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002234:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800223c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800224c:	f023 0302 	bic.w	r3, r3, #2
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	69b9      	ldr	r1, [r7, #24]
 8002256:	430b      	orrs	r3, r1
 8002258:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002260:	2b01      	cmp	r3, #1
 8002262:	d118      	bne.n	8002296 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800226e:	f023 0304 	bic.w	r3, r3, #4
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800227a:	4311      	orrs	r1, r2
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002280:	4311      	orrs	r1, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002286:	430a      	orrs	r2, r1
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	611a      	str	r2, [r3, #16]
 8002294:	e007      	b.n	80022a6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0201 	bic.w	r2, r2, #1
 80022a4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d10c      	bne.n	80022c8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	f023 010f 	bic.w	r1, r3, #15
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	1e5a      	subs	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30
 80022c6:	e007      	b.n	80022d8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 020f 	bic.w	r2, r2, #15
 80022d6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022dc:	f023 0303 	bic.w	r3, r3, #3
 80022e0:	f043 0201 	orr.w	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	655a      	str	r2, [r3, #84]	; 0x54
 80022e8:	e007      	b.n	80022fa <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	f043 0210 	orr.w	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3724      	adds	r7, #36	; 0x24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd90      	pop	{r4, r7, pc}
 8002304:	20000080 	.word	0x20000080
 8002308:	053e2d63 	.word	0x053e2d63
 800230c:	50040000 	.word	0x50040000
 8002310:	50040100 	.word	0x50040100
 8002314:	50040200 	.word	0x50040200
 8002318:	50040300 	.word	0x50040300
 800231c:	fff0c007 	.word	0xfff0c007

08002320 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002328:	4857      	ldr	r0, [pc, #348]	; (8002488 <HAL_ADC_Start+0x168>)
 800232a:	f7ff fdd7 	bl	8001edc <LL_ADC_GetMultimode>
 800232e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fe76 	bl	8002026 <LL_ADC_REG_IsConversionOngoing>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	f040 809c 	bne.w	800247a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_ADC_Start+0x30>
 800234c:	2302      	movs	r3, #2
 800234e:	e097      	b.n	8002480 <HAL_ADC_Start+0x160>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fd71 	bl	8002e40 <ADC_Enable>
 800235e:	4603      	mov	r3, r0
 8002360:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002362:	7dfb      	ldrb	r3, [r7, #23]
 8002364:	2b00      	cmp	r3, #0
 8002366:	f040 8083 	bne.w	8002470 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002372:	f023 0301 	bic.w	r3, r3, #1
 8002376:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a42      	ldr	r2, [pc, #264]	; (800248c <HAL_ADC_Start+0x16c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d002      	beq.n	800238e <HAL_ADC_Start+0x6e>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	e000      	b.n	8002390 <HAL_ADC_Start+0x70>
 800238e:	4b40      	ldr	r3, [pc, #256]	; (8002490 <HAL_ADC_Start+0x170>)
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	4293      	cmp	r3, r2
 8002396:	d002      	beq.n	800239e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d105      	bne.n	80023aa <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b6:	d106      	bne.n	80023c6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	f023 0206 	bic.w	r2, r3, #6
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	659a      	str	r2, [r3, #88]	; 0x58
 80023c4:	e002      	b.n	80023cc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	221c      	movs	r2, #28
 80023d2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a2a      	ldr	r2, [pc, #168]	; (800248c <HAL_ADC_Start+0x16c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d002      	beq.n	80023ec <HAL_ADC_Start+0xcc>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	e000      	b.n	80023ee <HAL_ADC_Start+0xce>
 80023ec:	4b28      	ldr	r3, [pc, #160]	; (8002490 <HAL_ADC_Start+0x170>)
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d008      	beq.n	8002408 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2b05      	cmp	r3, #5
 8002400:	d002      	beq.n	8002408 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b09      	cmp	r3, #9
 8002406:	d114      	bne.n	8002432 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800241e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fde7 	bl	8001ffe <LL_ADC_REG_StartConversion>
 8002430:	e025      	b.n	800247e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002436:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a12      	ldr	r2, [pc, #72]	; (800248c <HAL_ADC_Start+0x16c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d002      	beq.n	800244e <HAL_ADC_Start+0x12e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	e000      	b.n	8002450 <HAL_ADC_Start+0x130>
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_ADC_Start+0x170>)
 8002450:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00f      	beq.n	800247e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002462:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002466:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	655a      	str	r2, [r3, #84]	; 0x54
 800246e:	e006      	b.n	800247e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002478:	e001      	b.n	800247e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800247a:	2302      	movs	r3, #2
 800247c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800247e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	50040300 	.word	0x50040300
 800248c:	50040100 	.word	0x50040100
 8002490:	50040000 	.word	0x50040000

08002494 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800249e:	4866      	ldr	r0, [pc, #408]	; (8002638 <HAL_ADC_PollForConversion+0x1a4>)
 80024a0:	f7ff fd1c 	bl	8001edc <LL_ADC_GetMultimode>
 80024a4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d102      	bne.n	80024b4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80024ae:	2308      	movs	r3, #8
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	e02a      	b.n	800250a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d002      	beq.n	80024c6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b09      	cmp	r3, #9
 80024c4:	d111      	bne.n	80024ea <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d8:	f043 0220 	orr.w	r2, r3, #32
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0a4      	b.n	800262e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80024e4:	2304      	movs	r3, #4
 80024e6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80024e8:	e00f      	b.n	800250a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80024ea:	4853      	ldr	r0, [pc, #332]	; (8002638 <HAL_ADC_PollForConversion+0x1a4>)
 80024ec:	f7ff fd04 	bl	8001ef8 <LL_ADC_GetMultiDMATransfer>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fa:	f043 0220 	orr.w	r2, r3, #32
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e093      	b.n	800262e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002506:	2304      	movs	r3, #4
 8002508:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800250a:	f7ff fb9f 	bl	8001c4c <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002510:	e021      	b.n	8002556 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002518:	d01d      	beq.n	8002556 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800251a:	f7ff fb97 	bl	8001c4c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d302      	bcc.n	8002530 <HAL_ADC_PollForConversion+0x9c>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d112      	bne.n	8002556 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	4013      	ands	r3, r2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10b      	bne.n	8002556 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f043 0204 	orr.w	r2, r3, #4
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e06b      	b.n	800262e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	4013      	ands	r3, r2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0d6      	beq.n	8002512 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002568:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fc22 	bl	8001dbe <LL_ADC_REG_IsTriggerSourceSWStart>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01c      	beq.n	80025ba <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7e5b      	ldrb	r3, [r3, #25]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d118      	bne.n	80025ba <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b08      	cmp	r3, #8
 8002594:	d111      	bne.n	80025ba <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d105      	bne.n	80025ba <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1f      	ldr	r2, [pc, #124]	; (800263c <HAL_ADC_PollForConversion+0x1a8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d002      	beq.n	80025ca <HAL_ADC_PollForConversion+0x136>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	e000      	b.n	80025cc <HAL_ADC_PollForConversion+0x138>
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_ADC_PollForConversion+0x1ac>)
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d008      	beq.n	80025e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d002      	beq.n	80025e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b09      	cmp	r3, #9
 80025e4:	d104      	bne.n	80025f0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	e00c      	b.n	800260a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a11      	ldr	r2, [pc, #68]	; (800263c <HAL_ADC_PollForConversion+0x1a8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d002      	beq.n	8002600 <HAL_ADC_PollForConversion+0x16c>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	e000      	b.n	8002602 <HAL_ADC_PollForConversion+0x16e>
 8002600:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <HAL_ADC_PollForConversion+0x1ac>)
 8002602:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d104      	bne.n	800261a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2208      	movs	r2, #8
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	e008      	b.n	800262c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d103      	bne.n	800262c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	220c      	movs	r2, #12
 800262a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	50040300 	.word	0x50040300
 800263c:	50040100 	.word	0x50040100
 8002640:	50040000 	.word	0x50040000

08002644 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b0b6      	sub	sp, #216	; 0xd8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x22>
 800267e:	2302      	movs	r3, #2
 8002680:	e3c7      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x7b2>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fcc9 	bl	8002026 <LL_ADC_REG_IsConversionOngoing>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	f040 83a8 	bne.w	8002dec <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b05      	cmp	r3, #5
 80026a2:	d824      	bhi.n	80026ee <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	3b02      	subs	r3, #2
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d81b      	bhi.n	80026e6 <HAL_ADC_ConfigChannel+0x86>
 80026ae:	a201      	add	r2, pc, #4	; (adr r2, 80026b4 <HAL_ADC_ConfigChannel+0x54>)
 80026b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b4:	080026c5 	.word	0x080026c5
 80026b8:	080026cd 	.word	0x080026cd
 80026bc:	080026d5 	.word	0x080026d5
 80026c0:	080026dd 	.word	0x080026dd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	220c      	movs	r2, #12
 80026c8:	605a      	str	r2, [r3, #4]
          break;
 80026ca:	e011      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2212      	movs	r2, #18
 80026d0:	605a      	str	r2, [r3, #4]
          break;
 80026d2:	e00d      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2218      	movs	r2, #24
 80026d8:	605a      	str	r2, [r3, #4]
          break;
 80026da:	e009      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e2:	605a      	str	r2, [r3, #4]
          break;
 80026e4:	e004      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2206      	movs	r2, #6
 80026ea:	605a      	str	r2, [r3, #4]
          break;
 80026ec:	e000      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80026ee:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	f7ff fb71 	bl	8001de4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fc8d 	bl	8002026 <LL_ADC_REG_IsConversionOngoing>
 800270c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fc99 	bl	800204c <LL_ADC_INJ_IsConversionOngoing>
 800271a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800271e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 81a6 	bne.w	8002a74 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800272c:	2b00      	cmp	r3, #0
 800272e:	f040 81a1 	bne.w	8002a74 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6819      	ldr	r1, [r3, #0]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	461a      	mov	r2, r3
 8002740:	f7ff fb7c 	bl	8001e3c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	08db      	lsrs	r3, r3, #3
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b04      	cmp	r3, #4
 8002764:	d00a      	beq.n	800277c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	6919      	ldr	r1, [r3, #16]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002776:	f7ff facd 	bl	8001d14 <LL_ADC_SetOffset>
 800277a:	e17b      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff faea 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 8002788:	4603      	mov	r3, r0
 800278a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10a      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x148>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2100      	movs	r1, #0
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fadf 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 800279e:	4603      	mov	r3, r0
 80027a0:	0e9b      	lsrs	r3, r3, #26
 80027a2:	f003 021f 	and.w	r2, r3, #31
 80027a6:	e01e      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x186>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fad4 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80027d6:	2320      	movs	r3, #32
 80027d8:	e004      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80027da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d105      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x19e>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	0e9b      	lsrs	r3, r3, #26
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	e018      	b.n	8002830 <HAL_ADC_ConfigChannel+0x1d0>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002812:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002816:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800281a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002822:	2320      	movs	r3, #32
 8002824:	e004      	b.n	8002830 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002826:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002830:	429a      	cmp	r2, r3
 8002832:	d106      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2200      	movs	r2, #0
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff faa3 	bl	8001d88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2101      	movs	r1, #1
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fa87 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10a      	bne.n	800286e <HAL_ADC_ConfigChannel+0x20e>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2101      	movs	r1, #1
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fa7c 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 8002864:	4603      	mov	r3, r0
 8002866:	0e9b      	lsrs	r3, r3, #26
 8002868:	f003 021f 	and.w	r2, r3, #31
 800286c:	e01e      	b.n	80028ac <HAL_ADC_ConfigChannel+0x24c>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2101      	movs	r1, #1
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fa71 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 800287a:	4603      	mov	r3, r0
 800287c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800288c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002890:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002894:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800289c:	2320      	movs	r3, #32
 800289e:	e004      	b.n	80028aa <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80028a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x264>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	e018      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x296>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80028d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80028e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80028e8:	2320      	movs	r3, #32
 80028ea:	e004      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80028ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d106      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2200      	movs	r2, #0
 8002900:	2101      	movs	r1, #1
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fa40 	bl	8001d88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2102      	movs	r1, #2
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fa24 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 8002914:	4603      	mov	r3, r0
 8002916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10a      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x2d4>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2102      	movs	r1, #2
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fa19 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 800292a:	4603      	mov	r3, r0
 800292c:	0e9b      	lsrs	r3, r3, #26
 800292e:	f003 021f 	and.w	r2, r3, #31
 8002932:	e01e      	b.n	8002972 <HAL_ADC_ConfigChannel+0x312>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2102      	movs	r1, #2
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fa0e 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 8002940:	4603      	mov	r3, r0
 8002942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002952:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002956:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800295a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e004      	b.n	8002970 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002966:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297a:	2b00      	cmp	r3, #0
 800297c:	d105      	bne.n	800298a <HAL_ADC_ConfigChannel+0x32a>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	0e9b      	lsrs	r3, r3, #26
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	e016      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x358>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800299c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800299e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80029a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80029aa:	2320      	movs	r3, #32
 80029ac:	e004      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80029ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d106      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2200      	movs	r2, #0
 80029c2:	2102      	movs	r1, #2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff f9df 	bl	8001d88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2103      	movs	r1, #3
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff f9c3 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x396>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2103      	movs	r1, #3
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff f9b8 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 80029ec:	4603      	mov	r3, r0
 80029ee:	0e9b      	lsrs	r3, r3, #26
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	e017      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x3c6>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2103      	movs	r1, #3
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff f9ad 	bl	8001d5c <LL_ADC_GetOffsetChannel>
 8002a02:	4603      	mov	r3, r0
 8002a04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a10:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002a18:	2320      	movs	r3, #32
 8002a1a:	e003      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d105      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x3de>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	0e9b      	lsrs	r3, r3, #26
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	e011      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x402>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002a56:	2320      	movs	r3, #32
 8002a58:	e003      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5c:	fab3 f383 	clz	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d106      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2103      	movs	r1, #3
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff f98a 	bl	8001d88 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff faad 	bl	8001fd8 <LL_ADC_IsEnabled>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f040 813f 	bne.w	8002d04 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	6819      	ldr	r1, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	461a      	mov	r2, r3
 8002a94:	f7ff f9fe 	bl	8001e94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a8e      	ldr	r2, [pc, #568]	; (8002cd8 <HAL_ADC_ConfigChannel+0x678>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	f040 8130 	bne.w	8002d04 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10b      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x46c>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0e9b      	lsrs	r3, r3, #26
 8002aba:	3301      	adds	r3, #1
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2b09      	cmp	r3, #9
 8002ac2:	bf94      	ite	ls
 8002ac4:	2301      	movls	r3, #1
 8002ac6:	2300      	movhi	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	e019      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x4a0>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ada:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002adc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002ae4:	2320      	movs	r3, #32
 8002ae6:	e003      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002ae8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	3301      	adds	r3, #1
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	2b09      	cmp	r3, #9
 8002af8:	bf94      	ite	ls
 8002afa:	2301      	movls	r3, #1
 8002afc:	2300      	movhi	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d079      	beq.n	8002bf8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d107      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x4c0>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	0e9b      	lsrs	r3, r3, #26
 8002b16:	3301      	adds	r3, #1
 8002b18:	069b      	lsls	r3, r3, #26
 8002b1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b1e:	e015      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x4ec>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b30:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002b38:	2320      	movs	r3, #32
 8002b3a:	e003      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	3301      	adds	r3, #1
 8002b46:	069b      	lsls	r3, r3, #26
 8002b48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d109      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x50c>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	0e9b      	lsrs	r3, r3, #26
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	2101      	movs	r1, #1
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	e017      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x53c>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b74:	fa93 f3a3 	rbit	r3, r3
 8002b78:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b7c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002b84:	2320      	movs	r3, #32
 8002b86:	e003      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	3301      	adds	r3, #1
 8002b92:	f003 031f 	and.w	r3, r3, #31
 8002b96:	2101      	movs	r1, #1
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	ea42 0103 	orr.w	r1, r2, r3
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10a      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x562>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	0e9b      	lsrs	r3, r3, #26
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f003 021f 	and.w	r2, r3, #31
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	051b      	lsls	r3, r3, #20
 8002bc0:	e018      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x594>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002bda:	2320      	movs	r3, #32
 8002bdc:	e003      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	3301      	adds	r3, #1
 8002be8:	f003 021f 	and.w	r2, r3, #31
 8002bec:	4613      	mov	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	e080      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x5b4>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0e9b      	lsrs	r3, r3, #26
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	069b      	lsls	r3, r3, #26
 8002c0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c12:	e015      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x5e0>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002c2c:	2320      	movs	r3, #32
 8002c2e:	e003      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	3301      	adds	r3, #1
 8002c3a:	069b      	lsls	r3, r3, #26
 8002c3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d109      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x600>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	0e9b      	lsrs	r3, r3, #26
 8002c52:	3301      	adds	r3, #1
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	2101      	movs	r1, #1
 8002c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5e:	e017      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x630>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	61fb      	str	r3, [r7, #28]
  return result;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002c78:	2320      	movs	r3, #32
 8002c7a:	e003      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	3301      	adds	r3, #1
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c90:	ea42 0103 	orr.w	r1, r2, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10d      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x65c>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	0e9b      	lsrs	r3, r3, #26
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f003 021f 	and.w	r2, r3, #31
 8002cac:	4613      	mov	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3b1e      	subs	r3, #30
 8002cb4:	051b      	lsls	r3, r3, #20
 8002cb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cba:	e01d      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x698>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	fa93 f3a3 	rbit	r3, r3
 8002cc8:	613b      	str	r3, [r7, #16]
  return result;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002cd4:	2320      	movs	r3, #32
 8002cd6:	e005      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x684>
 8002cd8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f003 021f 	and.w	r2, r3, #31
 8002cea:	4613      	mov	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	3b1e      	subs	r3, #30
 8002cf2:	051b      	lsls	r3, r3, #20
 8002cf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	6892      	ldr	r2, [r2, #8]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	f7ff f89c 	bl	8001e3c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b44      	ldr	r3, [pc, #272]	; (8002e1c <HAL_ADC_ConfigChannel+0x7bc>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d07a      	beq.n	8002e06 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d10:	4843      	ldr	r0, [pc, #268]	; (8002e20 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d12:	f7fe fff1 	bl	8001cf8 <LL_ADC_GetCommonPathInternalCh>
 8002d16:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a41      	ldr	r2, [pc, #260]	; (8002e24 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d12c      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d126      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a3c      	ldr	r2, [pc, #240]	; (8002e28 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d004      	beq.n	8002d44 <HAL_ADC_ConfigChannel+0x6e4>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a3b      	ldr	r2, [pc, #236]	; (8002e2c <HAL_ADC_ConfigChannel+0x7cc>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d15d      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4834      	ldr	r0, [pc, #208]	; (8002e20 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d50:	f7fe ffbf 	bl	8001cd2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d54:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <HAL_ADC_ConfigChannel+0x7d0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	099b      	lsrs	r3, r3, #6
 8002d5a:	4a36      	ldr	r2, [pc, #216]	; (8002e34 <HAL_ADC_ConfigChannel+0x7d4>)
 8002d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d60:	099b      	lsrs	r3, r3, #6
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	4613      	mov	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d6e:	e002      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f9      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d7c:	e040      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a2d      	ldr	r2, [pc, #180]	; (8002e38 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d118      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x75a>
 8002d88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d112      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a23      	ldr	r2, [pc, #140]	; (8002e28 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d004      	beq.n	8002da8 <HAL_ADC_ConfigChannel+0x748>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <HAL_ADC_ConfigChannel+0x7cc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d12d      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002db0:	4619      	mov	r1, r3
 8002db2:	481b      	ldr	r0, [pc, #108]	; (8002e20 <HAL_ADC_ConfigChannel+0x7c0>)
 8002db4:	f7fe ff8d 	bl	8001cd2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db8:	e024      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1f      	ldr	r2, [pc, #124]	; (8002e3c <HAL_ADC_ConfigChannel+0x7dc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d120      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d11a      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <HAL_ADC_ConfigChannel+0x7c8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d115      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002de2:	4619      	mov	r1, r3
 8002de4:	480e      	ldr	r0, [pc, #56]	; (8002e20 <HAL_ADC_ConfigChannel+0x7c0>)
 8002de6:	f7fe ff74 	bl	8001cd2 <LL_ADC_SetCommonPathInternalCh>
 8002dea:	e00c      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df0:	f043 0220 	orr.w	r2, r3, #32
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002dfe:	e002      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e00:	bf00      	nop
 8002e02:	e000      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e0e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	37d8      	adds	r7, #216	; 0xd8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	80080000 	.word	0x80080000
 8002e20:	50040300 	.word	0x50040300
 8002e24:	c7520000 	.word	0xc7520000
 8002e28:	50040000 	.word	0x50040000
 8002e2c:	50040200 	.word	0x50040200
 8002e30:	20000080 	.word	0x20000080
 8002e34:	053e2d63 	.word	0x053e2d63
 8002e38:	cb840000 	.word	0xcb840000
 8002e3c:	80000001 	.word	0x80000001

08002e40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff f8c3 	bl	8001fd8 <LL_ADC_IsEnabled>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d14d      	bne.n	8002ef4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <ADC_Enable+0xc0>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00d      	beq.n	8002e82 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	f043 0210 	orr.w	r2, r3, #16
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e76:	f043 0201 	orr.w	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e039      	b.n	8002ef6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff f892 	bl	8001fb0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e8c:	f7fe fede 	bl	8001c4c <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e92:	e028      	b.n	8002ee6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff f89d 	bl	8001fd8 <LL_ADC_IsEnabled>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d104      	bne.n	8002eae <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff f881 	bl	8001fb0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002eae:	f7fe fecd 	bl	8001c4c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d914      	bls.n	8002ee6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d00d      	beq.n	8002ee6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ece:	f043 0210 	orr.w	r2, r3, #16
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	f043 0201 	orr.w	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e007      	b.n	8002ef6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d1cf      	bne.n	8002e94 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	8000003f 	.word	0x8000003f

08002f04 <LL_ADC_IsEnabled>:
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <LL_ADC_IsEnabled+0x18>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <LL_ADC_IsEnabled+0x1a>
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_ADC_REG_IsConversionOngoing>:
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d101      	bne.n	8002f42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b09f      	sub	sp, #124	; 0x7c
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e093      	b.n	8003096 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002f76:	2300      	movs	r3, #0
 8002f78:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d102      	bne.n	8002f8e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f88:	4b46      	ldr	r3, [pc, #280]	; (80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	e001      	b.n	8002f92 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10b      	bne.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9c:	f043 0220 	orr.w	r2, r3, #32
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e072      	b.n	8003096 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff ffb9 	bl	8002f2a <LL_ADC_REG_IsConversionOngoing>
 8002fb8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff ffb3 	bl	8002f2a <LL_ADC_REG_IsConversionOngoing>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d154      	bne.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d151      	bne.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fd0:	4b35      	ldr	r3, [pc, #212]	; (80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002fd2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d02c      	beq.n	8003036 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	6859      	ldr	r1, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fee:	035b      	lsls	r3, r3, #13
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ff8:	4829      	ldr	r0, [pc, #164]	; (80030a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ffa:	f7ff ff83 	bl	8002f04 <LL_ADC_IsEnabled>
 8002ffe:	4604      	mov	r4, r0
 8003000:	4828      	ldr	r0, [pc, #160]	; (80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003002:	f7ff ff7f 	bl	8002f04 <LL_ADC_IsEnabled>
 8003006:	4603      	mov	r3, r0
 8003008:	431c      	orrs	r4, r3
 800300a:	4828      	ldr	r0, [pc, #160]	; (80030ac <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800300c:	f7ff ff7a 	bl	8002f04 <LL_ADC_IsEnabled>
 8003010:	4603      	mov	r3, r0
 8003012:	4323      	orrs	r3, r4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d137      	bne.n	8003088 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003020:	f023 030f 	bic.w	r3, r3, #15
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	6811      	ldr	r1, [r2, #0]
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	6892      	ldr	r2, [r2, #8]
 800302c:	430a      	orrs	r2, r1
 800302e:	431a      	orrs	r2, r3
 8003030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003032:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003034:	e028      	b.n	8003088 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800303e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003040:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003042:	4817      	ldr	r0, [pc, #92]	; (80030a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003044:	f7ff ff5e 	bl	8002f04 <LL_ADC_IsEnabled>
 8003048:	4604      	mov	r4, r0
 800304a:	4816      	ldr	r0, [pc, #88]	; (80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800304c:	f7ff ff5a 	bl	8002f04 <LL_ADC_IsEnabled>
 8003050:	4603      	mov	r3, r0
 8003052:	431c      	orrs	r4, r3
 8003054:	4815      	ldr	r0, [pc, #84]	; (80030ac <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003056:	f7ff ff55 	bl	8002f04 <LL_ADC_IsEnabled>
 800305a:	4603      	mov	r3, r0
 800305c:	4323      	orrs	r3, r4
 800305e:	2b00      	cmp	r3, #0
 8003060:	d112      	bne.n	8003088 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800306a:	f023 030f 	bic.w	r3, r3, #15
 800306e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003070:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003072:	e009      	b.n	8003088 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003078:	f043 0220 	orr.w	r2, r3, #32
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003086:	e000      	b.n	800308a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003088:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003092:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003096:	4618      	mov	r0, r3
 8003098:	377c      	adds	r7, #124	; 0x7c
 800309a:	46bd      	mov	sp, r7
 800309c:	bd90      	pop	{r4, r7, pc}
 800309e:	bf00      	nop
 80030a0:	50040000 	.word	0x50040000
 80030a4:	50040100 	.word	0x50040100
 80030a8:	50040300 	.word	0x50040300
 80030ac:	50040200 	.word	0x50040200

080030b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030c0:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <__NVIC_SetPriorityGrouping+0x44>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030cc:	4013      	ands	r3, r2
 80030ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030e2:	4a04      	ldr	r2, [pc, #16]	; (80030f4 <__NVIC_SetPriorityGrouping+0x44>)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	60d3      	str	r3, [r2, #12]
}
 80030e8:	bf00      	nop
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <__NVIC_GetPriorityGrouping+0x18>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	0a1b      	lsrs	r3, r3, #8
 8003102:	f003 0307 	and.w	r3, r3, #7
}
 8003106:	4618      	mov	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	2b00      	cmp	r3, #0
 8003124:	db0b      	blt.n	800313e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	f003 021f 	and.w	r2, r3, #31
 800312c:	4907      	ldr	r1, [pc, #28]	; (800314c <__NVIC_EnableIRQ+0x38>)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	2001      	movs	r0, #1
 8003136:	fa00 f202 	lsl.w	r2, r0, r2
 800313a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	e000e100 	.word	0xe000e100

08003150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	6039      	str	r1, [r7, #0]
 800315a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800315c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003160:	2b00      	cmp	r3, #0
 8003162:	db0a      	blt.n	800317a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	b2da      	uxtb	r2, r3
 8003168:	490c      	ldr	r1, [pc, #48]	; (800319c <__NVIC_SetPriority+0x4c>)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	0112      	lsls	r2, r2, #4
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	440b      	add	r3, r1
 8003174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003178:	e00a      	b.n	8003190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	b2da      	uxtb	r2, r3
 800317e:	4908      	ldr	r1, [pc, #32]	; (80031a0 <__NVIC_SetPriority+0x50>)
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	3b04      	subs	r3, #4
 8003188:	0112      	lsls	r2, r2, #4
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	440b      	add	r3, r1
 800318e:	761a      	strb	r2, [r3, #24]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	e000e100 	.word	0xe000e100
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b089      	sub	sp, #36	; 0x24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f1c3 0307 	rsb	r3, r3, #7
 80031be:	2b04      	cmp	r3, #4
 80031c0:	bf28      	it	cs
 80031c2:	2304      	movcs	r3, #4
 80031c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3304      	adds	r3, #4
 80031ca:	2b06      	cmp	r3, #6
 80031cc:	d902      	bls.n	80031d4 <NVIC_EncodePriority+0x30>
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	3b03      	subs	r3, #3
 80031d2:	e000      	b.n	80031d6 <NVIC_EncodePriority+0x32>
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d8:	f04f 32ff 	mov.w	r2, #4294967295
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43da      	mvns	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	401a      	ands	r2, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ec:	f04f 31ff 	mov.w	r1, #4294967295
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	fa01 f303 	lsl.w	r3, r1, r3
 80031f6:	43d9      	mvns	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031fc:	4313      	orrs	r3, r2
         );
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3724      	adds	r7, #36	; 0x24
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
	...

0800320c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3b01      	subs	r3, #1
 8003218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800321c:	d301      	bcc.n	8003222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800321e:	2301      	movs	r3, #1
 8003220:	e00f      	b.n	8003242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003222:	4a0a      	ldr	r2, [pc, #40]	; (800324c <SysTick_Config+0x40>)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3b01      	subs	r3, #1
 8003228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800322a:	210f      	movs	r1, #15
 800322c:	f04f 30ff 	mov.w	r0, #4294967295
 8003230:	f7ff ff8e 	bl	8003150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <SysTick_Config+0x40>)
 8003236:	2200      	movs	r2, #0
 8003238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800323a:	4b04      	ldr	r3, [pc, #16]	; (800324c <SysTick_Config+0x40>)
 800323c:	2207      	movs	r2, #7
 800323e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	e000e010 	.word	0xe000e010

08003250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff ff29 	bl	80030b0 <__NVIC_SetPriorityGrouping>
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af00      	add	r7, sp, #0
 800326c:	4603      	mov	r3, r0
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
 8003272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003278:	f7ff ff3e 	bl	80030f8 <__NVIC_GetPriorityGrouping>
 800327c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	6978      	ldr	r0, [r7, #20]
 8003284:	f7ff ff8e 	bl	80031a4 <NVIC_EncodePriority>
 8003288:	4602      	mov	r2, r0
 800328a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800328e:	4611      	mov	r1, r2
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff ff5d 	bl	8003150 <__NVIC_SetPriority>
}
 8003296:	bf00      	nop
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	4603      	mov	r3, r0
 80032a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff ff31 	bl	8003114 <__NVIC_EnableIRQ>
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff ffa2 	bl	800320c <SysTick_Config>
 80032c8:	4603      	mov	r3, r0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e014      	b.n	800330e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	791b      	ldrb	r3, [r3, #4]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d105      	bne.n	80032fa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7fe f9fb 	bl	80016f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2202      	movs	r2, #2
 80032fe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	795b      	ldrb	r3, [r3, #5]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_DAC_Start_DMA+0x1e>
 8003332:	2302      	movs	r3, #2
 8003334:	e0ab      	b.n	800348e <HAL_DAC_Start_DMA+0x176>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2202      	movs	r2, #2
 8003340:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d12f      	bne.n	80033a8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4a52      	ldr	r2, [pc, #328]	; (8003498 <HAL_DAC_Start_DMA+0x180>)
 800334e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4a51      	ldr	r2, [pc, #324]	; (800349c <HAL_DAC_Start_DMA+0x184>)
 8003356:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4a50      	ldr	r2, [pc, #320]	; (80034a0 <HAL_DAC_Start_DMA+0x188>)
 800335e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800336e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	2b08      	cmp	r3, #8
 8003374:	d013      	beq.n	800339e <HAL_DAC_Start_DMA+0x86>
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d845      	bhi.n	8003408 <HAL_DAC_Start_DMA+0xf0>
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_DAC_Start_DMA+0x72>
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	2b04      	cmp	r3, #4
 8003386:	d005      	beq.n	8003394 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003388:	e03e      	b.n	8003408 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3308      	adds	r3, #8
 8003390:	613b      	str	r3, [r7, #16]
        break;
 8003392:	e03c      	b.n	800340e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	613b      	str	r3, [r7, #16]
        break;
 800339c:	e037      	b.n	800340e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3310      	adds	r3, #16
 80033a4:	613b      	str	r3, [r7, #16]
        break;
 80033a6:	e032      	b.n	800340e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4a3d      	ldr	r2, [pc, #244]	; (80034a4 <HAL_DAC_Start_DMA+0x18c>)
 80033ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a3c      	ldr	r2, [pc, #240]	; (80034a8 <HAL_DAC_Start_DMA+0x190>)
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4a3b      	ldr	r2, [pc, #236]	; (80034ac <HAL_DAC_Start_DMA+0x194>)
 80033be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033ce:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d013      	beq.n	80033fe <HAL_DAC_Start_DMA+0xe6>
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d817      	bhi.n	800340c <HAL_DAC_Start_DMA+0xf4>
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_DAC_Start_DMA+0xd2>
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d005      	beq.n	80033f4 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80033e8:	e010      	b.n	800340c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3314      	adds	r3, #20
 80033f0:	613b      	str	r3, [r7, #16]
        break;
 80033f2:	e00c      	b.n	800340e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3318      	adds	r3, #24
 80033fa:	613b      	str	r3, [r7, #16]
        break;
 80033fc:	e007      	b.n	800340e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	331c      	adds	r3, #28
 8003404:	613b      	str	r3, [r7, #16]
        break;
 8003406:	e002      	b.n	800340e <HAL_DAC_Start_DMA+0xf6>
        break;
 8003408:	bf00      	nop
 800340a:	e000      	b.n	800340e <HAL_DAC_Start_DMA+0xf6>
        break;
 800340c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d111      	bne.n	8003438 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003422:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6898      	ldr	r0, [r3, #8]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	f000 fab9 	bl	80039a4 <HAL_DMA_Start_IT>
 8003432:	4603      	mov	r3, r0
 8003434:	75fb      	strb	r3, [r7, #23]
 8003436:	e010      	b.n	800345a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003446:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	68d8      	ldr	r0, [r3, #12]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	f000 faa7 	bl	80039a4 <HAL_DMA_Start_IT>
 8003456:	4603      	mov	r3, r0
 8003458:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003460:	7dfb      	ldrb	r3, [r7, #23]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10c      	bne.n	8003480 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2201      	movs	r2, #1
 8003474:	409a      	lsls	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e005      	b.n	800348c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f043 0204 	orr.w	r2, r3, #4
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800348c:	7dfb      	ldrb	r3, [r7, #23]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	08003721 	.word	0x08003721
 800349c:	08003743 	.word	0x08003743
 80034a0:	0800375f 	.word	0x0800375f
 80034a4:	080037c9 	.word	0x080037c9
 80034a8:	080037eb 	.word	0x080037eb
 80034ac:	08003807 	.word	0x08003807

080034b0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	795b      	ldrb	r3, [r3, #5]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_DAC_ConfigChannel+0x1c>
 8003504:	2302      	movs	r3, #2
 8003506:	e107      	b.n	8003718 <HAL_DAC_ConfigChannel+0x22c>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2202      	movs	r2, #2
 8003512:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b04      	cmp	r3, #4
 800351a:	d174      	bne.n	8003606 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800351c:	f7fe fb96 	bl	8001c4c <HAL_GetTick>
 8003520:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d134      	bne.n	8003592 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003528:	e011      	b.n	800354e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800352a:	f7fe fb8f 	bl	8001c4c <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	d90a      	bls.n	800354e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f043 0208 	orr.w	r2, r3, #8
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2203      	movs	r2, #3
 8003548:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e0e4      	b.n	8003718 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e6      	bne.n	800352a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800355c:	2001      	movs	r0, #1
 800355e:	f7fe fb81 	bl	8001c64 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	6992      	ldr	r2, [r2, #24]
 800356a:	641a      	str	r2, [r3, #64]	; 0x40
 800356c:	e01e      	b.n	80035ac <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800356e:	f7fe fb6d 	bl	8001c4c <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b01      	cmp	r3, #1
 800357a:	d90a      	bls.n	8003592 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	f043 0208 	orr.w	r2, r3, #8
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2203      	movs	r2, #3
 800358c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e0c2      	b.n	8003718 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003598:	2b00      	cmp	r3, #0
 800359a:	dbe8      	blt.n	800356e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800359c:	2001      	movs	r0, #1
 800359e:	f7fe fb61 	bl	8001c64 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	6992      	ldr	r2, [r2, #24]
 80035aa:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80035bc:	fa01 f303 	lsl.w	r3, r1, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	ea02 0103 	and.w	r1, r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	69da      	ldr	r2, [r3, #28]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	409a      	lsls	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	21ff      	movs	r1, #255	; 0xff
 80035e8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	ea02 0103 	and.w	r1, r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	6a1a      	ldr	r2, [r3, #32]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	409a      	lsls	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d11d      	bne.n	800364a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	221f      	movs	r2, #31
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43db      	mvns	r3, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4013      	ands	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2207      	movs	r2, #7
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	431a      	orrs	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4313      	orrs	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6819      	ldr	r1, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43da      	mvns	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	400a      	ands	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	f640 72fc 	movw	r2, #4092	; 0xffc
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6819      	ldr	r1, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f003 0310 	and.w	r3, r3, #16
 80036fa:	22c0      	movs	r2, #192	; 0xc0
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43da      	mvns	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	400a      	ands	r2, r1
 8003708:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3720      	adds	r7, #32
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f7ff febe 	bl	80034b0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	711a      	strb	r2, [r3, #4]
}
 800373a:	bf00      	nop
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f7ff feb7 	bl	80034c4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003756:	bf00      	nop
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f043 0204 	orr.w	r2, r3, #4
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f7ff fead 	bl	80034d8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	711a      	strb	r2, [r3, #4]
}
 8003784:	bf00      	nop
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f7ff ffd8 	bl	800378c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	711a      	strb	r2, [r3, #4]
}
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f7ff ffd1 	bl	80037a0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f043 0204 	orr.w	r2, r3, #4
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f7ff ffc7 	bl	80037b4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2201      	movs	r2, #1
 800382a:	711a      	strb	r2, [r3, #4]
}
 800382c:	bf00      	nop
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e098      	b.n	8003978 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	4b4d      	ldr	r3, [pc, #308]	; (8003984 <HAL_DMA_Init+0x150>)
 800384e:	429a      	cmp	r2, r3
 8003850:	d80f      	bhi.n	8003872 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	4b4b      	ldr	r3, [pc, #300]	; (8003988 <HAL_DMA_Init+0x154>)
 800385a:	4413      	add	r3, r2
 800385c:	4a4b      	ldr	r2, [pc, #300]	; (800398c <HAL_DMA_Init+0x158>)
 800385e:	fba2 2303 	umull	r2, r3, r2, r3
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	009a      	lsls	r2, r3, #2
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a48      	ldr	r2, [pc, #288]	; (8003990 <HAL_DMA_Init+0x15c>)
 800386e:	641a      	str	r2, [r3, #64]	; 0x40
 8003870:	e00e      	b.n	8003890 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	4b46      	ldr	r3, [pc, #280]	; (8003994 <HAL_DMA_Init+0x160>)
 800387a:	4413      	add	r3, r2
 800387c:	4a43      	ldr	r2, [pc, #268]	; (800398c <HAL_DMA_Init+0x158>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	009a      	lsls	r2, r3, #2
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a42      	ldr	r2, [pc, #264]	; (8003998 <HAL_DMA_Init+0x164>)
 800388e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80038a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80038b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ea:	d039      	beq.n	8003960 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	4a27      	ldr	r2, [pc, #156]	; (8003990 <HAL_DMA_Init+0x15c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d11a      	bne.n	800392c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038f6:	4b29      	ldr	r3, [pc, #164]	; (800399c <HAL_DMA_Init+0x168>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	f003 031c 	and.w	r3, r3, #28
 8003902:	210f      	movs	r1, #15
 8003904:	fa01 f303 	lsl.w	r3, r1, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	4924      	ldr	r1, [pc, #144]	; (800399c <HAL_DMA_Init+0x168>)
 800390c:	4013      	ands	r3, r2
 800390e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003910:	4b22      	ldr	r3, [pc, #136]	; (800399c <HAL_DMA_Init+0x168>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6859      	ldr	r1, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391c:	f003 031c 	and.w	r3, r3, #28
 8003920:	fa01 f303 	lsl.w	r3, r1, r3
 8003924:	491d      	ldr	r1, [pc, #116]	; (800399c <HAL_DMA_Init+0x168>)
 8003926:	4313      	orrs	r3, r2
 8003928:	600b      	str	r3, [r1, #0]
 800392a:	e019      	b.n	8003960 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800392c:	4b1c      	ldr	r3, [pc, #112]	; (80039a0 <HAL_DMA_Init+0x16c>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003934:	f003 031c 	and.w	r3, r3, #28
 8003938:	210f      	movs	r1, #15
 800393a:	fa01 f303 	lsl.w	r3, r1, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	4917      	ldr	r1, [pc, #92]	; (80039a0 <HAL_DMA_Init+0x16c>)
 8003942:	4013      	ands	r3, r2
 8003944:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003946:	4b16      	ldr	r3, [pc, #88]	; (80039a0 <HAL_DMA_Init+0x16c>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6859      	ldr	r1, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	f003 031c 	and.w	r3, r3, #28
 8003956:	fa01 f303 	lsl.w	r3, r1, r3
 800395a:	4911      	ldr	r1, [pc, #68]	; (80039a0 <HAL_DMA_Init+0x16c>)
 800395c:	4313      	orrs	r3, r2
 800395e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	40020407 	.word	0x40020407
 8003988:	bffdfff8 	.word	0xbffdfff8
 800398c:	cccccccd 	.word	0xcccccccd
 8003990:	40020000 	.word	0x40020000
 8003994:	bffdfbf8 	.word	0xbffdfbf8
 8003998:	40020400 	.word	0x40020400
 800399c:	400200a8 	.word	0x400200a8
 80039a0:	400204a8 	.word	0x400204a8

080039a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_DMA_Start_IT+0x20>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e04b      	b.n	8003a5c <HAL_DMA_Start_IT+0xb8>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d13a      	bne.n	8003a4e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0201 	bic.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f8e0 	bl	8003bc2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d008      	beq.n	8003a1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 020e 	orr.w	r2, r2, #14
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	e00f      	b.n	8003a3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0204 	bic.w	r2, r2, #4
 8003a2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 020a 	orr.w	r2, r2, #10
 8003a3a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	e005      	b.n	8003a5a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a56:	2302      	movs	r3, #2
 8003a58:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	f003 031c 	and.w	r3, r3, #28
 8003a84:	2204      	movs	r2, #4
 8003a86:	409a      	lsls	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d026      	beq.n	8003ade <HAL_DMA_IRQHandler+0x7a>
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d021      	beq.n	8003ade <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d107      	bne.n	8003ab8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0204 	bic.w	r2, r2, #4
 8003ab6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	f003 021c 	and.w	r2, r3, #28
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	2104      	movs	r1, #4
 8003ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aca:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d071      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003adc:	e06c      	b.n	8003bb8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	f003 031c 	and.w	r3, r3, #28
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d02e      	beq.n	8003b50 <HAL_DMA_IRQHandler+0xec>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d029      	beq.n	8003b50 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0320 	and.w	r3, r3, #32
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10b      	bne.n	8003b22 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 020a 	bic.w	r2, r2, #10
 8003b18:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	f003 021c 	and.w	r2, r3, #28
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	2102      	movs	r1, #2
 8003b30:	fa01 f202 	lsl.w	r2, r1, r2
 8003b34:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d038      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b4e:	e033      	b.n	8003bb8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b54:	f003 031c 	and.w	r3, r3, #28
 8003b58:	2208      	movs	r2, #8
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d02a      	beq.n	8003bba <HAL_DMA_IRQHandler+0x156>
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d025      	beq.n	8003bba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 020e 	bic.w	r2, r2, #14
 8003b7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	f003 021c 	and.w	r2, r3, #28
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d004      	beq.n	8003bba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop
}
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b085      	sub	sp, #20
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
 8003bce:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	f003 021c 	and.w	r2, r3, #28
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	2101      	movs	r1, #1
 8003bde:	fa01 f202 	lsl.w	r2, r1, r2
 8003be2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d108      	bne.n	8003c06 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c04:	e007      	b.n	8003c16 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	60da      	str	r2, [r3, #12]
}
 8003c16:	bf00      	nop
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c32:	e17f      	b.n	8003f34 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	2101      	movs	r1, #1
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c40:	4013      	ands	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 8171 	beq.w	8003f2e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d00b      	beq.n	8003c6c <HAL_GPIO_Init+0x48>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d007      	beq.n	8003c6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c60:	2b11      	cmp	r3, #17
 8003c62:	d003      	beq.n	8003c6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b12      	cmp	r3, #18
 8003c6a:	d130      	bne.n	8003cce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	2203      	movs	r2, #3
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4013      	ands	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	091b      	lsrs	r3, r3, #4
 8003cb8:	f003 0201 	and.w	r2, r3, #1
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d118      	bne.n	8003d0c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4013      	ands	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	08db      	lsrs	r3, r3, #3
 8003cf6:	f003 0201 	and.w	r2, r3, #1
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	2203      	movs	r2, #3
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4013      	ands	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d003      	beq.n	8003d4c <HAL_GPIO_Init+0x128>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b12      	cmp	r3, #18
 8003d4a:	d123      	bne.n	8003d94 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	08da      	lsrs	r2, r3, #3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3208      	adds	r2, #8
 8003d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	220f      	movs	r2, #15
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	08da      	lsrs	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3208      	adds	r2, #8
 8003d8e:	6939      	ldr	r1, [r7, #16]
 8003d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	2203      	movs	r2, #3
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43db      	mvns	r3, r3
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4013      	ands	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 0203 	and.w	r2, r3, #3
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80ac 	beq.w	8003f2e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dd6:	4b5f      	ldr	r3, [pc, #380]	; (8003f54 <HAL_GPIO_Init+0x330>)
 8003dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dda:	4a5e      	ldr	r2, [pc, #376]	; (8003f54 <HAL_GPIO_Init+0x330>)
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	6613      	str	r3, [r2, #96]	; 0x60
 8003de2:	4b5c      	ldr	r3, [pc, #368]	; (8003f54 <HAL_GPIO_Init+0x330>)
 8003de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003dee:	4a5a      	ldr	r2, [pc, #360]	; (8003f58 <HAL_GPIO_Init+0x334>)
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	089b      	lsrs	r3, r3, #2
 8003df4:	3302      	adds	r3, #2
 8003df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	220f      	movs	r2, #15
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e18:	d025      	beq.n	8003e66 <HAL_GPIO_Init+0x242>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a4f      	ldr	r2, [pc, #316]	; (8003f5c <HAL_GPIO_Init+0x338>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d01f      	beq.n	8003e62 <HAL_GPIO_Init+0x23e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a4e      	ldr	r2, [pc, #312]	; (8003f60 <HAL_GPIO_Init+0x33c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d019      	beq.n	8003e5e <HAL_GPIO_Init+0x23a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a4d      	ldr	r2, [pc, #308]	; (8003f64 <HAL_GPIO_Init+0x340>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d013      	beq.n	8003e5a <HAL_GPIO_Init+0x236>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a4c      	ldr	r2, [pc, #304]	; (8003f68 <HAL_GPIO_Init+0x344>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00d      	beq.n	8003e56 <HAL_GPIO_Init+0x232>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a4b      	ldr	r2, [pc, #300]	; (8003f6c <HAL_GPIO_Init+0x348>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d007      	beq.n	8003e52 <HAL_GPIO_Init+0x22e>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a4a      	ldr	r2, [pc, #296]	; (8003f70 <HAL_GPIO_Init+0x34c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d101      	bne.n	8003e4e <HAL_GPIO_Init+0x22a>
 8003e4a:	2306      	movs	r3, #6
 8003e4c:	e00c      	b.n	8003e68 <HAL_GPIO_Init+0x244>
 8003e4e:	2307      	movs	r3, #7
 8003e50:	e00a      	b.n	8003e68 <HAL_GPIO_Init+0x244>
 8003e52:	2305      	movs	r3, #5
 8003e54:	e008      	b.n	8003e68 <HAL_GPIO_Init+0x244>
 8003e56:	2304      	movs	r3, #4
 8003e58:	e006      	b.n	8003e68 <HAL_GPIO_Init+0x244>
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e004      	b.n	8003e68 <HAL_GPIO_Init+0x244>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e002      	b.n	8003e68 <HAL_GPIO_Init+0x244>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <HAL_GPIO_Init+0x244>
 8003e66:	2300      	movs	r3, #0
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	f002 0203 	and.w	r2, r2, #3
 8003e6e:	0092      	lsls	r2, r2, #2
 8003e70:	4093      	lsls	r3, r2
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e78:	4937      	ldr	r1, [pc, #220]	; (8003f58 <HAL_GPIO_Init+0x334>)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	089b      	lsrs	r3, r3, #2
 8003e7e:	3302      	adds	r3, #2
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e86:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <HAL_GPIO_Init+0x350>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4013      	ands	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003eaa:	4a32      	ldr	r2, [pc, #200]	; (8003f74 <HAL_GPIO_Init+0x350>)
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003eb0:	4b30      	ldr	r3, [pc, #192]	; (8003f74 <HAL_GPIO_Init+0x350>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ed4:	4a27      	ldr	r2, [pc, #156]	; (8003f74 <HAL_GPIO_Init+0x350>)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003eda:	4b26      	ldr	r3, [pc, #152]	; (8003f74 <HAL_GPIO_Init+0x350>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003efe:	4a1d      	ldr	r2, [pc, #116]	; (8003f74 <HAL_GPIO_Init+0x350>)
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f04:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <HAL_GPIO_Init+0x350>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4013      	ands	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f28:	4a12      	ldr	r2, [pc, #72]	; (8003f74 <HAL_GPIO_Init+0x350>)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	3301      	adds	r3, #1
 8003f32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f47f ae78 	bne.w	8003c34 <HAL_GPIO_Init+0x10>
  }
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40010000 	.word	0x40010000
 8003f5c:	48000400 	.word	0x48000400
 8003f60:	48000800 	.word	0x48000800
 8003f64:	48000c00 	.word	0x48000c00
 8003f68:	48001000 	.word	0x48001000
 8003f6c:	48001400 	.word	0x48001400
 8003f70:	48001800 	.word	0x48001800
 8003f74:	40010400 	.word	0x40010400

08003f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	807b      	strh	r3, [r7, #2]
 8003f84:	4613      	mov	r3, r2
 8003f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f88:	787b      	ldrb	r3, [r7, #1]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f8e:	887a      	ldrh	r2, [r7, #2]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f94:	e002      	b.n	8003f9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f96:	887a      	ldrh	r2, [r7, #2]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003fac:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40007000 	.word	0x40007000

08003fc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd2:	d130      	bne.n	8004036 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fd4:	4b23      	ldr	r3, [pc, #140]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fe0:	d038      	beq.n	8004054 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fe2:	4b20      	ldr	r3, [pc, #128]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fea:	4a1e      	ldr	r2, [pc, #120]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ff0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2232      	movs	r2, #50	; 0x32
 8003ff8:	fb02 f303 	mul.w	r3, r2, r3
 8003ffc:	4a1b      	ldr	r2, [pc, #108]	; (800406c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	0c9b      	lsrs	r3, r3, #18
 8004004:	3301      	adds	r3, #1
 8004006:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004008:	e002      	b.n	8004010 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3b01      	subs	r3, #1
 800400e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004010:	4b14      	ldr	r3, [pc, #80]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401c:	d102      	bne.n	8004024 <HAL_PWREx_ControlVoltageScaling+0x60>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1f2      	bne.n	800400a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004024:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800402c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004030:	d110      	bne.n	8004054 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e00f      	b.n	8004056 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004036:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800403e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004042:	d007      	beq.n	8004054 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004044:	4b07      	ldr	r3, [pc, #28]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800404c:	4a05      	ldr	r2, [pc, #20]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800404e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004052:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40007000 	.word	0x40007000
 8004068:	20000080 	.word	0x20000080
 800406c:	431bde83 	.word	0x431bde83

08004070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e3d4      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004082:	4ba1      	ldr	r3, [pc, #644]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
 800408a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800408c:	4b9e      	ldr	r3, [pc, #632]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0310 	and.w	r3, r3, #16
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 80e4 	beq.w	800426c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d007      	beq.n	80040ba <HAL_RCC_OscConfig+0x4a>
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	2b0c      	cmp	r3, #12
 80040ae:	f040 808b 	bne.w	80041c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	f040 8087 	bne.w	80041c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040ba:	4b93      	ldr	r3, [pc, #588]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_RCC_OscConfig+0x62>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e3ac      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1a      	ldr	r2, [r3, #32]
 80040d6:	4b8c      	ldr	r3, [pc, #560]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d004      	beq.n	80040ec <HAL_RCC_OscConfig+0x7c>
 80040e2:	4b89      	ldr	r3, [pc, #548]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ea:	e005      	b.n	80040f8 <HAL_RCC_OscConfig+0x88>
 80040ec:	4b86      	ldr	r3, [pc, #536]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 80040ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d223      	bcs.n	8004144 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fd41 	bl	8004b88 <RCC_SetFlashLatencyFromMSIRange>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e38d      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004110:	4b7d      	ldr	r3, [pc, #500]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a7c      	ldr	r2, [pc, #496]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 8004116:	f043 0308 	orr.w	r3, r3, #8
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	4b7a      	ldr	r3, [pc, #488]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	4977      	ldr	r1, [pc, #476]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 800412a:	4313      	orrs	r3, r2
 800412c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800412e:	4b76      	ldr	r3, [pc, #472]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	021b      	lsls	r3, r3, #8
 800413c:	4972      	ldr	r1, [pc, #456]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 800413e:	4313      	orrs	r3, r2
 8004140:	604b      	str	r3, [r1, #4]
 8004142:	e025      	b.n	8004190 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004144:	4b70      	ldr	r3, [pc, #448]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a6f      	ldr	r2, [pc, #444]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 800414a:	f043 0308 	orr.w	r3, r3, #8
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	4b6d      	ldr	r3, [pc, #436]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	496a      	ldr	r1, [pc, #424]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004162:	4b69      	ldr	r3, [pc, #420]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	4965      	ldr	r1, [pc, #404]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 8004172:	4313      	orrs	r3, r2
 8004174:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d109      	bne.n	8004190 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fd01 	bl	8004b88 <RCC_SetFlashLatencyFromMSIRange>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e34d      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004190:	f000 fc36 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 8004194:	4602      	mov	r2, r0
 8004196:	4b5c      	ldr	r3, [pc, #368]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	091b      	lsrs	r3, r3, #4
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	495a      	ldr	r1, [pc, #360]	; (800430c <HAL_RCC_OscConfig+0x29c>)
 80041a2:	5ccb      	ldrb	r3, [r1, r3]
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
 80041ac:	4a58      	ldr	r2, [pc, #352]	; (8004310 <HAL_RCC_OscConfig+0x2a0>)
 80041ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041b0:	4b58      	ldr	r3, [pc, #352]	; (8004314 <HAL_RCC_OscConfig+0x2a4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fd fcf9 	bl	8001bac <HAL_InitTick>
 80041ba:	4603      	mov	r3, r0
 80041bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d052      	beq.n	800426a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	e331      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d032      	beq.n	8004236 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041d0:	4b4d      	ldr	r3, [pc, #308]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a4c      	ldr	r2, [pc, #304]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041dc:	f7fd fd36 	bl	8001c4c <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041e4:	f7fd fd32 	bl	8001c4c <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e31a      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041f6:	4b44      	ldr	r3, [pc, #272]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004202:	4b41      	ldr	r3, [pc, #260]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a40      	ldr	r2, [pc, #256]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 8004208:	f043 0308 	orr.w	r3, r3, #8
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	4b3e      	ldr	r3, [pc, #248]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	493b      	ldr	r1, [pc, #236]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 800421c:	4313      	orrs	r3, r2
 800421e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004220:	4b39      	ldr	r3, [pc, #228]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	021b      	lsls	r3, r3, #8
 800422e:	4936      	ldr	r1, [pc, #216]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 8004230:	4313      	orrs	r3, r2
 8004232:	604b      	str	r3, [r1, #4]
 8004234:	e01a      	b.n	800426c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004236:	4b34      	ldr	r3, [pc, #208]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a33      	ldr	r2, [pc, #204]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 800423c:	f023 0301 	bic.w	r3, r3, #1
 8004240:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004242:	f7fd fd03 	bl	8001c4c <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800424a:	f7fd fcff 	bl	8001c4c <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e2e7      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800425c:	4b2a      	ldr	r3, [pc, #168]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f0      	bne.n	800424a <HAL_RCC_OscConfig+0x1da>
 8004268:	e000      	b.n	800426c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800426a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d074      	beq.n	8004362 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	2b08      	cmp	r3, #8
 800427c:	d005      	beq.n	800428a <HAL_RCC_OscConfig+0x21a>
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2b0c      	cmp	r3, #12
 8004282:	d10e      	bne.n	80042a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2b03      	cmp	r3, #3
 8004288:	d10b      	bne.n	80042a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428a:	4b1f      	ldr	r3, [pc, #124]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d064      	beq.n	8004360 <HAL_RCC_OscConfig+0x2f0>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d160      	bne.n	8004360 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e2c4      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042aa:	d106      	bne.n	80042ba <HAL_RCC_OscConfig+0x24a>
 80042ac:	4b16      	ldr	r3, [pc, #88]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 80042b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	e01d      	b.n	80042f6 <HAL_RCC_OscConfig+0x286>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042c2:	d10c      	bne.n	80042de <HAL_RCC_OscConfig+0x26e>
 80042c4:	4b10      	ldr	r3, [pc, #64]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a0f      	ldr	r2, [pc, #60]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 80042ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0c      	ldr	r2, [pc, #48]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 80042d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	e00b      	b.n	80042f6 <HAL_RCC_OscConfig+0x286>
 80042de:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a09      	ldr	r2, [pc, #36]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 80042e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	4b07      	ldr	r3, [pc, #28]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a06      	ldr	r2, [pc, #24]	; (8004308 <HAL_RCC_OscConfig+0x298>)
 80042f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01c      	beq.n	8004338 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fe:	f7fd fca5 	bl	8001c4c <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004304:	e011      	b.n	800432a <HAL_RCC_OscConfig+0x2ba>
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000
 800430c:	08007614 	.word	0x08007614
 8004310:	20000080 	.word	0x20000080
 8004314:	20000084 	.word	0x20000084
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004318:	f7fd fc98 	bl	8001c4c <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b64      	cmp	r3, #100	; 0x64
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e280      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800432a:	4baf      	ldr	r3, [pc, #700]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCC_OscConfig+0x2a8>
 8004336:	e014      	b.n	8004362 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004338:	f7fd fc88 	bl	8001c4c <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004340:	f7fd fc84 	bl	8001c4c <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b64      	cmp	r3, #100	; 0x64
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e26c      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004352:	4ba5      	ldr	r3, [pc, #660]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x2d0>
 800435e:	e000      	b.n	8004362 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d060      	beq.n	8004430 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	2b04      	cmp	r3, #4
 8004372:	d005      	beq.n	8004380 <HAL_RCC_OscConfig+0x310>
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b0c      	cmp	r3, #12
 8004378:	d119      	bne.n	80043ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d116      	bne.n	80043ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004380:	4b99      	ldr	r3, [pc, #612]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_RCC_OscConfig+0x328>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e249      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004398:	4b93      	ldr	r3, [pc, #588]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	061b      	lsls	r3, r3, #24
 80043a6:	4990      	ldr	r1, [pc, #576]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043ac:	e040      	b.n	8004430 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d023      	beq.n	80043fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b6:	4b8c      	ldr	r3, [pc, #560]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a8b      	ldr	r2, [pc, #556]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 80043bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c2:	f7fd fc43 	bl	8001c4c <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ca:	f7fd fc3f 	bl	8001c4c <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e227      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043dc:	4b82      	ldr	r3, [pc, #520]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0f0      	beq.n	80043ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e8:	4b7f      	ldr	r3, [pc, #508]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	497c      	ldr	r1, [pc, #496]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	604b      	str	r3, [r1, #4]
 80043fc:	e018      	b.n	8004430 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043fe:	4b7a      	ldr	r3, [pc, #488]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a79      	ldr	r2, [pc, #484]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 8004404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440a:	f7fd fc1f 	bl	8001c4c <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004412:	f7fd fc1b 	bl	8001c4c <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e203      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004424:	4b70      	ldr	r3, [pc, #448]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f0      	bne.n	8004412 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d03c      	beq.n	80044b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d01c      	beq.n	800447e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004444:	4b68      	ldr	r3, [pc, #416]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 8004446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800444a:	4a67      	ldr	r2, [pc, #412]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004454:	f7fd fbfa 	bl	8001c4c <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800445c:	f7fd fbf6 	bl	8001c4c <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e1de      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800446e:	4b5e      	ldr	r3, [pc, #376]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 8004470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0ef      	beq.n	800445c <HAL_RCC_OscConfig+0x3ec>
 800447c:	e01b      	b.n	80044b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800447e:	4b5a      	ldr	r3, [pc, #360]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 8004480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004484:	4a58      	ldr	r2, [pc, #352]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 8004486:	f023 0301 	bic.w	r3, r3, #1
 800448a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448e:	f7fd fbdd 	bl	8001c4c <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004496:	f7fd fbd9 	bl	8001c4c <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e1c1      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044a8:	4b4f      	ldr	r3, [pc, #316]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 80044aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1ef      	bne.n	8004496 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 80a6 	beq.w	8004610 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044c4:	2300      	movs	r3, #0
 80044c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80044c8:	4b47      	ldr	r3, [pc, #284]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 80044ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10d      	bne.n	80044f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044d4:	4b44      	ldr	r3, [pc, #272]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 80044d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d8:	4a43      	ldr	r2, [pc, #268]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 80044da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044de:	6593      	str	r3, [r2, #88]	; 0x58
 80044e0:	4b41      	ldr	r3, [pc, #260]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 80044e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e8:	60bb      	str	r3, [r7, #8]
 80044ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ec:	2301      	movs	r3, #1
 80044ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044f0:	4b3e      	ldr	r3, [pc, #248]	; (80045ec <HAL_RCC_OscConfig+0x57c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d118      	bne.n	800452e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044fc:	4b3b      	ldr	r3, [pc, #236]	; (80045ec <HAL_RCC_OscConfig+0x57c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a3a      	ldr	r2, [pc, #232]	; (80045ec <HAL_RCC_OscConfig+0x57c>)
 8004502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004506:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004508:	f7fd fba0 	bl	8001c4c <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004510:	f7fd fb9c 	bl	8001c4c <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e184      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004522:	4b32      	ldr	r3, [pc, #200]	; (80045ec <HAL_RCC_OscConfig+0x57c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f0      	beq.n	8004510 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d108      	bne.n	8004548 <HAL_RCC_OscConfig+0x4d8>
 8004536:	4b2c      	ldr	r3, [pc, #176]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 8004538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453c:	4a2a      	ldr	r2, [pc, #168]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004546:	e024      	b.n	8004592 <HAL_RCC_OscConfig+0x522>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	2b05      	cmp	r3, #5
 800454e:	d110      	bne.n	8004572 <HAL_RCC_OscConfig+0x502>
 8004550:	4b25      	ldr	r3, [pc, #148]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004556:	4a24      	ldr	r2, [pc, #144]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 8004558:	f043 0304 	orr.w	r3, r3, #4
 800455c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004560:	4b21      	ldr	r3, [pc, #132]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004566:	4a20      	ldr	r2, [pc, #128]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004570:	e00f      	b.n	8004592 <HAL_RCC_OscConfig+0x522>
 8004572:	4b1d      	ldr	r3, [pc, #116]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004578:	4a1b      	ldr	r2, [pc, #108]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 800457a:	f023 0301 	bic.w	r3, r3, #1
 800457e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004582:	4b19      	ldr	r3, [pc, #100]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	4a17      	ldr	r2, [pc, #92]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 800458a:	f023 0304 	bic.w	r3, r3, #4
 800458e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d016      	beq.n	80045c8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459a:	f7fd fb57 	bl	8001c4c <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a0:	e00a      	b.n	80045b8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a2:	f7fd fb53 	bl	8001c4c <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e139      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCC_OscConfig+0x578>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0ed      	beq.n	80045a2 <HAL_RCC_OscConfig+0x532>
 80045c6:	e01a      	b.n	80045fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c8:	f7fd fb40 	bl	8001c4c <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045ce:	e00f      	b.n	80045f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d0:	f7fd fb3c 	bl	8001c4c <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	f241 3288 	movw	r2, #5000	; 0x1388
 80045de:	4293      	cmp	r3, r2
 80045e0:	d906      	bls.n	80045f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e122      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
 80045e6:	bf00      	nop
 80045e8:	40021000 	.word	0x40021000
 80045ec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045f0:	4b90      	ldr	r3, [pc, #576]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e8      	bne.n	80045d0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045fe:	7ffb      	ldrb	r3, [r7, #31]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d105      	bne.n	8004610 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004604:	4b8b      	ldr	r3, [pc, #556]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 8004606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004608:	4a8a      	ldr	r2, [pc, #552]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 800460a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800460e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 8108 	beq.w	800482a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	2b02      	cmp	r3, #2
 8004620:	f040 80d0 	bne.w	80047c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004624:	4b83      	ldr	r3, [pc, #524]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f003 0203 	and.w	r2, r3, #3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	429a      	cmp	r2, r3
 8004636:	d130      	bne.n	800469a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	3b01      	subs	r3, #1
 8004644:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004646:	429a      	cmp	r2, r3
 8004648:	d127      	bne.n	800469a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004654:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004656:	429a      	cmp	r2, r3
 8004658:	d11f      	bne.n	800469a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004664:	2a07      	cmp	r2, #7
 8004666:	bf14      	ite	ne
 8004668:	2201      	movne	r2, #1
 800466a:	2200      	moveq	r2, #0
 800466c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800466e:	4293      	cmp	r3, r2
 8004670:	d113      	bne.n	800469a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467c:	085b      	lsrs	r3, r3, #1
 800467e:	3b01      	subs	r3, #1
 8004680:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d109      	bne.n	800469a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	085b      	lsrs	r3, r3, #1
 8004692:	3b01      	subs	r3, #1
 8004694:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004696:	429a      	cmp	r2, r3
 8004698:	d06e      	beq.n	8004778 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b0c      	cmp	r3, #12
 800469e:	d069      	beq.n	8004774 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046a0:	4b64      	ldr	r3, [pc, #400]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d105      	bne.n	80046b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80046ac:	4b61      	ldr	r3, [pc, #388]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e0b7      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046bc:	4b5d      	ldr	r3, [pc, #372]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a5c      	ldr	r2, [pc, #368]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 80046c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046c8:	f7fd fac0 	bl	8001c4c <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d0:	f7fd fabc 	bl	8001c4c <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e0a4      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e2:	4b54      	ldr	r3, [pc, #336]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f0      	bne.n	80046d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ee:	4b51      	ldr	r3, [pc, #324]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	4b51      	ldr	r3, [pc, #324]	; (8004838 <HAL_RCC_OscConfig+0x7c8>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046fe:	3a01      	subs	r2, #1
 8004700:	0112      	lsls	r2, r2, #4
 8004702:	4311      	orrs	r1, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004708:	0212      	lsls	r2, r2, #8
 800470a:	4311      	orrs	r1, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004710:	0852      	lsrs	r2, r2, #1
 8004712:	3a01      	subs	r2, #1
 8004714:	0552      	lsls	r2, r2, #21
 8004716:	4311      	orrs	r1, r2
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800471c:	0852      	lsrs	r2, r2, #1
 800471e:	3a01      	subs	r2, #1
 8004720:	0652      	lsls	r2, r2, #25
 8004722:	4311      	orrs	r1, r2
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004728:	0912      	lsrs	r2, r2, #4
 800472a:	0452      	lsls	r2, r2, #17
 800472c:	430a      	orrs	r2, r1
 800472e:	4941      	ldr	r1, [pc, #260]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 8004730:	4313      	orrs	r3, r2
 8004732:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004734:	4b3f      	ldr	r3, [pc, #252]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a3e      	ldr	r2, [pc, #248]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 800473a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800473e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004740:	4b3c      	ldr	r3, [pc, #240]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	4a3b      	ldr	r2, [pc, #236]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 8004746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800474a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800474c:	f7fd fa7e 	bl	8001c4c <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004754:	f7fd fa7a 	bl	8001c4c <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e062      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004766:	4b33      	ldr	r3, [pc, #204]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004772:	e05a      	b.n	800482a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e059      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004778:	4b2e      	ldr	r3, [pc, #184]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d152      	bne.n	800482a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004784:	4b2b      	ldr	r3, [pc, #172]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a2a      	ldr	r2, [pc, #168]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 800478a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800478e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004790:	4b28      	ldr	r3, [pc, #160]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	4a27      	ldr	r2, [pc, #156]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 8004796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800479a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800479c:	f7fd fa56 	bl	8001c4c <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a4:	f7fd fa52 	bl	8001c4c <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e03a      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047b6:	4b1f      	ldr	r3, [pc, #124]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f0      	beq.n	80047a4 <HAL_RCC_OscConfig+0x734>
 80047c2:	e032      	b.n	800482a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	2b0c      	cmp	r3, #12
 80047c8:	d02d      	beq.n	8004826 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ca:	4b1a      	ldr	r3, [pc, #104]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a19      	ldr	r2, [pc, #100]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 80047d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047d4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80047d6:	4b17      	ldr	r3, [pc, #92]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d105      	bne.n	80047ee <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80047e2:	4b14      	ldr	r3, [pc, #80]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	4a13      	ldr	r2, [pc, #76]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 80047e8:	f023 0303 	bic.w	r3, r3, #3
 80047ec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80047ee:	4b11      	ldr	r3, [pc, #68]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	4a10      	ldr	r2, [pc, #64]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 80047f4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80047f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fe:	f7fd fa25 	bl	8001c4c <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004806:	f7fd fa21 	bl	8001c4c <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e009      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004818:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_RCC_OscConfig+0x7c4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1f0      	bne.n	8004806 <HAL_RCC_OscConfig+0x796>
 8004824:	e001      	b.n	800482a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3720      	adds	r7, #32
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40021000 	.word	0x40021000
 8004838:	f99d808c 	.word	0xf99d808c

0800483c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0c8      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004850:	4b66      	ldr	r3, [pc, #408]	; (80049ec <HAL_RCC_ClockConfig+0x1b0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d910      	bls.n	8004880 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485e:	4b63      	ldr	r3, [pc, #396]	; (80049ec <HAL_RCC_ClockConfig+0x1b0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 0207 	bic.w	r2, r3, #7
 8004866:	4961      	ldr	r1, [pc, #388]	; (80049ec <HAL_RCC_ClockConfig+0x1b0>)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	4313      	orrs	r3, r2
 800486c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	4b5f      	ldr	r3, [pc, #380]	; (80049ec <HAL_RCC_ClockConfig+0x1b0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d001      	beq.n	8004880 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0b0      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d04c      	beq.n	8004926 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b03      	cmp	r3, #3
 8004892:	d107      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004894:	4b56      	ldr	r3, [pc, #344]	; (80049f0 <HAL_RCC_ClockConfig+0x1b4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d121      	bne.n	80048e4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e09e      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d107      	bne.n	80048bc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ac:	4b50      	ldr	r3, [pc, #320]	; (80049f0 <HAL_RCC_ClockConfig+0x1b4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d115      	bne.n	80048e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e092      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d107      	bne.n	80048d4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048c4:	4b4a      	ldr	r3, [pc, #296]	; (80049f0 <HAL_RCC_ClockConfig+0x1b4>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d109      	bne.n	80048e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e086      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048d4:	4b46      	ldr	r3, [pc, #280]	; (80049f0 <HAL_RCC_ClockConfig+0x1b4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e07e      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048e4:	4b42      	ldr	r3, [pc, #264]	; (80049f0 <HAL_RCC_ClockConfig+0x1b4>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f023 0203 	bic.w	r2, r3, #3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	493f      	ldr	r1, [pc, #252]	; (80049f0 <HAL_RCC_ClockConfig+0x1b4>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f6:	f7fd f9a9 	bl	8001c4c <HAL_GetTick>
 80048fa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fc:	e00a      	b.n	8004914 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fe:	f7fd f9a5 	bl	8001c4c <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	f241 3288 	movw	r2, #5000	; 0x1388
 800490c:	4293      	cmp	r3, r2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e066      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004914:	4b36      	ldr	r3, [pc, #216]	; (80049f0 <HAL_RCC_ClockConfig+0x1b4>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 020c 	and.w	r2, r3, #12
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	429a      	cmp	r2, r3
 8004924:	d1eb      	bne.n	80048fe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d008      	beq.n	8004944 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004932:	4b2f      	ldr	r3, [pc, #188]	; (80049f0 <HAL_RCC_ClockConfig+0x1b4>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	492c      	ldr	r1, [pc, #176]	; (80049f0 <HAL_RCC_ClockConfig+0x1b4>)
 8004940:	4313      	orrs	r3, r2
 8004942:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004944:	4b29      	ldr	r3, [pc, #164]	; (80049ec <HAL_RCC_ClockConfig+0x1b0>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d210      	bcs.n	8004974 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004952:	4b26      	ldr	r3, [pc, #152]	; (80049ec <HAL_RCC_ClockConfig+0x1b0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f023 0207 	bic.w	r2, r3, #7
 800495a:	4924      	ldr	r1, [pc, #144]	; (80049ec <HAL_RCC_ClockConfig+0x1b0>)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	4313      	orrs	r3, r2
 8004960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004962:	4b22      	ldr	r3, [pc, #136]	; (80049ec <HAL_RCC_ClockConfig+0x1b0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e036      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004980:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <HAL_RCC_ClockConfig+0x1b4>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4918      	ldr	r1, [pc, #96]	; (80049f0 <HAL_RCC_ClockConfig+0x1b4>)
 800498e:	4313      	orrs	r3, r2
 8004990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800499e:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <HAL_RCC_ClockConfig+0x1b4>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	4910      	ldr	r1, [pc, #64]	; (80049f0 <HAL_RCC_ClockConfig+0x1b4>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049b2:	f000 f825 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 80049b6:	4602      	mov	r2, r0
 80049b8:	4b0d      	ldr	r3, [pc, #52]	; (80049f0 <HAL_RCC_ClockConfig+0x1b4>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	490c      	ldr	r1, [pc, #48]	; (80049f4 <HAL_RCC_ClockConfig+0x1b8>)
 80049c4:	5ccb      	ldrb	r3, [r1, r3]
 80049c6:	f003 031f 	and.w	r3, r3, #31
 80049ca:	fa22 f303 	lsr.w	r3, r2, r3
 80049ce:	4a0a      	ldr	r2, [pc, #40]	; (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80049d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049d2:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <HAL_RCC_ClockConfig+0x1c0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fd f8e8 	bl	8001bac <HAL_InitTick>
 80049dc:	4603      	mov	r3, r0
 80049de:	72fb      	strb	r3, [r7, #11]

  return status;
 80049e0:	7afb      	ldrb	r3, [r7, #11]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40022000 	.word	0x40022000
 80049f0:	40021000 	.word	0x40021000
 80049f4:	08007614 	.word	0x08007614
 80049f8:	20000080 	.word	0x20000080
 80049fc:	20000084 	.word	0x20000084

08004a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b089      	sub	sp, #36	; 0x24
 8004a04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a0e:	4b3e      	ldr	r3, [pc, #248]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a18:	4b3b      	ldr	r3, [pc, #236]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0x34>
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	2b0c      	cmp	r3, #12
 8004a2c:	d121      	bne.n	8004a72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d11e      	bne.n	8004a72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a34:	4b34      	ldr	r3, [pc, #208]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d107      	bne.n	8004a50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a40:	4b31      	ldr	r3, [pc, #196]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a46:	0a1b      	lsrs	r3, r3, #8
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	61fb      	str	r3, [r7, #28]
 8004a4e:	e005      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a50:	4b2d      	ldr	r3, [pc, #180]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a5c:	4a2b      	ldr	r2, [pc, #172]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10d      	bne.n	8004a88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a70:	e00a      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d102      	bne.n	8004a7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a78:	4b25      	ldr	r3, [pc, #148]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a7a:	61bb      	str	r3, [r7, #24]
 8004a7c:	e004      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a84:	4b23      	ldr	r3, [pc, #140]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	2b0c      	cmp	r3, #12
 8004a8c:	d134      	bne.n	8004af8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a8e:	4b1e      	ldr	r3, [pc, #120]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d003      	beq.n	8004aac <HAL_RCC_GetSysClockFreq+0xac>
 8004aa4:	e005      	b.n	8004ab2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004aa6:	4b1a      	ldr	r3, [pc, #104]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x110>)
 8004aa8:	617b      	str	r3, [r7, #20]
      break;
 8004aaa:	e005      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004aac:	4b19      	ldr	r3, [pc, #100]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x114>)
 8004aae:	617b      	str	r3, [r7, #20]
      break;
 8004ab0:	e002      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	617b      	str	r3, [r7, #20]
      break;
 8004ab6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ab8:	4b13      	ldr	r3, [pc, #76]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	091b      	lsrs	r3, r3, #4
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ac6:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	0a1b      	lsrs	r3, r3, #8
 8004acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	fb02 f203 	mul.w	r2, r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004adc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ade:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	0e5b      	lsrs	r3, r3, #25
 8004ae4:	f003 0303 	and.w	r3, r3, #3
 8004ae8:	3301      	adds	r3, #1
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004af8:	69bb      	ldr	r3, [r7, #24]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3724      	adds	r7, #36	; 0x24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	0800762c 	.word	0x0800762c
 8004b10:	00f42400 	.word	0x00f42400
 8004b14:	007a1200 	.word	0x007a1200

08004b18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b1c:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20000080 	.word	0x20000080

08004b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b34:	f7ff fff0 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	0a1b      	lsrs	r3, r3, #8
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	4904      	ldr	r1, [pc, #16]	; (8004b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b46:	5ccb      	ldrb	r3, [r1, r3]
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40021000 	.word	0x40021000
 8004b58:	08007624 	.word	0x08007624

08004b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b60:	f7ff ffda 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	0adb      	lsrs	r3, r3, #11
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4904      	ldr	r1, [pc, #16]	; (8004b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40021000 	.word	0x40021000
 8004b84:	08007624 	.word	0x08007624

08004b88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b90:	2300      	movs	r3, #0
 8004b92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b94:	4b2a      	ldr	r3, [pc, #168]	; (8004c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ba0:	f7ff fa02 	bl	8003fa8 <HAL_PWREx_GetVoltageRange>
 8004ba4:	6178      	str	r0, [r7, #20]
 8004ba6:	e014      	b.n	8004bd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ba8:	4b25      	ldr	r3, [pc, #148]	; (8004c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bac:	4a24      	ldr	r2, [pc, #144]	; (8004c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8004bb4:	4b22      	ldr	r3, [pc, #136]	; (8004c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004bc0:	f7ff f9f2 	bl	8003fa8 <HAL_PWREx_GetVoltageRange>
 8004bc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004bc6:	4b1e      	ldr	r3, [pc, #120]	; (8004c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bca:	4a1d      	ldr	r2, [pc, #116]	; (8004c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd8:	d10b      	bne.n	8004bf2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b80      	cmp	r3, #128	; 0x80
 8004bde:	d919      	bls.n	8004c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2ba0      	cmp	r3, #160	; 0xa0
 8004be4:	d902      	bls.n	8004bec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004be6:	2302      	movs	r3, #2
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	e013      	b.n	8004c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bec:	2301      	movs	r3, #1
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	e010      	b.n	8004c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b80      	cmp	r3, #128	; 0x80
 8004bf6:	d902      	bls.n	8004bfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	e00a      	b.n	8004c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b80      	cmp	r3, #128	; 0x80
 8004c02:	d102      	bne.n	8004c0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c04:	2302      	movs	r3, #2
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	e004      	b.n	8004c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b70      	cmp	r3, #112	; 0x70
 8004c0e:	d101      	bne.n	8004c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c10:	2301      	movs	r3, #1
 8004c12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c14:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f023 0207 	bic.w	r2, r3, #7
 8004c1c:	4909      	ldr	r1, [pc, #36]	; (8004c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c24:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d001      	beq.n	8004c36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40021000 	.word	0x40021000
 8004c44:	40022000 	.word	0x40022000

08004c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c50:	2300      	movs	r3, #0
 8004c52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c54:	2300      	movs	r3, #0
 8004c56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d041      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c6c:	d02a      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004c6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c72:	d824      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c78:	d008      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c7e:	d81e      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c88:	d010      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c8a:	e018      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c8c:	4b86      	ldr	r3, [pc, #536]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4a85      	ldr	r2, [pc, #532]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c98:	e015      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fabb 	bl	800521c <RCCEx_PLLSAI1_Config>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004caa:	e00c      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3320      	adds	r3, #32
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fba6 	bl	8005404 <RCCEx_PLLSAI2_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cbc:	e003      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	74fb      	strb	r3, [r7, #19]
      break;
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cc6:	7cfb      	ldrb	r3, [r7, #19]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10b      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ccc:	4b76      	ldr	r3, [pc, #472]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cda:	4973      	ldr	r1, [pc, #460]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ce2:	e001      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce4:	7cfb      	ldrb	r3, [r7, #19]
 8004ce6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d041      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cf8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cfc:	d02a      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004cfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d02:	d824      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d08:	d008      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d0e:	d81e      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d18:	d010      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d1a:	e018      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d1c:	4b62      	ldr	r3, [pc, #392]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	4a61      	ldr	r2, [pc, #388]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d28:	e015      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fa73 	bl	800521c <RCCEx_PLLSAI1_Config>
 8004d36:	4603      	mov	r3, r0
 8004d38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d3a:	e00c      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3320      	adds	r3, #32
 8004d40:	2100      	movs	r1, #0
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fb5e 	bl	8005404 <RCCEx_PLLSAI2_Config>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d4c:	e003      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	74fb      	strb	r3, [r7, #19]
      break;
 8004d52:	e000      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d56:	7cfb      	ldrb	r3, [r7, #19]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10b      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d5c:	4b52      	ldr	r3, [pc, #328]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d6a:	494f      	ldr	r1, [pc, #316]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d72:	e001      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d74:	7cfb      	ldrb	r3, [r7, #19]
 8004d76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80a0 	beq.w	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d86:	2300      	movs	r3, #0
 8004d88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d8a:	4b47      	ldr	r3, [pc, #284]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00d      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004da0:	4b41      	ldr	r3, [pc, #260]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da4:	4a40      	ldr	r2, [pc, #256]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004daa:	6593      	str	r3, [r2, #88]	; 0x58
 8004dac:	4b3e      	ldr	r3, [pc, #248]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004db8:	2301      	movs	r3, #1
 8004dba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dbc:	4b3b      	ldr	r3, [pc, #236]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a3a      	ldr	r2, [pc, #232]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dc8:	f7fc ff40 	bl	8001c4c <HAL_GetTick>
 8004dcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dce:	e009      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd0:	f7fc ff3c 	bl	8001c4c <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d902      	bls.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	74fb      	strb	r3, [r7, #19]
        break;
 8004de2:	e005      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004de4:	4b31      	ldr	r3, [pc, #196]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0ef      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004df0:	7cfb      	ldrb	r3, [r7, #19]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d15c      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004df6:	4b2c      	ldr	r3, [pc, #176]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01f      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d019      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e14:	4b24      	ldr	r3, [pc, #144]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e20:	4b21      	ldr	r3, [pc, #132]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e26:	4a20      	ldr	r2, [pc, #128]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e30:	4b1d      	ldr	r3, [pc, #116]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e36:	4a1c      	ldr	r2, [pc, #112]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e40:	4a19      	ldr	r2, [pc, #100]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d016      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e52:	f7fc fefb 	bl	8001c4c <HAL_GetTick>
 8004e56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e58:	e00b      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e5a:	f7fc fef7 	bl	8001c4c <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d902      	bls.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	74fb      	strb	r3, [r7, #19]
            break;
 8004e70:	e006      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e72:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0ec      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004e80:	7cfb      	ldrb	r3, [r7, #19]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10c      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e86:	4b08      	ldr	r3, [pc, #32]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e96:	4904      	ldr	r1, [pc, #16]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e9e:	e009      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ea0:	7cfb      	ldrb	r3, [r7, #19]
 8004ea2:	74bb      	strb	r3, [r7, #18]
 8004ea4:	e006      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004ea6:	bf00      	nop
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb0:	7cfb      	ldrb	r3, [r7, #19]
 8004eb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004eb4:	7c7b      	ldrb	r3, [r7, #17]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d105      	bne.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eba:	4b9e      	ldr	r3, [pc, #632]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ebe:	4a9d      	ldr	r2, [pc, #628]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ed2:	4b98      	ldr	r3, [pc, #608]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed8:	f023 0203 	bic.w	r2, r3, #3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	4994      	ldr	r1, [pc, #592]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ef4:	4b8f      	ldr	r3, [pc, #572]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efa:	f023 020c 	bic.w	r2, r3, #12
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f02:	498c      	ldr	r1, [pc, #560]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f16:	4b87      	ldr	r3, [pc, #540]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	4983      	ldr	r1, [pc, #524]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f38:	4b7e      	ldr	r3, [pc, #504]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f46:	497b      	ldr	r1, [pc, #492]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f5a:	4b76      	ldr	r3, [pc, #472]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f68:	4972      	ldr	r1, [pc, #456]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0320 	and.w	r3, r3, #32
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f7c:	4b6d      	ldr	r3, [pc, #436]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8a:	496a      	ldr	r1, [pc, #424]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f9e:	4b65      	ldr	r3, [pc, #404]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fac:	4961      	ldr	r1, [pc, #388]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fc0:	4b5c      	ldr	r3, [pc, #368]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fce:	4959      	ldr	r1, [pc, #356]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fe2:	4b54      	ldr	r3, [pc, #336]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff0:	4950      	ldr	r1, [pc, #320]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005004:	4b4b      	ldr	r3, [pc, #300]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005012:	4948      	ldr	r1, [pc, #288]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005026:	4b43      	ldr	r3, [pc, #268]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005034:	493f      	ldr	r1, [pc, #252]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d028      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005048:	4b3a      	ldr	r3, [pc, #232]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005056:	4937      	ldr	r1, [pc, #220]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005066:	d106      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005068:	4b32      	ldr	r3, [pc, #200]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	4a31      	ldr	r2, [pc, #196]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005072:	60d3      	str	r3, [r2, #12]
 8005074:	e011      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800507a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800507e:	d10c      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3304      	adds	r3, #4
 8005084:	2101      	movs	r1, #1
 8005086:	4618      	mov	r0, r3
 8005088:	f000 f8c8 	bl	800521c <RCCEx_PLLSAI1_Config>
 800508c:	4603      	mov	r3, r0
 800508e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005090:	7cfb      	ldrb	r3, [r7, #19]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005096:	7cfb      	ldrb	r3, [r7, #19]
 8005098:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d028      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050a6:	4b23      	ldr	r3, [pc, #140]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b4:	491f      	ldr	r1, [pc, #124]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050c4:	d106      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050c6:	4b1b      	ldr	r3, [pc, #108]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	4a1a      	ldr	r2, [pc, #104]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050d0:	60d3      	str	r3, [r2, #12]
 80050d2:	e011      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050dc:	d10c      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3304      	adds	r3, #4
 80050e2:	2101      	movs	r1, #1
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 f899 	bl	800521c <RCCEx_PLLSAI1_Config>
 80050ea:	4603      	mov	r3, r0
 80050ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050ee:	7cfb      	ldrb	r3, [r7, #19]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80050f4:	7cfb      	ldrb	r3, [r7, #19]
 80050f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d02b      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005104:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005112:	4908      	ldr	r1, [pc, #32]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800511e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005122:	d109      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005124:	4b03      	ldr	r3, [pc, #12]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	4a02      	ldr	r2, [pc, #8]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800512e:	60d3      	str	r3, [r2, #12]
 8005130:	e014      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005132:	bf00      	nop
 8005134:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800513c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005140:	d10c      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3304      	adds	r3, #4
 8005146:	2101      	movs	r1, #1
 8005148:	4618      	mov	r0, r3
 800514a:	f000 f867 	bl	800521c <RCCEx_PLLSAI1_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005152:	7cfb      	ldrb	r3, [r7, #19]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d02f      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005168:	4b2b      	ldr	r3, [pc, #172]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005176:	4928      	ldr	r1, [pc, #160]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005182:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005186:	d10d      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3304      	adds	r3, #4
 800518c:	2102      	movs	r1, #2
 800518e:	4618      	mov	r0, r3
 8005190:	f000 f844 	bl	800521c <RCCEx_PLLSAI1_Config>
 8005194:	4603      	mov	r3, r0
 8005196:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005198:	7cfb      	ldrb	r3, [r7, #19]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d014      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800519e:	7cfb      	ldrb	r3, [r7, #19]
 80051a0:	74bb      	strb	r3, [r7, #18]
 80051a2:	e011      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ac:	d10c      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3320      	adds	r3, #32
 80051b2:	2102      	movs	r1, #2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 f925 	bl	8005404 <RCCEx_PLLSAI2_Config>
 80051ba:	4603      	mov	r3, r0
 80051bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051be:	7cfb      	ldrb	r3, [r7, #19]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80051c4:	7cfb      	ldrb	r3, [r7, #19]
 80051c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051d4:	4b10      	ldr	r3, [pc, #64]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051e2:	490d      	ldr	r1, [pc, #52]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00b      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051f6:	4b08      	ldr	r3, [pc, #32]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005206:	4904      	ldr	r1, [pc, #16]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800520e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40021000 	.word	0x40021000

0800521c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800522a:	4b75      	ldr	r3, [pc, #468]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d018      	beq.n	8005268 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005236:	4b72      	ldr	r3, [pc, #456]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f003 0203 	and.w	r2, r3, #3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d10d      	bne.n	8005262 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
       ||
 800524a:	2b00      	cmp	r3, #0
 800524c:	d009      	beq.n	8005262 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800524e:	4b6c      	ldr	r3, [pc, #432]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	091b      	lsrs	r3, r3, #4
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
       ||
 800525e:	429a      	cmp	r2, r3
 8005260:	d047      	beq.n	80052f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	73fb      	strb	r3, [r7, #15]
 8005266:	e044      	b.n	80052f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b03      	cmp	r3, #3
 800526e:	d018      	beq.n	80052a2 <RCCEx_PLLSAI1_Config+0x86>
 8005270:	2b03      	cmp	r3, #3
 8005272:	d825      	bhi.n	80052c0 <RCCEx_PLLSAI1_Config+0xa4>
 8005274:	2b01      	cmp	r3, #1
 8005276:	d002      	beq.n	800527e <RCCEx_PLLSAI1_Config+0x62>
 8005278:	2b02      	cmp	r3, #2
 800527a:	d009      	beq.n	8005290 <RCCEx_PLLSAI1_Config+0x74>
 800527c:	e020      	b.n	80052c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800527e:	4b60      	ldr	r3, [pc, #384]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d11d      	bne.n	80052c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800528e:	e01a      	b.n	80052c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005290:	4b5b      	ldr	r3, [pc, #364]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005298:	2b00      	cmp	r3, #0
 800529a:	d116      	bne.n	80052ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052a0:	e013      	b.n	80052ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052a2:	4b57      	ldr	r3, [pc, #348]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10f      	bne.n	80052ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052ae:	4b54      	ldr	r3, [pc, #336]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d109      	bne.n	80052ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052be:	e006      	b.n	80052ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	73fb      	strb	r3, [r7, #15]
      break;
 80052c4:	e004      	b.n	80052d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052c6:	bf00      	nop
 80052c8:	e002      	b.n	80052d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052ca:	bf00      	nop
 80052cc:	e000      	b.n	80052d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10d      	bne.n	80052f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052d6:	4b4a      	ldr	r3, [pc, #296]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6819      	ldr	r1, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	430b      	orrs	r3, r1
 80052ec:	4944      	ldr	r1, [pc, #272]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d17d      	bne.n	80053f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80052f8:	4b41      	ldr	r3, [pc, #260]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a40      	ldr	r2, [pc, #256]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005304:	f7fc fca2 	bl	8001c4c <HAL_GetTick>
 8005308:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800530a:	e009      	b.n	8005320 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800530c:	f7fc fc9e 	bl	8001c4c <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d902      	bls.n	8005320 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	73fb      	strb	r3, [r7, #15]
        break;
 800531e:	e005      	b.n	800532c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005320:	4b37      	ldr	r3, [pc, #220]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1ef      	bne.n	800530c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d160      	bne.n	80053f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d111      	bne.n	800535c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005338:	4b31      	ldr	r3, [pc, #196]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6892      	ldr	r2, [r2, #8]
 8005348:	0211      	lsls	r1, r2, #8
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	68d2      	ldr	r2, [r2, #12]
 800534e:	0912      	lsrs	r2, r2, #4
 8005350:	0452      	lsls	r2, r2, #17
 8005352:	430a      	orrs	r2, r1
 8005354:	492a      	ldr	r1, [pc, #168]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005356:	4313      	orrs	r3, r2
 8005358:	610b      	str	r3, [r1, #16]
 800535a:	e027      	b.n	80053ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d112      	bne.n	8005388 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005362:	4b27      	ldr	r3, [pc, #156]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800536a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6892      	ldr	r2, [r2, #8]
 8005372:	0211      	lsls	r1, r2, #8
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6912      	ldr	r2, [r2, #16]
 8005378:	0852      	lsrs	r2, r2, #1
 800537a:	3a01      	subs	r2, #1
 800537c:	0552      	lsls	r2, r2, #21
 800537e:	430a      	orrs	r2, r1
 8005380:	491f      	ldr	r1, [pc, #124]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005382:	4313      	orrs	r3, r2
 8005384:	610b      	str	r3, [r1, #16]
 8005386:	e011      	b.n	80053ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005388:	4b1d      	ldr	r3, [pc, #116]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005390:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6892      	ldr	r2, [r2, #8]
 8005398:	0211      	lsls	r1, r2, #8
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6952      	ldr	r2, [r2, #20]
 800539e:	0852      	lsrs	r2, r2, #1
 80053a0:	3a01      	subs	r2, #1
 80053a2:	0652      	lsls	r2, r2, #25
 80053a4:	430a      	orrs	r2, r1
 80053a6:	4916      	ldr	r1, [pc, #88]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053ac:	4b14      	ldr	r3, [pc, #80]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a13      	ldr	r2, [pc, #76]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b8:	f7fc fc48 	bl	8001c4c <HAL_GetTick>
 80053bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053be:	e009      	b.n	80053d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053c0:	f7fc fc44 	bl	8001c4c <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d902      	bls.n	80053d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	73fb      	strb	r3, [r7, #15]
          break;
 80053d2:	e005      	b.n	80053e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053d4:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0ef      	beq.n	80053c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d106      	bne.n	80053f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053e6:	4b06      	ldr	r3, [pc, #24]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053e8:	691a      	ldr	r2, [r3, #16]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	4904      	ldr	r1, [pc, #16]	; (8005400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40021000 	.word	0x40021000

08005404 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005412:	4b6a      	ldr	r3, [pc, #424]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d018      	beq.n	8005450 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800541e:	4b67      	ldr	r3, [pc, #412]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f003 0203 	and.w	r2, r3, #3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d10d      	bne.n	800544a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
       ||
 8005432:	2b00      	cmp	r3, #0
 8005434:	d009      	beq.n	800544a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005436:	4b61      	ldr	r3, [pc, #388]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	091b      	lsrs	r3, r3, #4
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
       ||
 8005446:	429a      	cmp	r2, r3
 8005448:	d047      	beq.n	80054da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	73fb      	strb	r3, [r7, #15]
 800544e:	e044      	b.n	80054da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b03      	cmp	r3, #3
 8005456:	d018      	beq.n	800548a <RCCEx_PLLSAI2_Config+0x86>
 8005458:	2b03      	cmp	r3, #3
 800545a:	d825      	bhi.n	80054a8 <RCCEx_PLLSAI2_Config+0xa4>
 800545c:	2b01      	cmp	r3, #1
 800545e:	d002      	beq.n	8005466 <RCCEx_PLLSAI2_Config+0x62>
 8005460:	2b02      	cmp	r3, #2
 8005462:	d009      	beq.n	8005478 <RCCEx_PLLSAI2_Config+0x74>
 8005464:	e020      	b.n	80054a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005466:	4b55      	ldr	r3, [pc, #340]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d11d      	bne.n	80054ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005476:	e01a      	b.n	80054ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005478:	4b50      	ldr	r3, [pc, #320]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005480:	2b00      	cmp	r3, #0
 8005482:	d116      	bne.n	80054b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005488:	e013      	b.n	80054b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800548a:	4b4c      	ldr	r3, [pc, #304]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10f      	bne.n	80054b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005496:	4b49      	ldr	r3, [pc, #292]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d109      	bne.n	80054b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054a6:	e006      	b.n	80054b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
      break;
 80054ac:	e004      	b.n	80054b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054ae:	bf00      	nop
 80054b0:	e002      	b.n	80054b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054b2:	bf00      	nop
 80054b4:	e000      	b.n	80054b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10d      	bne.n	80054da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054be:	4b3f      	ldr	r3, [pc, #252]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6819      	ldr	r1, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	430b      	orrs	r3, r1
 80054d4:	4939      	ldr	r1, [pc, #228]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d167      	bne.n	80055b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80054e0:	4b36      	ldr	r3, [pc, #216]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a35      	ldr	r2, [pc, #212]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80054e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ec:	f7fc fbae 	bl	8001c4c <HAL_GetTick>
 80054f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054f2:	e009      	b.n	8005508 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054f4:	f7fc fbaa 	bl	8001c4c <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d902      	bls.n	8005508 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	73fb      	strb	r3, [r7, #15]
        break;
 8005506:	e005      	b.n	8005514 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005508:	4b2c      	ldr	r3, [pc, #176]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1ef      	bne.n	80054f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d14a      	bne.n	80055b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d111      	bne.n	8005544 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005520:	4b26      	ldr	r3, [pc, #152]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6892      	ldr	r2, [r2, #8]
 8005530:	0211      	lsls	r1, r2, #8
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	68d2      	ldr	r2, [r2, #12]
 8005536:	0912      	lsrs	r2, r2, #4
 8005538:	0452      	lsls	r2, r2, #17
 800553a:	430a      	orrs	r2, r1
 800553c:	491f      	ldr	r1, [pc, #124]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800553e:	4313      	orrs	r3, r2
 8005540:	614b      	str	r3, [r1, #20]
 8005542:	e011      	b.n	8005568 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005544:	4b1d      	ldr	r3, [pc, #116]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800554c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6892      	ldr	r2, [r2, #8]
 8005554:	0211      	lsls	r1, r2, #8
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6912      	ldr	r2, [r2, #16]
 800555a:	0852      	lsrs	r2, r2, #1
 800555c:	3a01      	subs	r2, #1
 800555e:	0652      	lsls	r2, r2, #25
 8005560:	430a      	orrs	r2, r1
 8005562:	4916      	ldr	r1, [pc, #88]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005564:	4313      	orrs	r3, r2
 8005566:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005568:	4b14      	ldr	r3, [pc, #80]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a13      	ldr	r2, [pc, #76]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800556e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005572:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005574:	f7fc fb6a 	bl	8001c4c <HAL_GetTick>
 8005578:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800557a:	e009      	b.n	8005590 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800557c:	f7fc fb66 	bl	8001c4c <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d902      	bls.n	8005590 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	73fb      	strb	r3, [r7, #15]
          break;
 800558e:	e005      	b.n	800559c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005590:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0ef      	beq.n	800557c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80055a4:	695a      	ldr	r2, [r3, #20]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	4904      	ldr	r1, [pc, #16]	; (80055bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40021000 	.word	0x40021000

080055c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e049      	b.n	8005666 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7fc f8f0 	bl	80017cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f000 fba8 	bl	8005d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b01      	cmp	r3, #1
 8005682:	d001      	beq.n	8005688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e04f      	b.n	8005728 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0201 	orr.w	r2, r2, #1
 800569e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a23      	ldr	r2, [pc, #140]	; (8005734 <HAL_TIM_Base_Start_IT+0xc4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d01d      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x76>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b2:	d018      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x76>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1f      	ldr	r2, [pc, #124]	; (8005738 <HAL_TIM_Base_Start_IT+0xc8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x76>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1e      	ldr	r2, [pc, #120]	; (800573c <HAL_TIM_Base_Start_IT+0xcc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00e      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x76>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a1c      	ldr	r2, [pc, #112]	; (8005740 <HAL_TIM_Base_Start_IT+0xd0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d009      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x76>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a1b      	ldr	r2, [pc, #108]	; (8005744 <HAL_TIM_Base_Start_IT+0xd4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d004      	beq.n	80056e6 <HAL_TIM_Base_Start_IT+0x76>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a19      	ldr	r2, [pc, #100]	; (8005748 <HAL_TIM_Base_Start_IT+0xd8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d115      	bne.n	8005712 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	4b17      	ldr	r3, [pc, #92]	; (800574c <HAL_TIM_Base_Start_IT+0xdc>)
 80056ee:	4013      	ands	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b06      	cmp	r3, #6
 80056f6:	d015      	beq.n	8005724 <HAL_TIM_Base_Start_IT+0xb4>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056fe:	d011      	beq.n	8005724 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005710:	e008      	b.n	8005724 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f042 0201 	orr.w	r2, r2, #1
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	e000      	b.n	8005726 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005724:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	40012c00 	.word	0x40012c00
 8005738:	40000400 	.word	0x40000400
 800573c:	40000800 	.word	0x40000800
 8005740:	40000c00 	.word	0x40000c00
 8005744:	40013400 	.word	0x40013400
 8005748:	40014000 	.word	0x40014000
 800574c:	00010007 	.word	0x00010007

08005750 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e049      	b.n	80057f6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f841 	bl	80057fe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3304      	adds	r3, #4
 800578c:	4619      	mov	r1, r3
 800578e:	4610      	mov	r0, r2
 8005790:	f000 fae0 	bl	8005d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b082      	sub	sp, #8
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b02      	cmp	r3, #2
 8005826:	d122      	bne.n	800586e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b02      	cmp	r3, #2
 8005834:	d11b      	bne.n	800586e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f06f 0202 	mvn.w	r2, #2
 800583e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	f003 0303 	and.w	r3, r3, #3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fa5f 	bl	8005d18 <HAL_TIM_IC_CaptureCallback>
 800585a:	e005      	b.n	8005868 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fa51 	bl	8005d04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fa62 	bl	8005d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b04      	cmp	r3, #4
 800587a:	d122      	bne.n	80058c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	2b04      	cmp	r3, #4
 8005888:	d11b      	bne.n	80058c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f06f 0204 	mvn.w	r2, #4
 8005892:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fa35 	bl	8005d18 <HAL_TIM_IC_CaptureCallback>
 80058ae:	e005      	b.n	80058bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fa27 	bl	8005d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fa38 	bl	8005d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d122      	bne.n	8005916 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d11b      	bne.n	8005916 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f06f 0208 	mvn.w	r2, #8
 80058e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2204      	movs	r2, #4
 80058ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fa0b 	bl	8005d18 <HAL_TIM_IC_CaptureCallback>
 8005902:	e005      	b.n	8005910 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f9fd 	bl	8005d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fa0e 	bl	8005d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f003 0310 	and.w	r3, r3, #16
 8005920:	2b10      	cmp	r3, #16
 8005922:	d122      	bne.n	800596a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f003 0310 	and.w	r3, r3, #16
 800592e:	2b10      	cmp	r3, #16
 8005930:	d11b      	bne.n	800596a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f06f 0210 	mvn.w	r2, #16
 800593a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2208      	movs	r2, #8
 8005940:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f9e1 	bl	8005d18 <HAL_TIM_IC_CaptureCallback>
 8005956:	e005      	b.n	8005964 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f9d3 	bl	8005d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f9e4 	bl	8005d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b01      	cmp	r3, #1
 8005976:	d10e      	bne.n	8005996 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b01      	cmp	r3, #1
 8005984:	d107      	bne.n	8005996 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f06f 0201 	mvn.w	r2, #1
 800598e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7fb fa2d 	bl	8000df0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a0:	2b80      	cmp	r3, #128	; 0x80
 80059a2:	d10e      	bne.n	80059c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ae:	2b80      	cmp	r3, #128	; 0x80
 80059b0:	d107      	bne.n	80059c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fcb3 	bl	8006328 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d0:	d10e      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059dc:	2b80      	cmp	r3, #128	; 0x80
 80059de:	d107      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fca6 	bl	800633c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fa:	2b40      	cmp	r3, #64	; 0x40
 80059fc:	d10e      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a08:	2b40      	cmp	r3, #64	; 0x40
 8005a0a:	d107      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f992 	bl	8005d40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d10e      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f003 0320 	and.w	r3, r3, #32
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	d107      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0220 	mvn.w	r2, #32
 8005a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fc66 	bl	8006314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a48:	bf00      	nop
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d101      	bne.n	8005a6a <HAL_TIM_IC_ConfigChannel+0x1a>
 8005a66:	2302      	movs	r3, #2
 8005a68:	e082      	b.n	8005b70 <HAL_TIM_IC_ConfigChannel+0x120>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d11b      	bne.n	8005ab0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6818      	ldr	r0, [r3, #0]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	6819      	ldr	r1, [r3, #0]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f000 f9fe 	bl	8005e88 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 020c 	bic.w	r2, r2, #12
 8005a9a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6999      	ldr	r1, [r3, #24]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	619a      	str	r2, [r3, #24]
 8005aae:	e05a      	b.n	8005b66 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d11c      	bne.n	8005af0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	6819      	ldr	r1, [r3, #0]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f000 fa7c 	bl	8005fc2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	699a      	ldr	r2, [r3, #24]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ad8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6999      	ldr	r1, [r3, #24]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	021a      	lsls	r2, r3, #8
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	619a      	str	r2, [r3, #24]
 8005aee:	e03a      	b.n	8005b66 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d11b      	bne.n	8005b2e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	6819      	ldr	r1, [r3, #0]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f000 fac9 	bl	800609c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 020c 	bic.w	r2, r2, #12
 8005b18:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69d9      	ldr	r1, [r3, #28]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	61da      	str	r2, [r3, #28]
 8005b2c:	e01b      	b.n	8005b66 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6818      	ldr	r0, [r3, #0]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	6819      	ldr	r1, [r3, #0]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f000 fae9 	bl	8006114 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b50:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69d9      	ldr	r1, [r3, #28]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	021a      	lsls	r2, r3, #8
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_TIM_ConfigClockSource+0x18>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e0b5      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x184>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bcc:	d03e      	beq.n	8005c4c <HAL_TIM_ConfigClockSource+0xd4>
 8005bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd2:	f200 8087 	bhi.w	8005ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bda:	f000 8085 	beq.w	8005ce8 <HAL_TIM_ConfigClockSource+0x170>
 8005bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be2:	d87f      	bhi.n	8005ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8005be4:	2b70      	cmp	r3, #112	; 0x70
 8005be6:	d01a      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0xa6>
 8005be8:	2b70      	cmp	r3, #112	; 0x70
 8005bea:	d87b      	bhi.n	8005ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bec:	2b60      	cmp	r3, #96	; 0x60
 8005bee:	d050      	beq.n	8005c92 <HAL_TIM_ConfigClockSource+0x11a>
 8005bf0:	2b60      	cmp	r3, #96	; 0x60
 8005bf2:	d877      	bhi.n	8005ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf4:	2b50      	cmp	r3, #80	; 0x50
 8005bf6:	d03c      	beq.n	8005c72 <HAL_TIM_ConfigClockSource+0xfa>
 8005bf8:	2b50      	cmp	r3, #80	; 0x50
 8005bfa:	d873      	bhi.n	8005ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bfc:	2b40      	cmp	r3, #64	; 0x40
 8005bfe:	d058      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0x13a>
 8005c00:	2b40      	cmp	r3, #64	; 0x40
 8005c02:	d86f      	bhi.n	8005ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8005c04:	2b30      	cmp	r3, #48	; 0x30
 8005c06:	d064      	beq.n	8005cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005c08:	2b30      	cmp	r3, #48	; 0x30
 8005c0a:	d86b      	bhi.n	8005ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8005c0c:	2b20      	cmp	r3, #32
 8005c0e:	d060      	beq.n	8005cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	d867      	bhi.n	8005ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d05c      	beq.n	8005cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005c18:	2b10      	cmp	r3, #16
 8005c1a:	d05a      	beq.n	8005cd2 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005c1c:	e062      	b.n	8005ce4 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	6899      	ldr	r1, [r3, #8]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f000 fac9 	bl	80061c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	609a      	str	r2, [r3, #8]
      break;
 8005c4a:	e04e      	b.n	8005cea <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6818      	ldr	r0, [r3, #0]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	6899      	ldr	r1, [r3, #8]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f000 fab2 	bl	80061c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c6e:	609a      	str	r2, [r3, #8]
      break;
 8005c70:	e03b      	b.n	8005cea <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6818      	ldr	r0, [r3, #0]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	6859      	ldr	r1, [r3, #4]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f000 f970 	bl	8005f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2150      	movs	r1, #80	; 0x50
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fa7f 	bl	800618e <TIM_ITRx_SetConfig>
      break;
 8005c90:	e02b      	b.n	8005cea <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	6859      	ldr	r1, [r3, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f000 f9cc 	bl	800603c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2160      	movs	r1, #96	; 0x60
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fa6f 	bl	800618e <TIM_ITRx_SetConfig>
      break;
 8005cb0:	e01b      	b.n	8005cea <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	6859      	ldr	r1, [r3, #4]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	f000 f950 	bl	8005f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2140      	movs	r1, #64	; 0x40
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fa5f 	bl	800618e <TIM_ITRx_SetConfig>
      break;
 8005cd0:	e00b      	b.n	8005cea <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	4610      	mov	r0, r2
 8005cde:	f000 fa56 	bl	800618e <TIM_ITRx_SetConfig>
        break;
 8005ce2:	e002      	b.n	8005cea <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005ce4:	bf00      	nop
 8005ce6:	e000      	b.n	8005cea <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005ce8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a40      	ldr	r2, [pc, #256]	; (8005e68 <TIM_Base_SetConfig+0x114>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d013      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d72:	d00f      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a3d      	ldr	r2, [pc, #244]	; (8005e6c <TIM_Base_SetConfig+0x118>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00b      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a3c      	ldr	r2, [pc, #240]	; (8005e70 <TIM_Base_SetConfig+0x11c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d007      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a3b      	ldr	r2, [pc, #236]	; (8005e74 <TIM_Base_SetConfig+0x120>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d003      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a3a      	ldr	r2, [pc, #232]	; (8005e78 <TIM_Base_SetConfig+0x124>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d108      	bne.n	8005da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a2f      	ldr	r2, [pc, #188]	; (8005e68 <TIM_Base_SetConfig+0x114>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d01f      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db4:	d01b      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a2c      	ldr	r2, [pc, #176]	; (8005e6c <TIM_Base_SetConfig+0x118>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d017      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a2b      	ldr	r2, [pc, #172]	; (8005e70 <TIM_Base_SetConfig+0x11c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d013      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a2a      	ldr	r2, [pc, #168]	; (8005e74 <TIM_Base_SetConfig+0x120>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00f      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a29      	ldr	r2, [pc, #164]	; (8005e78 <TIM_Base_SetConfig+0x124>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00b      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a28      	ldr	r2, [pc, #160]	; (8005e7c <TIM_Base_SetConfig+0x128>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d007      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a27      	ldr	r2, [pc, #156]	; (8005e80 <TIM_Base_SetConfig+0x12c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d003      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a26      	ldr	r2, [pc, #152]	; (8005e84 <TIM_Base_SetConfig+0x130>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d108      	bne.n	8005e00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a10      	ldr	r2, [pc, #64]	; (8005e68 <TIM_Base_SetConfig+0x114>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00f      	beq.n	8005e4c <TIM_Base_SetConfig+0xf8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a12      	ldr	r2, [pc, #72]	; (8005e78 <TIM_Base_SetConfig+0x124>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d00b      	beq.n	8005e4c <TIM_Base_SetConfig+0xf8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a11      	ldr	r2, [pc, #68]	; (8005e7c <TIM_Base_SetConfig+0x128>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d007      	beq.n	8005e4c <TIM_Base_SetConfig+0xf8>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a10      	ldr	r2, [pc, #64]	; (8005e80 <TIM_Base_SetConfig+0x12c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <TIM_Base_SetConfig+0xf8>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a0f      	ldr	r2, [pc, #60]	; (8005e84 <TIM_Base_SetConfig+0x130>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d103      	bne.n	8005e54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	615a      	str	r2, [r3, #20]
}
 8005e5a:	bf00      	nop
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40012c00 	.word	0x40012c00
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40000800 	.word	0x40000800
 8005e74:	40000c00 	.word	0x40000c00
 8005e78:	40013400 	.word	0x40013400
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800

08005e88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f023 0201 	bic.w	r2, r3, #1
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4a26      	ldr	r2, [pc, #152]	; (8005f4c <TIM_TI1_SetConfig+0xc4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d017      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x5e>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ebc:	d013      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x5e>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4a23      	ldr	r2, [pc, #140]	; (8005f50 <TIM_TI1_SetConfig+0xc8>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00f      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x5e>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4a22      	ldr	r2, [pc, #136]	; (8005f54 <TIM_TI1_SetConfig+0xcc>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00b      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x5e>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4a21      	ldr	r2, [pc, #132]	; (8005f58 <TIM_TI1_SetConfig+0xd0>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d007      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x5e>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4a20      	ldr	r2, [pc, #128]	; (8005f5c <TIM_TI1_SetConfig+0xd4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d003      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x5e>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4a1f      	ldr	r2, [pc, #124]	; (8005f60 <TIM_TI1_SetConfig+0xd8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d101      	bne.n	8005eea <TIM_TI1_SetConfig+0x62>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <TIM_TI1_SetConfig+0x64>
 8005eea:	2300      	movs	r3, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d008      	beq.n	8005f02 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f023 0303 	bic.w	r3, r3, #3
 8005ef6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	e003      	b.n	8005f0a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f043 0301 	orr.w	r3, r3, #1
 8005f08:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f023 030a 	bic.w	r3, r3, #10
 8005f24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f003 030a 	and.w	r3, r3, #10
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	621a      	str	r2, [r3, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40012c00 	.word	0x40012c00
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40000c00 	.word	0x40000c00
 8005f5c:	40013400 	.word	0x40013400
 8005f60:	40014000 	.word	0x40014000

08005f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f023 0201 	bic.w	r2, r3, #1
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f023 030a 	bic.w	r3, r3, #10
 8005fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b087      	sub	sp, #28
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	607a      	str	r2, [r7, #4]
 8005fce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	f023 0210 	bic.w	r2, r3, #16
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	021b      	lsls	r3, r3, #8
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	031b      	lsls	r3, r3, #12
 8006006:	b29b      	uxth	r3, r3
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	4313      	orrs	r3, r2
 800600c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006014:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	4313      	orrs	r3, r2
 8006022:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	621a      	str	r2, [r3, #32]
}
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	f023 0210 	bic.w	r2, r3, #16
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006066:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	031b      	lsls	r3, r3, #12
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006078:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	011b      	lsls	r3, r3, #4
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	621a      	str	r2, [r3, #32]
}
 8006090:	bf00      	nop
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f023 0303 	bic.w	r3, r3, #3
 80060c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80060ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	621a      	str	r2, [r3, #32]
}
 8006108:	bf00      	nop
 800610a:	371c      	adds	r7, #28
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006140:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	021b      	lsls	r3, r3, #8
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006152:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	031b      	lsls	r3, r3, #12
 8006158:	b29b      	uxth	r3, r3
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006166:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	031b      	lsls	r3, r3, #12
 800616c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	4313      	orrs	r3, r2
 8006174:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	621a      	str	r2, [r3, #32]
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800618e:	b480      	push	{r7}
 8006190:	b085      	sub	sp, #20
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f043 0307 	orr.w	r3, r3, #7
 80061b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	609a      	str	r2, [r3, #8]
}
 80061b8:	bf00      	nop
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	021a      	lsls	r2, r3, #8
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	431a      	orrs	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	609a      	str	r2, [r3, #8]
}
 80061f8:	bf00      	nop
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006214:	2b01      	cmp	r3, #1
 8006216:	d101      	bne.n	800621c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006218:	2302      	movs	r3, #2
 800621a:	e068      	b.n	80062ee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a2e      	ldr	r2, [pc, #184]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d004      	beq.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a2d      	ldr	r2, [pc, #180]	; (8006300 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d108      	bne.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006256:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006268:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a1e      	ldr	r2, [pc, #120]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d01d      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800628e:	d018      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a1b      	ldr	r2, [pc, #108]	; (8006304 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d013      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a1a      	ldr	r2, [pc, #104]	; (8006308 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00e      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a18      	ldr	r2, [pc, #96]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d009      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a13      	ldr	r2, [pc, #76]	; (8006300 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d004      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a14      	ldr	r2, [pc, #80]	; (8006310 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d10c      	bne.n	80062dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	40012c00 	.word	0x40012c00
 8006300:	40013400 	.word	0x40013400
 8006304:	40000400 	.word	0x40000400
 8006308:	40000800 	.word	0x40000800
 800630c:	40000c00 	.word	0x40000c00
 8006310:	40014000 	.word	0x40014000

08006314 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e040      	b.n	80063e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006366:	2b00      	cmp	r3, #0
 8006368:	d106      	bne.n	8006378 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7fb fade 	bl	8001934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2224      	movs	r2, #36	; 0x24
 800637c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0201 	bic.w	r2, r2, #1
 800638c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f8c0 	bl	8006514 <UART_SetConfig>
 8006394:	4603      	mov	r3, r0
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e022      	b.n	80063e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fb3e 	bl	8006a28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fbc5 	bl	8006b6c <UART_CheckIdleState>
 80063e2:	4603      	mov	r3, r0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08a      	sub	sp, #40	; 0x28
 80063f0:	af02      	add	r7, sp, #8
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	4613      	mov	r3, r2
 80063fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006400:	2b20      	cmp	r3, #32
 8006402:	f040 8082 	bne.w	800650a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <HAL_UART_Transmit+0x26>
 800640c:	88fb      	ldrh	r3, [r7, #6]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e07a      	b.n	800650c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800641c:	2b01      	cmp	r3, #1
 800641e:	d101      	bne.n	8006424 <HAL_UART_Transmit+0x38>
 8006420:	2302      	movs	r3, #2
 8006422:	e073      	b.n	800650c <HAL_UART_Transmit+0x120>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2221      	movs	r2, #33	; 0x21
 8006438:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800643a:	f7fb fc07 	bl	8001c4c <HAL_GetTick>
 800643e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	88fa      	ldrh	r2, [r7, #6]
 8006444:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	88fa      	ldrh	r2, [r7, #6]
 800644c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006458:	d108      	bne.n	800646c <HAL_UART_Transmit+0x80>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d104      	bne.n	800646c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006462:	2300      	movs	r3, #0
 8006464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	61bb      	str	r3, [r7, #24]
 800646a:	e003      	b.n	8006474 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006470:	2300      	movs	r3, #0
 8006472:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800647c:	e02d      	b.n	80064da <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2200      	movs	r2, #0
 8006486:	2180      	movs	r1, #128	; 0x80
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 fbb8 	bl	8006bfe <UART_WaitOnFlagUntilTimeout>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e039      	b.n	800650c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10b      	bne.n	80064b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	881a      	ldrh	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064aa:	b292      	uxth	r2, r2
 80064ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	3302      	adds	r3, #2
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	e008      	b.n	80064c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	781a      	ldrb	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	b292      	uxth	r2, r2
 80064c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	3301      	adds	r3, #1
 80064c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1cb      	bne.n	800647e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2200      	movs	r2, #0
 80064ee:	2140      	movs	r1, #64	; 0x40
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 fb84 	bl	8006bfe <UART_WaitOnFlagUntilTimeout>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e005      	b.n	800650c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2220      	movs	r2, #32
 8006504:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	e000      	b.n	800650c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800650a:	2302      	movs	r3, #2
  }
}
 800650c:	4618      	mov	r0, r3
 800650e:	3720      	adds	r7, #32
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006514:	b5b0      	push	{r4, r5, r7, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800651c:	2300      	movs	r3, #0
 800651e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	431a      	orrs	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	431a      	orrs	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	4313      	orrs	r3, r2
 8006536:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4bad      	ldr	r3, [pc, #692]	; (80067f4 <UART_SetConfig+0x2e0>)
 8006540:	4013      	ands	r3, r2
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6812      	ldr	r2, [r2, #0]
 8006546:	69f9      	ldr	r1, [r7, #28]
 8006548:	430b      	orrs	r3, r1
 800654a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4aa2      	ldr	r2, [pc, #648]	; (80067f8 <UART_SetConfig+0x2e4>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d004      	beq.n	800657c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	4313      	orrs	r3, r2
 800657a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	430a      	orrs	r2, r1
 800658e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a99      	ldr	r2, [pc, #612]	; (80067fc <UART_SetConfig+0x2e8>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d121      	bne.n	80065de <UART_SetConfig+0xca>
 800659a:	4b99      	ldr	r3, [pc, #612]	; (8006800 <UART_SetConfig+0x2ec>)
 800659c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a0:	f003 0303 	and.w	r3, r3, #3
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	d817      	bhi.n	80065d8 <UART_SetConfig+0xc4>
 80065a8:	a201      	add	r2, pc, #4	; (adr r2, 80065b0 <UART_SetConfig+0x9c>)
 80065aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ae:	bf00      	nop
 80065b0:	080065c1 	.word	0x080065c1
 80065b4:	080065cd 	.word	0x080065cd
 80065b8:	080065c7 	.word	0x080065c7
 80065bc:	080065d3 	.word	0x080065d3
 80065c0:	2301      	movs	r3, #1
 80065c2:	76fb      	strb	r3, [r7, #27]
 80065c4:	e0e7      	b.n	8006796 <UART_SetConfig+0x282>
 80065c6:	2302      	movs	r3, #2
 80065c8:	76fb      	strb	r3, [r7, #27]
 80065ca:	e0e4      	b.n	8006796 <UART_SetConfig+0x282>
 80065cc:	2304      	movs	r3, #4
 80065ce:	76fb      	strb	r3, [r7, #27]
 80065d0:	e0e1      	b.n	8006796 <UART_SetConfig+0x282>
 80065d2:	2308      	movs	r3, #8
 80065d4:	76fb      	strb	r3, [r7, #27]
 80065d6:	e0de      	b.n	8006796 <UART_SetConfig+0x282>
 80065d8:	2310      	movs	r3, #16
 80065da:	76fb      	strb	r3, [r7, #27]
 80065dc:	e0db      	b.n	8006796 <UART_SetConfig+0x282>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a88      	ldr	r2, [pc, #544]	; (8006804 <UART_SetConfig+0x2f0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d132      	bne.n	800664e <UART_SetConfig+0x13a>
 80065e8:	4b85      	ldr	r3, [pc, #532]	; (8006800 <UART_SetConfig+0x2ec>)
 80065ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ee:	f003 030c 	and.w	r3, r3, #12
 80065f2:	2b0c      	cmp	r3, #12
 80065f4:	d828      	bhi.n	8006648 <UART_SetConfig+0x134>
 80065f6:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <UART_SetConfig+0xe8>)
 80065f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fc:	08006631 	.word	0x08006631
 8006600:	08006649 	.word	0x08006649
 8006604:	08006649 	.word	0x08006649
 8006608:	08006649 	.word	0x08006649
 800660c:	0800663d 	.word	0x0800663d
 8006610:	08006649 	.word	0x08006649
 8006614:	08006649 	.word	0x08006649
 8006618:	08006649 	.word	0x08006649
 800661c:	08006637 	.word	0x08006637
 8006620:	08006649 	.word	0x08006649
 8006624:	08006649 	.word	0x08006649
 8006628:	08006649 	.word	0x08006649
 800662c:	08006643 	.word	0x08006643
 8006630:	2300      	movs	r3, #0
 8006632:	76fb      	strb	r3, [r7, #27]
 8006634:	e0af      	b.n	8006796 <UART_SetConfig+0x282>
 8006636:	2302      	movs	r3, #2
 8006638:	76fb      	strb	r3, [r7, #27]
 800663a:	e0ac      	b.n	8006796 <UART_SetConfig+0x282>
 800663c:	2304      	movs	r3, #4
 800663e:	76fb      	strb	r3, [r7, #27]
 8006640:	e0a9      	b.n	8006796 <UART_SetConfig+0x282>
 8006642:	2308      	movs	r3, #8
 8006644:	76fb      	strb	r3, [r7, #27]
 8006646:	e0a6      	b.n	8006796 <UART_SetConfig+0x282>
 8006648:	2310      	movs	r3, #16
 800664a:	76fb      	strb	r3, [r7, #27]
 800664c:	e0a3      	b.n	8006796 <UART_SetConfig+0x282>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a6d      	ldr	r2, [pc, #436]	; (8006808 <UART_SetConfig+0x2f4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d120      	bne.n	800669a <UART_SetConfig+0x186>
 8006658:	4b69      	ldr	r3, [pc, #420]	; (8006800 <UART_SetConfig+0x2ec>)
 800665a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006662:	2b30      	cmp	r3, #48	; 0x30
 8006664:	d013      	beq.n	800668e <UART_SetConfig+0x17a>
 8006666:	2b30      	cmp	r3, #48	; 0x30
 8006668:	d814      	bhi.n	8006694 <UART_SetConfig+0x180>
 800666a:	2b20      	cmp	r3, #32
 800666c:	d009      	beq.n	8006682 <UART_SetConfig+0x16e>
 800666e:	2b20      	cmp	r3, #32
 8006670:	d810      	bhi.n	8006694 <UART_SetConfig+0x180>
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <UART_SetConfig+0x168>
 8006676:	2b10      	cmp	r3, #16
 8006678:	d006      	beq.n	8006688 <UART_SetConfig+0x174>
 800667a:	e00b      	b.n	8006694 <UART_SetConfig+0x180>
 800667c:	2300      	movs	r3, #0
 800667e:	76fb      	strb	r3, [r7, #27]
 8006680:	e089      	b.n	8006796 <UART_SetConfig+0x282>
 8006682:	2302      	movs	r3, #2
 8006684:	76fb      	strb	r3, [r7, #27]
 8006686:	e086      	b.n	8006796 <UART_SetConfig+0x282>
 8006688:	2304      	movs	r3, #4
 800668a:	76fb      	strb	r3, [r7, #27]
 800668c:	e083      	b.n	8006796 <UART_SetConfig+0x282>
 800668e:	2308      	movs	r3, #8
 8006690:	76fb      	strb	r3, [r7, #27]
 8006692:	e080      	b.n	8006796 <UART_SetConfig+0x282>
 8006694:	2310      	movs	r3, #16
 8006696:	76fb      	strb	r3, [r7, #27]
 8006698:	e07d      	b.n	8006796 <UART_SetConfig+0x282>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a5b      	ldr	r2, [pc, #364]	; (800680c <UART_SetConfig+0x2f8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d120      	bne.n	80066e6 <UART_SetConfig+0x1d2>
 80066a4:	4b56      	ldr	r3, [pc, #344]	; (8006800 <UART_SetConfig+0x2ec>)
 80066a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80066ae:	2bc0      	cmp	r3, #192	; 0xc0
 80066b0:	d013      	beq.n	80066da <UART_SetConfig+0x1c6>
 80066b2:	2bc0      	cmp	r3, #192	; 0xc0
 80066b4:	d814      	bhi.n	80066e0 <UART_SetConfig+0x1cc>
 80066b6:	2b80      	cmp	r3, #128	; 0x80
 80066b8:	d009      	beq.n	80066ce <UART_SetConfig+0x1ba>
 80066ba:	2b80      	cmp	r3, #128	; 0x80
 80066bc:	d810      	bhi.n	80066e0 <UART_SetConfig+0x1cc>
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <UART_SetConfig+0x1b4>
 80066c2:	2b40      	cmp	r3, #64	; 0x40
 80066c4:	d006      	beq.n	80066d4 <UART_SetConfig+0x1c0>
 80066c6:	e00b      	b.n	80066e0 <UART_SetConfig+0x1cc>
 80066c8:	2300      	movs	r3, #0
 80066ca:	76fb      	strb	r3, [r7, #27]
 80066cc:	e063      	b.n	8006796 <UART_SetConfig+0x282>
 80066ce:	2302      	movs	r3, #2
 80066d0:	76fb      	strb	r3, [r7, #27]
 80066d2:	e060      	b.n	8006796 <UART_SetConfig+0x282>
 80066d4:	2304      	movs	r3, #4
 80066d6:	76fb      	strb	r3, [r7, #27]
 80066d8:	e05d      	b.n	8006796 <UART_SetConfig+0x282>
 80066da:	2308      	movs	r3, #8
 80066dc:	76fb      	strb	r3, [r7, #27]
 80066de:	e05a      	b.n	8006796 <UART_SetConfig+0x282>
 80066e0:	2310      	movs	r3, #16
 80066e2:	76fb      	strb	r3, [r7, #27]
 80066e4:	e057      	b.n	8006796 <UART_SetConfig+0x282>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a49      	ldr	r2, [pc, #292]	; (8006810 <UART_SetConfig+0x2fc>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d125      	bne.n	800673c <UART_SetConfig+0x228>
 80066f0:	4b43      	ldr	r3, [pc, #268]	; (8006800 <UART_SetConfig+0x2ec>)
 80066f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066fe:	d017      	beq.n	8006730 <UART_SetConfig+0x21c>
 8006700:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006704:	d817      	bhi.n	8006736 <UART_SetConfig+0x222>
 8006706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800670a:	d00b      	beq.n	8006724 <UART_SetConfig+0x210>
 800670c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006710:	d811      	bhi.n	8006736 <UART_SetConfig+0x222>
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <UART_SetConfig+0x20a>
 8006716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800671a:	d006      	beq.n	800672a <UART_SetConfig+0x216>
 800671c:	e00b      	b.n	8006736 <UART_SetConfig+0x222>
 800671e:	2300      	movs	r3, #0
 8006720:	76fb      	strb	r3, [r7, #27]
 8006722:	e038      	b.n	8006796 <UART_SetConfig+0x282>
 8006724:	2302      	movs	r3, #2
 8006726:	76fb      	strb	r3, [r7, #27]
 8006728:	e035      	b.n	8006796 <UART_SetConfig+0x282>
 800672a:	2304      	movs	r3, #4
 800672c:	76fb      	strb	r3, [r7, #27]
 800672e:	e032      	b.n	8006796 <UART_SetConfig+0x282>
 8006730:	2308      	movs	r3, #8
 8006732:	76fb      	strb	r3, [r7, #27]
 8006734:	e02f      	b.n	8006796 <UART_SetConfig+0x282>
 8006736:	2310      	movs	r3, #16
 8006738:	76fb      	strb	r3, [r7, #27]
 800673a:	e02c      	b.n	8006796 <UART_SetConfig+0x282>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a2d      	ldr	r2, [pc, #180]	; (80067f8 <UART_SetConfig+0x2e4>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d125      	bne.n	8006792 <UART_SetConfig+0x27e>
 8006746:	4b2e      	ldr	r3, [pc, #184]	; (8006800 <UART_SetConfig+0x2ec>)
 8006748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800674c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006750:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006754:	d017      	beq.n	8006786 <UART_SetConfig+0x272>
 8006756:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800675a:	d817      	bhi.n	800678c <UART_SetConfig+0x278>
 800675c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006760:	d00b      	beq.n	800677a <UART_SetConfig+0x266>
 8006762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006766:	d811      	bhi.n	800678c <UART_SetConfig+0x278>
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <UART_SetConfig+0x260>
 800676c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006770:	d006      	beq.n	8006780 <UART_SetConfig+0x26c>
 8006772:	e00b      	b.n	800678c <UART_SetConfig+0x278>
 8006774:	2300      	movs	r3, #0
 8006776:	76fb      	strb	r3, [r7, #27]
 8006778:	e00d      	b.n	8006796 <UART_SetConfig+0x282>
 800677a:	2302      	movs	r3, #2
 800677c:	76fb      	strb	r3, [r7, #27]
 800677e:	e00a      	b.n	8006796 <UART_SetConfig+0x282>
 8006780:	2304      	movs	r3, #4
 8006782:	76fb      	strb	r3, [r7, #27]
 8006784:	e007      	b.n	8006796 <UART_SetConfig+0x282>
 8006786:	2308      	movs	r3, #8
 8006788:	76fb      	strb	r3, [r7, #27]
 800678a:	e004      	b.n	8006796 <UART_SetConfig+0x282>
 800678c:	2310      	movs	r3, #16
 800678e:	76fb      	strb	r3, [r7, #27]
 8006790:	e001      	b.n	8006796 <UART_SetConfig+0x282>
 8006792:	2310      	movs	r3, #16
 8006794:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a17      	ldr	r2, [pc, #92]	; (80067f8 <UART_SetConfig+0x2e4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	f040 8087 	bne.w	80068b0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067a2:	7efb      	ldrb	r3, [r7, #27]
 80067a4:	2b08      	cmp	r3, #8
 80067a6:	d837      	bhi.n	8006818 <UART_SetConfig+0x304>
 80067a8:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <UART_SetConfig+0x29c>)
 80067aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ae:	bf00      	nop
 80067b0:	080067d5 	.word	0x080067d5
 80067b4:	08006819 	.word	0x08006819
 80067b8:	080067dd 	.word	0x080067dd
 80067bc:	08006819 	.word	0x08006819
 80067c0:	080067e3 	.word	0x080067e3
 80067c4:	08006819 	.word	0x08006819
 80067c8:	08006819 	.word	0x08006819
 80067cc:	08006819 	.word	0x08006819
 80067d0:	080067eb 	.word	0x080067eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067d4:	f7fe f9ac 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 80067d8:	6178      	str	r0, [r7, #20]
        break;
 80067da:	e022      	b.n	8006822 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067dc:	4b0d      	ldr	r3, [pc, #52]	; (8006814 <UART_SetConfig+0x300>)
 80067de:	617b      	str	r3, [r7, #20]
        break;
 80067e0:	e01f      	b.n	8006822 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067e2:	f7fe f90d 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 80067e6:	6178      	str	r0, [r7, #20]
        break;
 80067e8:	e01b      	b.n	8006822 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ee:	617b      	str	r3, [r7, #20]
        break;
 80067f0:	e017      	b.n	8006822 <UART_SetConfig+0x30e>
 80067f2:	bf00      	nop
 80067f4:	efff69f3 	.word	0xefff69f3
 80067f8:	40008000 	.word	0x40008000
 80067fc:	40013800 	.word	0x40013800
 8006800:	40021000 	.word	0x40021000
 8006804:	40004400 	.word	0x40004400
 8006808:	40004800 	.word	0x40004800
 800680c:	40004c00 	.word	0x40004c00
 8006810:	40005000 	.word	0x40005000
 8006814:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	76bb      	strb	r3, [r7, #26]
        break;
 8006820:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 80f1 	beq.w	8006a0c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	4413      	add	r3, r2
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	429a      	cmp	r2, r3
 8006838:	d305      	bcc.n	8006846 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	429a      	cmp	r2, r3
 8006844:	d902      	bls.n	800684c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	76bb      	strb	r3, [r7, #26]
 800684a:	e0df      	b.n	8006a0c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	4618      	mov	r0, r3
 8006850:	f04f 0100 	mov.w	r1, #0
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	020b      	lsls	r3, r1, #8
 800685e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006862:	0202      	lsls	r2, r0, #8
 8006864:	6879      	ldr	r1, [r7, #4]
 8006866:	6849      	ldr	r1, [r1, #4]
 8006868:	0849      	lsrs	r1, r1, #1
 800686a:	4608      	mov	r0, r1
 800686c:	f04f 0100 	mov.w	r1, #0
 8006870:	1814      	adds	r4, r2, r0
 8006872:	eb43 0501 	adc.w	r5, r3, r1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	461a      	mov	r2, r3
 800687c:	f04f 0300 	mov.w	r3, #0
 8006880:	4620      	mov	r0, r4
 8006882:	4629      	mov	r1, r5
 8006884:	f7fa f8ea 	bl	8000a5c <__aeabi_uldivmod>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	4613      	mov	r3, r2
 800688e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006896:	d308      	bcc.n	80068aa <UART_SetConfig+0x396>
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800689e:	d204      	bcs.n	80068aa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	60da      	str	r2, [r3, #12]
 80068a8:	e0b0      	b.n	8006a0c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	76bb      	strb	r3, [r7, #26]
 80068ae:	e0ad      	b.n	8006a0c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068b8:	d15c      	bne.n	8006974 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80068ba:	7efb      	ldrb	r3, [r7, #27]
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d828      	bhi.n	8006912 <UART_SetConfig+0x3fe>
 80068c0:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <UART_SetConfig+0x3b4>)
 80068c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c6:	bf00      	nop
 80068c8:	080068ed 	.word	0x080068ed
 80068cc:	080068f5 	.word	0x080068f5
 80068d0:	080068fd 	.word	0x080068fd
 80068d4:	08006913 	.word	0x08006913
 80068d8:	08006903 	.word	0x08006903
 80068dc:	08006913 	.word	0x08006913
 80068e0:	08006913 	.word	0x08006913
 80068e4:	08006913 	.word	0x08006913
 80068e8:	0800690b 	.word	0x0800690b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ec:	f7fe f920 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 80068f0:	6178      	str	r0, [r7, #20]
        break;
 80068f2:	e013      	b.n	800691c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068f4:	f7fe f932 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 80068f8:	6178      	str	r0, [r7, #20]
        break;
 80068fa:	e00f      	b.n	800691c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068fc:	4b49      	ldr	r3, [pc, #292]	; (8006a24 <UART_SetConfig+0x510>)
 80068fe:	617b      	str	r3, [r7, #20]
        break;
 8006900:	e00c      	b.n	800691c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006902:	f7fe f87d 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 8006906:	6178      	str	r0, [r7, #20]
        break;
 8006908:	e008      	b.n	800691c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800690a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800690e:	617b      	str	r3, [r7, #20]
        break;
 8006910:	e004      	b.n	800691c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	76bb      	strb	r3, [r7, #26]
        break;
 800691a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d074      	beq.n	8006a0c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	005a      	lsls	r2, r3, #1
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	085b      	lsrs	r3, r3, #1
 800692c:	441a      	add	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	fbb2 f3f3 	udiv	r3, r2, r3
 8006936:	b29b      	uxth	r3, r3
 8006938:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	2b0f      	cmp	r3, #15
 800693e:	d916      	bls.n	800696e <UART_SetConfig+0x45a>
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006946:	d212      	bcs.n	800696e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	b29b      	uxth	r3, r3
 800694c:	f023 030f 	bic.w	r3, r3, #15
 8006950:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	085b      	lsrs	r3, r3, #1
 8006956:	b29b      	uxth	r3, r3
 8006958:	f003 0307 	and.w	r3, r3, #7
 800695c:	b29a      	uxth	r2, r3
 800695e:	89fb      	ldrh	r3, [r7, #14]
 8006960:	4313      	orrs	r3, r2
 8006962:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	89fa      	ldrh	r2, [r7, #14]
 800696a:	60da      	str	r2, [r3, #12]
 800696c:	e04e      	b.n	8006a0c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	76bb      	strb	r3, [r7, #26]
 8006972:	e04b      	b.n	8006a0c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006974:	7efb      	ldrb	r3, [r7, #27]
 8006976:	2b08      	cmp	r3, #8
 8006978:	d827      	bhi.n	80069ca <UART_SetConfig+0x4b6>
 800697a:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <UART_SetConfig+0x46c>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	080069a5 	.word	0x080069a5
 8006984:	080069ad 	.word	0x080069ad
 8006988:	080069b5 	.word	0x080069b5
 800698c:	080069cb 	.word	0x080069cb
 8006990:	080069bb 	.word	0x080069bb
 8006994:	080069cb 	.word	0x080069cb
 8006998:	080069cb 	.word	0x080069cb
 800699c:	080069cb 	.word	0x080069cb
 80069a0:	080069c3 	.word	0x080069c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069a4:	f7fe f8c4 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 80069a8:	6178      	str	r0, [r7, #20]
        break;
 80069aa:	e013      	b.n	80069d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069ac:	f7fe f8d6 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 80069b0:	6178      	str	r0, [r7, #20]
        break;
 80069b2:	e00f      	b.n	80069d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069b4:	4b1b      	ldr	r3, [pc, #108]	; (8006a24 <UART_SetConfig+0x510>)
 80069b6:	617b      	str	r3, [r7, #20]
        break;
 80069b8:	e00c      	b.n	80069d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ba:	f7fe f821 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 80069be:	6178      	str	r0, [r7, #20]
        break;
 80069c0:	e008      	b.n	80069d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069c6:	617b      	str	r3, [r7, #20]
        break;
 80069c8:	e004      	b.n	80069d4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	76bb      	strb	r3, [r7, #26]
        break;
 80069d2:	bf00      	nop
    }

    if (pclk != 0U)
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d018      	beq.n	8006a0c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	085a      	lsrs	r2, r3, #1
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	441a      	add	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	2b0f      	cmp	r3, #15
 80069f4:	d908      	bls.n	8006a08 <UART_SetConfig+0x4f4>
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069fc:	d204      	bcs.n	8006a08 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	60da      	str	r2, [r3, #12]
 8006a06:	e001      	b.n	8006a0c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006a18:	7ebb      	ldrb	r3, [r7, #26]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3720      	adds	r7, #32
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bdb0      	pop	{r4, r5, r7, pc}
 8006a22:	bf00      	nop
 8006a24:	00f42400 	.word	0x00f42400

08006a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00a      	beq.n	8006a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	f003 0308 	and.w	r3, r3, #8
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	f003 0310 	and.w	r3, r3, #16
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	f003 0320 	and.w	r3, r3, #32
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d01a      	beq.n	8006b3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b26:	d10a      	bne.n	8006b3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00a      	beq.n	8006b60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	605a      	str	r2, [r3, #4]
  }
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b7c:	f7fb f866 	bl	8001c4c <HAL_GetTick>
 8006b80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0308 	and.w	r3, r3, #8
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	d10e      	bne.n	8006bae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f82d 	bl	8006bfe <UART_WaitOnFlagUntilTimeout>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e023      	b.n	8006bf6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0304 	and.w	r3, r3, #4
 8006bb8:	2b04      	cmp	r3, #4
 8006bba:	d10e      	bne.n	8006bda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f817 	bl	8006bfe <UART_WaitOnFlagUntilTimeout>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e00d      	b.n	8006bf6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2220      	movs	r2, #32
 8006be4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	60f8      	str	r0, [r7, #12]
 8006c06:	60b9      	str	r1, [r7, #8]
 8006c08:	603b      	str	r3, [r7, #0]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c0e:	e05e      	b.n	8006cce <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c16:	d05a      	beq.n	8006cce <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c18:	f7fb f818 	bl	8001c4c <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d302      	bcc.n	8006c2e <UART_WaitOnFlagUntilTimeout+0x30>
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d11b      	bne.n	8006c66 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c3c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0201 	bic.w	r2, r2, #1
 8006c4c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2220      	movs	r2, #32
 8006c52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2220      	movs	r2, #32
 8006c58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e043      	b.n	8006cee <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d02c      	beq.n	8006cce <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c82:	d124      	bne.n	8006cce <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c8c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c9c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 0201 	bic.w	r2, r2, #1
 8006cac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e00f      	b.n	8006cee <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69da      	ldr	r2, [r3, #28]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	bf0c      	ite	eq
 8006cde:	2301      	moveq	r3, #1
 8006ce0:	2300      	movne	r3, #0
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d091      	beq.n	8006c10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
	...

08006cf8 <__errno>:
 8006cf8:	4b01      	ldr	r3, [pc, #4]	; (8006d00 <__errno+0x8>)
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	2000008c 	.word	0x2000008c

08006d04 <__libc_init_array>:
 8006d04:	b570      	push	{r4, r5, r6, lr}
 8006d06:	4d0d      	ldr	r5, [pc, #52]	; (8006d3c <__libc_init_array+0x38>)
 8006d08:	4c0d      	ldr	r4, [pc, #52]	; (8006d40 <__libc_init_array+0x3c>)
 8006d0a:	1b64      	subs	r4, r4, r5
 8006d0c:	10a4      	asrs	r4, r4, #2
 8006d0e:	2600      	movs	r6, #0
 8006d10:	42a6      	cmp	r6, r4
 8006d12:	d109      	bne.n	8006d28 <__libc_init_array+0x24>
 8006d14:	4d0b      	ldr	r5, [pc, #44]	; (8006d44 <__libc_init_array+0x40>)
 8006d16:	4c0c      	ldr	r4, [pc, #48]	; (8006d48 <__libc_init_array+0x44>)
 8006d18:	f000 fc60 	bl	80075dc <_init>
 8006d1c:	1b64      	subs	r4, r4, r5
 8006d1e:	10a4      	asrs	r4, r4, #2
 8006d20:	2600      	movs	r6, #0
 8006d22:	42a6      	cmp	r6, r4
 8006d24:	d105      	bne.n	8006d32 <__libc_init_array+0x2e>
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
 8006d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d2c:	4798      	blx	r3
 8006d2e:	3601      	adds	r6, #1
 8006d30:	e7ee      	b.n	8006d10 <__libc_init_array+0xc>
 8006d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d36:	4798      	blx	r3
 8006d38:	3601      	adds	r6, #1
 8006d3a:	e7f2      	b.n	8006d22 <__libc_init_array+0x1e>
 8006d3c:	08007698 	.word	0x08007698
 8006d40:	08007698 	.word	0x08007698
 8006d44:	08007698 	.word	0x08007698
 8006d48:	0800769c 	.word	0x0800769c

08006d4c <memset>:
 8006d4c:	4402      	add	r2, r0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d100      	bne.n	8006d56 <memset+0xa>
 8006d54:	4770      	bx	lr
 8006d56:	f803 1b01 	strb.w	r1, [r3], #1
 8006d5a:	e7f9      	b.n	8006d50 <memset+0x4>

08006d5c <siprintf>:
 8006d5c:	b40e      	push	{r1, r2, r3}
 8006d5e:	b500      	push	{lr}
 8006d60:	b09c      	sub	sp, #112	; 0x70
 8006d62:	ab1d      	add	r3, sp, #116	; 0x74
 8006d64:	9002      	str	r0, [sp, #8]
 8006d66:	9006      	str	r0, [sp, #24]
 8006d68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d6c:	4809      	ldr	r0, [pc, #36]	; (8006d94 <siprintf+0x38>)
 8006d6e:	9107      	str	r1, [sp, #28]
 8006d70:	9104      	str	r1, [sp, #16]
 8006d72:	4909      	ldr	r1, [pc, #36]	; (8006d98 <siprintf+0x3c>)
 8006d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d78:	9105      	str	r1, [sp, #20]
 8006d7a:	6800      	ldr	r0, [r0, #0]
 8006d7c:	9301      	str	r3, [sp, #4]
 8006d7e:	a902      	add	r1, sp, #8
 8006d80:	f000 f87a 	bl	8006e78 <_svfiprintf_r>
 8006d84:	9b02      	ldr	r3, [sp, #8]
 8006d86:	2200      	movs	r2, #0
 8006d88:	701a      	strb	r2, [r3, #0]
 8006d8a:	b01c      	add	sp, #112	; 0x70
 8006d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d90:	b003      	add	sp, #12
 8006d92:	4770      	bx	lr
 8006d94:	2000008c 	.word	0x2000008c
 8006d98:	ffff0208 	.word	0xffff0208

08006d9c <strncpy>:
 8006d9c:	b510      	push	{r4, lr}
 8006d9e:	3901      	subs	r1, #1
 8006da0:	4603      	mov	r3, r0
 8006da2:	b132      	cbz	r2, 8006db2 <strncpy+0x16>
 8006da4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006da8:	f803 4b01 	strb.w	r4, [r3], #1
 8006dac:	3a01      	subs	r2, #1
 8006dae:	2c00      	cmp	r4, #0
 8006db0:	d1f7      	bne.n	8006da2 <strncpy+0x6>
 8006db2:	441a      	add	r2, r3
 8006db4:	2100      	movs	r1, #0
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d100      	bne.n	8006dbc <strncpy+0x20>
 8006dba:	bd10      	pop	{r4, pc}
 8006dbc:	f803 1b01 	strb.w	r1, [r3], #1
 8006dc0:	e7f9      	b.n	8006db6 <strncpy+0x1a>

08006dc2 <__ssputs_r>:
 8006dc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc6:	688e      	ldr	r6, [r1, #8]
 8006dc8:	429e      	cmp	r6, r3
 8006dca:	4682      	mov	sl, r0
 8006dcc:	460c      	mov	r4, r1
 8006dce:	4690      	mov	r8, r2
 8006dd0:	461f      	mov	r7, r3
 8006dd2:	d838      	bhi.n	8006e46 <__ssputs_r+0x84>
 8006dd4:	898a      	ldrh	r2, [r1, #12]
 8006dd6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006dda:	d032      	beq.n	8006e42 <__ssputs_r+0x80>
 8006ddc:	6825      	ldr	r5, [r4, #0]
 8006dde:	6909      	ldr	r1, [r1, #16]
 8006de0:	eba5 0901 	sub.w	r9, r5, r1
 8006de4:	6965      	ldr	r5, [r4, #20]
 8006de6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006dee:	3301      	adds	r3, #1
 8006df0:	444b      	add	r3, r9
 8006df2:	106d      	asrs	r5, r5, #1
 8006df4:	429d      	cmp	r5, r3
 8006df6:	bf38      	it	cc
 8006df8:	461d      	movcc	r5, r3
 8006dfa:	0553      	lsls	r3, r2, #21
 8006dfc:	d531      	bpl.n	8006e62 <__ssputs_r+0xa0>
 8006dfe:	4629      	mov	r1, r5
 8006e00:	f000 fb46 	bl	8007490 <_malloc_r>
 8006e04:	4606      	mov	r6, r0
 8006e06:	b950      	cbnz	r0, 8006e1e <__ssputs_r+0x5c>
 8006e08:	230c      	movs	r3, #12
 8006e0a:	f8ca 3000 	str.w	r3, [sl]
 8006e0e:	89a3      	ldrh	r3, [r4, #12]
 8006e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e14:	81a3      	strh	r3, [r4, #12]
 8006e16:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e1e:	6921      	ldr	r1, [r4, #16]
 8006e20:	464a      	mov	r2, r9
 8006e22:	f000 fabd 	bl	80073a0 <memcpy>
 8006e26:	89a3      	ldrh	r3, [r4, #12]
 8006e28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e30:	81a3      	strh	r3, [r4, #12]
 8006e32:	6126      	str	r6, [r4, #16]
 8006e34:	6165      	str	r5, [r4, #20]
 8006e36:	444e      	add	r6, r9
 8006e38:	eba5 0509 	sub.w	r5, r5, r9
 8006e3c:	6026      	str	r6, [r4, #0]
 8006e3e:	60a5      	str	r5, [r4, #8]
 8006e40:	463e      	mov	r6, r7
 8006e42:	42be      	cmp	r6, r7
 8006e44:	d900      	bls.n	8006e48 <__ssputs_r+0x86>
 8006e46:	463e      	mov	r6, r7
 8006e48:	4632      	mov	r2, r6
 8006e4a:	6820      	ldr	r0, [r4, #0]
 8006e4c:	4641      	mov	r1, r8
 8006e4e:	f000 fab5 	bl	80073bc <memmove>
 8006e52:	68a3      	ldr	r3, [r4, #8]
 8006e54:	6822      	ldr	r2, [r4, #0]
 8006e56:	1b9b      	subs	r3, r3, r6
 8006e58:	4432      	add	r2, r6
 8006e5a:	60a3      	str	r3, [r4, #8]
 8006e5c:	6022      	str	r2, [r4, #0]
 8006e5e:	2000      	movs	r0, #0
 8006e60:	e7db      	b.n	8006e1a <__ssputs_r+0x58>
 8006e62:	462a      	mov	r2, r5
 8006e64:	f000 fb6e 	bl	8007544 <_realloc_r>
 8006e68:	4606      	mov	r6, r0
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	d1e1      	bne.n	8006e32 <__ssputs_r+0x70>
 8006e6e:	6921      	ldr	r1, [r4, #16]
 8006e70:	4650      	mov	r0, sl
 8006e72:	f000 fabd 	bl	80073f0 <_free_r>
 8006e76:	e7c7      	b.n	8006e08 <__ssputs_r+0x46>

08006e78 <_svfiprintf_r>:
 8006e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7c:	4698      	mov	r8, r3
 8006e7e:	898b      	ldrh	r3, [r1, #12]
 8006e80:	061b      	lsls	r3, r3, #24
 8006e82:	b09d      	sub	sp, #116	; 0x74
 8006e84:	4607      	mov	r7, r0
 8006e86:	460d      	mov	r5, r1
 8006e88:	4614      	mov	r4, r2
 8006e8a:	d50e      	bpl.n	8006eaa <_svfiprintf_r+0x32>
 8006e8c:	690b      	ldr	r3, [r1, #16]
 8006e8e:	b963      	cbnz	r3, 8006eaa <_svfiprintf_r+0x32>
 8006e90:	2140      	movs	r1, #64	; 0x40
 8006e92:	f000 fafd 	bl	8007490 <_malloc_r>
 8006e96:	6028      	str	r0, [r5, #0]
 8006e98:	6128      	str	r0, [r5, #16]
 8006e9a:	b920      	cbnz	r0, 8006ea6 <_svfiprintf_r+0x2e>
 8006e9c:	230c      	movs	r3, #12
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea4:	e0d1      	b.n	800704a <_svfiprintf_r+0x1d2>
 8006ea6:	2340      	movs	r3, #64	; 0x40
 8006ea8:	616b      	str	r3, [r5, #20]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	9309      	str	r3, [sp, #36]	; 0x24
 8006eae:	2320      	movs	r3, #32
 8006eb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006eb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eb8:	2330      	movs	r3, #48	; 0x30
 8006eba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007064 <_svfiprintf_r+0x1ec>
 8006ebe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ec2:	f04f 0901 	mov.w	r9, #1
 8006ec6:	4623      	mov	r3, r4
 8006ec8:	469a      	mov	sl, r3
 8006eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ece:	b10a      	cbz	r2, 8006ed4 <_svfiprintf_r+0x5c>
 8006ed0:	2a25      	cmp	r2, #37	; 0x25
 8006ed2:	d1f9      	bne.n	8006ec8 <_svfiprintf_r+0x50>
 8006ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8006ed8:	d00b      	beq.n	8006ef2 <_svfiprintf_r+0x7a>
 8006eda:	465b      	mov	r3, fp
 8006edc:	4622      	mov	r2, r4
 8006ede:	4629      	mov	r1, r5
 8006ee0:	4638      	mov	r0, r7
 8006ee2:	f7ff ff6e 	bl	8006dc2 <__ssputs_r>
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	f000 80aa 	beq.w	8007040 <_svfiprintf_r+0x1c8>
 8006eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eee:	445a      	add	r2, fp
 8006ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8006ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 80a2 	beq.w	8007040 <_svfiprintf_r+0x1c8>
 8006efc:	2300      	movs	r3, #0
 8006efe:	f04f 32ff 	mov.w	r2, #4294967295
 8006f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f06:	f10a 0a01 	add.w	sl, sl, #1
 8006f0a:	9304      	str	r3, [sp, #16]
 8006f0c:	9307      	str	r3, [sp, #28]
 8006f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f12:	931a      	str	r3, [sp, #104]	; 0x68
 8006f14:	4654      	mov	r4, sl
 8006f16:	2205      	movs	r2, #5
 8006f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1c:	4851      	ldr	r0, [pc, #324]	; (8007064 <_svfiprintf_r+0x1ec>)
 8006f1e:	f7f9 f95f 	bl	80001e0 <memchr>
 8006f22:	9a04      	ldr	r2, [sp, #16]
 8006f24:	b9d8      	cbnz	r0, 8006f5e <_svfiprintf_r+0xe6>
 8006f26:	06d0      	lsls	r0, r2, #27
 8006f28:	bf44      	itt	mi
 8006f2a:	2320      	movmi	r3, #32
 8006f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f30:	0711      	lsls	r1, r2, #28
 8006f32:	bf44      	itt	mi
 8006f34:	232b      	movmi	r3, #43	; 0x2b
 8006f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f40:	d015      	beq.n	8006f6e <_svfiprintf_r+0xf6>
 8006f42:	9a07      	ldr	r2, [sp, #28]
 8006f44:	4654      	mov	r4, sl
 8006f46:	2000      	movs	r0, #0
 8006f48:	f04f 0c0a 	mov.w	ip, #10
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f52:	3b30      	subs	r3, #48	; 0x30
 8006f54:	2b09      	cmp	r3, #9
 8006f56:	d94e      	bls.n	8006ff6 <_svfiprintf_r+0x17e>
 8006f58:	b1b0      	cbz	r0, 8006f88 <_svfiprintf_r+0x110>
 8006f5a:	9207      	str	r2, [sp, #28]
 8006f5c:	e014      	b.n	8006f88 <_svfiprintf_r+0x110>
 8006f5e:	eba0 0308 	sub.w	r3, r0, r8
 8006f62:	fa09 f303 	lsl.w	r3, r9, r3
 8006f66:	4313      	orrs	r3, r2
 8006f68:	9304      	str	r3, [sp, #16]
 8006f6a:	46a2      	mov	sl, r4
 8006f6c:	e7d2      	b.n	8006f14 <_svfiprintf_r+0x9c>
 8006f6e:	9b03      	ldr	r3, [sp, #12]
 8006f70:	1d19      	adds	r1, r3, #4
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	9103      	str	r1, [sp, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bfbb      	ittet	lt
 8006f7a:	425b      	neglt	r3, r3
 8006f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8006f80:	9307      	strge	r3, [sp, #28]
 8006f82:	9307      	strlt	r3, [sp, #28]
 8006f84:	bfb8      	it	lt
 8006f86:	9204      	strlt	r2, [sp, #16]
 8006f88:	7823      	ldrb	r3, [r4, #0]
 8006f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8006f8c:	d10c      	bne.n	8006fa8 <_svfiprintf_r+0x130>
 8006f8e:	7863      	ldrb	r3, [r4, #1]
 8006f90:	2b2a      	cmp	r3, #42	; 0x2a
 8006f92:	d135      	bne.n	8007000 <_svfiprintf_r+0x188>
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	1d1a      	adds	r2, r3, #4
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	9203      	str	r2, [sp, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	bfb8      	it	lt
 8006fa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fa4:	3402      	adds	r4, #2
 8006fa6:	9305      	str	r3, [sp, #20]
 8006fa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007074 <_svfiprintf_r+0x1fc>
 8006fac:	7821      	ldrb	r1, [r4, #0]
 8006fae:	2203      	movs	r2, #3
 8006fb0:	4650      	mov	r0, sl
 8006fb2:	f7f9 f915 	bl	80001e0 <memchr>
 8006fb6:	b140      	cbz	r0, 8006fca <_svfiprintf_r+0x152>
 8006fb8:	2340      	movs	r3, #64	; 0x40
 8006fba:	eba0 000a 	sub.w	r0, r0, sl
 8006fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8006fc2:	9b04      	ldr	r3, [sp, #16]
 8006fc4:	4303      	orrs	r3, r0
 8006fc6:	3401      	adds	r4, #1
 8006fc8:	9304      	str	r3, [sp, #16]
 8006fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fce:	4826      	ldr	r0, [pc, #152]	; (8007068 <_svfiprintf_r+0x1f0>)
 8006fd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fd4:	2206      	movs	r2, #6
 8006fd6:	f7f9 f903 	bl	80001e0 <memchr>
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	d038      	beq.n	8007050 <_svfiprintf_r+0x1d8>
 8006fde:	4b23      	ldr	r3, [pc, #140]	; (800706c <_svfiprintf_r+0x1f4>)
 8006fe0:	bb1b      	cbnz	r3, 800702a <_svfiprintf_r+0x1b2>
 8006fe2:	9b03      	ldr	r3, [sp, #12]
 8006fe4:	3307      	adds	r3, #7
 8006fe6:	f023 0307 	bic.w	r3, r3, #7
 8006fea:	3308      	adds	r3, #8
 8006fec:	9303      	str	r3, [sp, #12]
 8006fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff0:	4433      	add	r3, r6
 8006ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff4:	e767      	b.n	8006ec6 <_svfiprintf_r+0x4e>
 8006ff6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	2001      	movs	r0, #1
 8006ffe:	e7a5      	b.n	8006f4c <_svfiprintf_r+0xd4>
 8007000:	2300      	movs	r3, #0
 8007002:	3401      	adds	r4, #1
 8007004:	9305      	str	r3, [sp, #20]
 8007006:	4619      	mov	r1, r3
 8007008:	f04f 0c0a 	mov.w	ip, #10
 800700c:	4620      	mov	r0, r4
 800700e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007012:	3a30      	subs	r2, #48	; 0x30
 8007014:	2a09      	cmp	r2, #9
 8007016:	d903      	bls.n	8007020 <_svfiprintf_r+0x1a8>
 8007018:	2b00      	cmp	r3, #0
 800701a:	d0c5      	beq.n	8006fa8 <_svfiprintf_r+0x130>
 800701c:	9105      	str	r1, [sp, #20]
 800701e:	e7c3      	b.n	8006fa8 <_svfiprintf_r+0x130>
 8007020:	fb0c 2101 	mla	r1, ip, r1, r2
 8007024:	4604      	mov	r4, r0
 8007026:	2301      	movs	r3, #1
 8007028:	e7f0      	b.n	800700c <_svfiprintf_r+0x194>
 800702a:	ab03      	add	r3, sp, #12
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	462a      	mov	r2, r5
 8007030:	4b0f      	ldr	r3, [pc, #60]	; (8007070 <_svfiprintf_r+0x1f8>)
 8007032:	a904      	add	r1, sp, #16
 8007034:	4638      	mov	r0, r7
 8007036:	f3af 8000 	nop.w
 800703a:	1c42      	adds	r2, r0, #1
 800703c:	4606      	mov	r6, r0
 800703e:	d1d6      	bne.n	8006fee <_svfiprintf_r+0x176>
 8007040:	89ab      	ldrh	r3, [r5, #12]
 8007042:	065b      	lsls	r3, r3, #25
 8007044:	f53f af2c 	bmi.w	8006ea0 <_svfiprintf_r+0x28>
 8007048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800704a:	b01d      	add	sp, #116	; 0x74
 800704c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007050:	ab03      	add	r3, sp, #12
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	462a      	mov	r2, r5
 8007056:	4b06      	ldr	r3, [pc, #24]	; (8007070 <_svfiprintf_r+0x1f8>)
 8007058:	a904      	add	r1, sp, #16
 800705a:	4638      	mov	r0, r7
 800705c:	f000 f87a 	bl	8007154 <_printf_i>
 8007060:	e7eb      	b.n	800703a <_svfiprintf_r+0x1c2>
 8007062:	bf00      	nop
 8007064:	0800765c 	.word	0x0800765c
 8007068:	08007666 	.word	0x08007666
 800706c:	00000000 	.word	0x00000000
 8007070:	08006dc3 	.word	0x08006dc3
 8007074:	08007662 	.word	0x08007662

08007078 <_printf_common>:
 8007078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800707c:	4616      	mov	r6, r2
 800707e:	4699      	mov	r9, r3
 8007080:	688a      	ldr	r2, [r1, #8]
 8007082:	690b      	ldr	r3, [r1, #16]
 8007084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007088:	4293      	cmp	r3, r2
 800708a:	bfb8      	it	lt
 800708c:	4613      	movlt	r3, r2
 800708e:	6033      	str	r3, [r6, #0]
 8007090:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007094:	4607      	mov	r7, r0
 8007096:	460c      	mov	r4, r1
 8007098:	b10a      	cbz	r2, 800709e <_printf_common+0x26>
 800709a:	3301      	adds	r3, #1
 800709c:	6033      	str	r3, [r6, #0]
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	0699      	lsls	r1, r3, #26
 80070a2:	bf42      	ittt	mi
 80070a4:	6833      	ldrmi	r3, [r6, #0]
 80070a6:	3302      	addmi	r3, #2
 80070a8:	6033      	strmi	r3, [r6, #0]
 80070aa:	6825      	ldr	r5, [r4, #0]
 80070ac:	f015 0506 	ands.w	r5, r5, #6
 80070b0:	d106      	bne.n	80070c0 <_printf_common+0x48>
 80070b2:	f104 0a19 	add.w	sl, r4, #25
 80070b6:	68e3      	ldr	r3, [r4, #12]
 80070b8:	6832      	ldr	r2, [r6, #0]
 80070ba:	1a9b      	subs	r3, r3, r2
 80070bc:	42ab      	cmp	r3, r5
 80070be:	dc26      	bgt.n	800710e <_printf_common+0x96>
 80070c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070c4:	1e13      	subs	r3, r2, #0
 80070c6:	6822      	ldr	r2, [r4, #0]
 80070c8:	bf18      	it	ne
 80070ca:	2301      	movne	r3, #1
 80070cc:	0692      	lsls	r2, r2, #26
 80070ce:	d42b      	bmi.n	8007128 <_printf_common+0xb0>
 80070d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070d4:	4649      	mov	r1, r9
 80070d6:	4638      	mov	r0, r7
 80070d8:	47c0      	blx	r8
 80070da:	3001      	adds	r0, #1
 80070dc:	d01e      	beq.n	800711c <_printf_common+0xa4>
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	68e5      	ldr	r5, [r4, #12]
 80070e2:	6832      	ldr	r2, [r6, #0]
 80070e4:	f003 0306 	and.w	r3, r3, #6
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	bf08      	it	eq
 80070ec:	1aad      	subeq	r5, r5, r2
 80070ee:	68a3      	ldr	r3, [r4, #8]
 80070f0:	6922      	ldr	r2, [r4, #16]
 80070f2:	bf0c      	ite	eq
 80070f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070f8:	2500      	movne	r5, #0
 80070fa:	4293      	cmp	r3, r2
 80070fc:	bfc4      	itt	gt
 80070fe:	1a9b      	subgt	r3, r3, r2
 8007100:	18ed      	addgt	r5, r5, r3
 8007102:	2600      	movs	r6, #0
 8007104:	341a      	adds	r4, #26
 8007106:	42b5      	cmp	r5, r6
 8007108:	d11a      	bne.n	8007140 <_printf_common+0xc8>
 800710a:	2000      	movs	r0, #0
 800710c:	e008      	b.n	8007120 <_printf_common+0xa8>
 800710e:	2301      	movs	r3, #1
 8007110:	4652      	mov	r2, sl
 8007112:	4649      	mov	r1, r9
 8007114:	4638      	mov	r0, r7
 8007116:	47c0      	blx	r8
 8007118:	3001      	adds	r0, #1
 800711a:	d103      	bne.n	8007124 <_printf_common+0xac>
 800711c:	f04f 30ff 	mov.w	r0, #4294967295
 8007120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007124:	3501      	adds	r5, #1
 8007126:	e7c6      	b.n	80070b6 <_printf_common+0x3e>
 8007128:	18e1      	adds	r1, r4, r3
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	2030      	movs	r0, #48	; 0x30
 800712e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007132:	4422      	add	r2, r4
 8007134:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007138:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800713c:	3302      	adds	r3, #2
 800713e:	e7c7      	b.n	80070d0 <_printf_common+0x58>
 8007140:	2301      	movs	r3, #1
 8007142:	4622      	mov	r2, r4
 8007144:	4649      	mov	r1, r9
 8007146:	4638      	mov	r0, r7
 8007148:	47c0      	blx	r8
 800714a:	3001      	adds	r0, #1
 800714c:	d0e6      	beq.n	800711c <_printf_common+0xa4>
 800714e:	3601      	adds	r6, #1
 8007150:	e7d9      	b.n	8007106 <_printf_common+0x8e>
	...

08007154 <_printf_i>:
 8007154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007158:	460c      	mov	r4, r1
 800715a:	4691      	mov	r9, r2
 800715c:	7e27      	ldrb	r7, [r4, #24]
 800715e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007160:	2f78      	cmp	r7, #120	; 0x78
 8007162:	4680      	mov	r8, r0
 8007164:	469a      	mov	sl, r3
 8007166:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800716a:	d807      	bhi.n	800717c <_printf_i+0x28>
 800716c:	2f62      	cmp	r7, #98	; 0x62
 800716e:	d80a      	bhi.n	8007186 <_printf_i+0x32>
 8007170:	2f00      	cmp	r7, #0
 8007172:	f000 80d8 	beq.w	8007326 <_printf_i+0x1d2>
 8007176:	2f58      	cmp	r7, #88	; 0x58
 8007178:	f000 80a3 	beq.w	80072c2 <_printf_i+0x16e>
 800717c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007180:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007184:	e03a      	b.n	80071fc <_printf_i+0xa8>
 8007186:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800718a:	2b15      	cmp	r3, #21
 800718c:	d8f6      	bhi.n	800717c <_printf_i+0x28>
 800718e:	a001      	add	r0, pc, #4	; (adr r0, 8007194 <_printf_i+0x40>)
 8007190:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007194:	080071ed 	.word	0x080071ed
 8007198:	08007201 	.word	0x08007201
 800719c:	0800717d 	.word	0x0800717d
 80071a0:	0800717d 	.word	0x0800717d
 80071a4:	0800717d 	.word	0x0800717d
 80071a8:	0800717d 	.word	0x0800717d
 80071ac:	08007201 	.word	0x08007201
 80071b0:	0800717d 	.word	0x0800717d
 80071b4:	0800717d 	.word	0x0800717d
 80071b8:	0800717d 	.word	0x0800717d
 80071bc:	0800717d 	.word	0x0800717d
 80071c0:	0800730d 	.word	0x0800730d
 80071c4:	08007231 	.word	0x08007231
 80071c8:	080072ef 	.word	0x080072ef
 80071cc:	0800717d 	.word	0x0800717d
 80071d0:	0800717d 	.word	0x0800717d
 80071d4:	0800732f 	.word	0x0800732f
 80071d8:	0800717d 	.word	0x0800717d
 80071dc:	08007231 	.word	0x08007231
 80071e0:	0800717d 	.word	0x0800717d
 80071e4:	0800717d 	.word	0x0800717d
 80071e8:	080072f7 	.word	0x080072f7
 80071ec:	680b      	ldr	r3, [r1, #0]
 80071ee:	1d1a      	adds	r2, r3, #4
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	600a      	str	r2, [r1, #0]
 80071f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071fc:	2301      	movs	r3, #1
 80071fe:	e0a3      	b.n	8007348 <_printf_i+0x1f4>
 8007200:	6825      	ldr	r5, [r4, #0]
 8007202:	6808      	ldr	r0, [r1, #0]
 8007204:	062e      	lsls	r6, r5, #24
 8007206:	f100 0304 	add.w	r3, r0, #4
 800720a:	d50a      	bpl.n	8007222 <_printf_i+0xce>
 800720c:	6805      	ldr	r5, [r0, #0]
 800720e:	600b      	str	r3, [r1, #0]
 8007210:	2d00      	cmp	r5, #0
 8007212:	da03      	bge.n	800721c <_printf_i+0xc8>
 8007214:	232d      	movs	r3, #45	; 0x2d
 8007216:	426d      	negs	r5, r5
 8007218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800721c:	485e      	ldr	r0, [pc, #376]	; (8007398 <_printf_i+0x244>)
 800721e:	230a      	movs	r3, #10
 8007220:	e019      	b.n	8007256 <_printf_i+0x102>
 8007222:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007226:	6805      	ldr	r5, [r0, #0]
 8007228:	600b      	str	r3, [r1, #0]
 800722a:	bf18      	it	ne
 800722c:	b22d      	sxthne	r5, r5
 800722e:	e7ef      	b.n	8007210 <_printf_i+0xbc>
 8007230:	680b      	ldr	r3, [r1, #0]
 8007232:	6825      	ldr	r5, [r4, #0]
 8007234:	1d18      	adds	r0, r3, #4
 8007236:	6008      	str	r0, [r1, #0]
 8007238:	0628      	lsls	r0, r5, #24
 800723a:	d501      	bpl.n	8007240 <_printf_i+0xec>
 800723c:	681d      	ldr	r5, [r3, #0]
 800723e:	e002      	b.n	8007246 <_printf_i+0xf2>
 8007240:	0669      	lsls	r1, r5, #25
 8007242:	d5fb      	bpl.n	800723c <_printf_i+0xe8>
 8007244:	881d      	ldrh	r5, [r3, #0]
 8007246:	4854      	ldr	r0, [pc, #336]	; (8007398 <_printf_i+0x244>)
 8007248:	2f6f      	cmp	r7, #111	; 0x6f
 800724a:	bf0c      	ite	eq
 800724c:	2308      	moveq	r3, #8
 800724e:	230a      	movne	r3, #10
 8007250:	2100      	movs	r1, #0
 8007252:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007256:	6866      	ldr	r6, [r4, #4]
 8007258:	60a6      	str	r6, [r4, #8]
 800725a:	2e00      	cmp	r6, #0
 800725c:	bfa2      	ittt	ge
 800725e:	6821      	ldrge	r1, [r4, #0]
 8007260:	f021 0104 	bicge.w	r1, r1, #4
 8007264:	6021      	strge	r1, [r4, #0]
 8007266:	b90d      	cbnz	r5, 800726c <_printf_i+0x118>
 8007268:	2e00      	cmp	r6, #0
 800726a:	d04d      	beq.n	8007308 <_printf_i+0x1b4>
 800726c:	4616      	mov	r6, r2
 800726e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007272:	fb03 5711 	mls	r7, r3, r1, r5
 8007276:	5dc7      	ldrb	r7, [r0, r7]
 8007278:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800727c:	462f      	mov	r7, r5
 800727e:	42bb      	cmp	r3, r7
 8007280:	460d      	mov	r5, r1
 8007282:	d9f4      	bls.n	800726e <_printf_i+0x11a>
 8007284:	2b08      	cmp	r3, #8
 8007286:	d10b      	bne.n	80072a0 <_printf_i+0x14c>
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	07df      	lsls	r7, r3, #31
 800728c:	d508      	bpl.n	80072a0 <_printf_i+0x14c>
 800728e:	6923      	ldr	r3, [r4, #16]
 8007290:	6861      	ldr	r1, [r4, #4]
 8007292:	4299      	cmp	r1, r3
 8007294:	bfde      	ittt	le
 8007296:	2330      	movle	r3, #48	; 0x30
 8007298:	f806 3c01 	strble.w	r3, [r6, #-1]
 800729c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80072a0:	1b92      	subs	r2, r2, r6
 80072a2:	6122      	str	r2, [r4, #16]
 80072a4:	f8cd a000 	str.w	sl, [sp]
 80072a8:	464b      	mov	r3, r9
 80072aa:	aa03      	add	r2, sp, #12
 80072ac:	4621      	mov	r1, r4
 80072ae:	4640      	mov	r0, r8
 80072b0:	f7ff fee2 	bl	8007078 <_printf_common>
 80072b4:	3001      	adds	r0, #1
 80072b6:	d14c      	bne.n	8007352 <_printf_i+0x1fe>
 80072b8:	f04f 30ff 	mov.w	r0, #4294967295
 80072bc:	b004      	add	sp, #16
 80072be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c2:	4835      	ldr	r0, [pc, #212]	; (8007398 <_printf_i+0x244>)
 80072c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	680e      	ldr	r6, [r1, #0]
 80072cc:	061f      	lsls	r7, r3, #24
 80072ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80072d2:	600e      	str	r6, [r1, #0]
 80072d4:	d514      	bpl.n	8007300 <_printf_i+0x1ac>
 80072d6:	07d9      	lsls	r1, r3, #31
 80072d8:	bf44      	itt	mi
 80072da:	f043 0320 	orrmi.w	r3, r3, #32
 80072de:	6023      	strmi	r3, [r4, #0]
 80072e0:	b91d      	cbnz	r5, 80072ea <_printf_i+0x196>
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	f023 0320 	bic.w	r3, r3, #32
 80072e8:	6023      	str	r3, [r4, #0]
 80072ea:	2310      	movs	r3, #16
 80072ec:	e7b0      	b.n	8007250 <_printf_i+0xfc>
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	f043 0320 	orr.w	r3, r3, #32
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	2378      	movs	r3, #120	; 0x78
 80072f8:	4828      	ldr	r0, [pc, #160]	; (800739c <_printf_i+0x248>)
 80072fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072fe:	e7e3      	b.n	80072c8 <_printf_i+0x174>
 8007300:	065e      	lsls	r6, r3, #25
 8007302:	bf48      	it	mi
 8007304:	b2ad      	uxthmi	r5, r5
 8007306:	e7e6      	b.n	80072d6 <_printf_i+0x182>
 8007308:	4616      	mov	r6, r2
 800730a:	e7bb      	b.n	8007284 <_printf_i+0x130>
 800730c:	680b      	ldr	r3, [r1, #0]
 800730e:	6826      	ldr	r6, [r4, #0]
 8007310:	6960      	ldr	r0, [r4, #20]
 8007312:	1d1d      	adds	r5, r3, #4
 8007314:	600d      	str	r5, [r1, #0]
 8007316:	0635      	lsls	r5, r6, #24
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	d501      	bpl.n	8007320 <_printf_i+0x1cc>
 800731c:	6018      	str	r0, [r3, #0]
 800731e:	e002      	b.n	8007326 <_printf_i+0x1d2>
 8007320:	0671      	lsls	r1, r6, #25
 8007322:	d5fb      	bpl.n	800731c <_printf_i+0x1c8>
 8007324:	8018      	strh	r0, [r3, #0]
 8007326:	2300      	movs	r3, #0
 8007328:	6123      	str	r3, [r4, #16]
 800732a:	4616      	mov	r6, r2
 800732c:	e7ba      	b.n	80072a4 <_printf_i+0x150>
 800732e:	680b      	ldr	r3, [r1, #0]
 8007330:	1d1a      	adds	r2, r3, #4
 8007332:	600a      	str	r2, [r1, #0]
 8007334:	681e      	ldr	r6, [r3, #0]
 8007336:	6862      	ldr	r2, [r4, #4]
 8007338:	2100      	movs	r1, #0
 800733a:	4630      	mov	r0, r6
 800733c:	f7f8 ff50 	bl	80001e0 <memchr>
 8007340:	b108      	cbz	r0, 8007346 <_printf_i+0x1f2>
 8007342:	1b80      	subs	r0, r0, r6
 8007344:	6060      	str	r0, [r4, #4]
 8007346:	6863      	ldr	r3, [r4, #4]
 8007348:	6123      	str	r3, [r4, #16]
 800734a:	2300      	movs	r3, #0
 800734c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007350:	e7a8      	b.n	80072a4 <_printf_i+0x150>
 8007352:	6923      	ldr	r3, [r4, #16]
 8007354:	4632      	mov	r2, r6
 8007356:	4649      	mov	r1, r9
 8007358:	4640      	mov	r0, r8
 800735a:	47d0      	blx	sl
 800735c:	3001      	adds	r0, #1
 800735e:	d0ab      	beq.n	80072b8 <_printf_i+0x164>
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	079b      	lsls	r3, r3, #30
 8007364:	d413      	bmi.n	800738e <_printf_i+0x23a>
 8007366:	68e0      	ldr	r0, [r4, #12]
 8007368:	9b03      	ldr	r3, [sp, #12]
 800736a:	4298      	cmp	r0, r3
 800736c:	bfb8      	it	lt
 800736e:	4618      	movlt	r0, r3
 8007370:	e7a4      	b.n	80072bc <_printf_i+0x168>
 8007372:	2301      	movs	r3, #1
 8007374:	4632      	mov	r2, r6
 8007376:	4649      	mov	r1, r9
 8007378:	4640      	mov	r0, r8
 800737a:	47d0      	blx	sl
 800737c:	3001      	adds	r0, #1
 800737e:	d09b      	beq.n	80072b8 <_printf_i+0x164>
 8007380:	3501      	adds	r5, #1
 8007382:	68e3      	ldr	r3, [r4, #12]
 8007384:	9903      	ldr	r1, [sp, #12]
 8007386:	1a5b      	subs	r3, r3, r1
 8007388:	42ab      	cmp	r3, r5
 800738a:	dcf2      	bgt.n	8007372 <_printf_i+0x21e>
 800738c:	e7eb      	b.n	8007366 <_printf_i+0x212>
 800738e:	2500      	movs	r5, #0
 8007390:	f104 0619 	add.w	r6, r4, #25
 8007394:	e7f5      	b.n	8007382 <_printf_i+0x22e>
 8007396:	bf00      	nop
 8007398:	0800766d 	.word	0x0800766d
 800739c:	0800767e 	.word	0x0800767e

080073a0 <memcpy>:
 80073a0:	440a      	add	r2, r1
 80073a2:	4291      	cmp	r1, r2
 80073a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80073a8:	d100      	bne.n	80073ac <memcpy+0xc>
 80073aa:	4770      	bx	lr
 80073ac:	b510      	push	{r4, lr}
 80073ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073b6:	4291      	cmp	r1, r2
 80073b8:	d1f9      	bne.n	80073ae <memcpy+0xe>
 80073ba:	bd10      	pop	{r4, pc}

080073bc <memmove>:
 80073bc:	4288      	cmp	r0, r1
 80073be:	b510      	push	{r4, lr}
 80073c0:	eb01 0402 	add.w	r4, r1, r2
 80073c4:	d902      	bls.n	80073cc <memmove+0x10>
 80073c6:	4284      	cmp	r4, r0
 80073c8:	4623      	mov	r3, r4
 80073ca:	d807      	bhi.n	80073dc <memmove+0x20>
 80073cc:	1e43      	subs	r3, r0, #1
 80073ce:	42a1      	cmp	r1, r4
 80073d0:	d008      	beq.n	80073e4 <memmove+0x28>
 80073d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073da:	e7f8      	b.n	80073ce <memmove+0x12>
 80073dc:	4402      	add	r2, r0
 80073de:	4601      	mov	r1, r0
 80073e0:	428a      	cmp	r2, r1
 80073e2:	d100      	bne.n	80073e6 <memmove+0x2a>
 80073e4:	bd10      	pop	{r4, pc}
 80073e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073ee:	e7f7      	b.n	80073e0 <memmove+0x24>

080073f0 <_free_r>:
 80073f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073f2:	2900      	cmp	r1, #0
 80073f4:	d048      	beq.n	8007488 <_free_r+0x98>
 80073f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073fa:	9001      	str	r0, [sp, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f1a1 0404 	sub.w	r4, r1, #4
 8007402:	bfb8      	it	lt
 8007404:	18e4      	addlt	r4, r4, r3
 8007406:	f000 f8d3 	bl	80075b0 <__malloc_lock>
 800740a:	4a20      	ldr	r2, [pc, #128]	; (800748c <_free_r+0x9c>)
 800740c:	9801      	ldr	r0, [sp, #4]
 800740e:	6813      	ldr	r3, [r2, #0]
 8007410:	4615      	mov	r5, r2
 8007412:	b933      	cbnz	r3, 8007422 <_free_r+0x32>
 8007414:	6063      	str	r3, [r4, #4]
 8007416:	6014      	str	r4, [r2, #0]
 8007418:	b003      	add	sp, #12
 800741a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800741e:	f000 b8cd 	b.w	80075bc <__malloc_unlock>
 8007422:	42a3      	cmp	r3, r4
 8007424:	d90b      	bls.n	800743e <_free_r+0x4e>
 8007426:	6821      	ldr	r1, [r4, #0]
 8007428:	1862      	adds	r2, r4, r1
 800742a:	4293      	cmp	r3, r2
 800742c:	bf04      	itt	eq
 800742e:	681a      	ldreq	r2, [r3, #0]
 8007430:	685b      	ldreq	r3, [r3, #4]
 8007432:	6063      	str	r3, [r4, #4]
 8007434:	bf04      	itt	eq
 8007436:	1852      	addeq	r2, r2, r1
 8007438:	6022      	streq	r2, [r4, #0]
 800743a:	602c      	str	r4, [r5, #0]
 800743c:	e7ec      	b.n	8007418 <_free_r+0x28>
 800743e:	461a      	mov	r2, r3
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	b10b      	cbz	r3, 8007448 <_free_r+0x58>
 8007444:	42a3      	cmp	r3, r4
 8007446:	d9fa      	bls.n	800743e <_free_r+0x4e>
 8007448:	6811      	ldr	r1, [r2, #0]
 800744a:	1855      	adds	r5, r2, r1
 800744c:	42a5      	cmp	r5, r4
 800744e:	d10b      	bne.n	8007468 <_free_r+0x78>
 8007450:	6824      	ldr	r4, [r4, #0]
 8007452:	4421      	add	r1, r4
 8007454:	1854      	adds	r4, r2, r1
 8007456:	42a3      	cmp	r3, r4
 8007458:	6011      	str	r1, [r2, #0]
 800745a:	d1dd      	bne.n	8007418 <_free_r+0x28>
 800745c:	681c      	ldr	r4, [r3, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	6053      	str	r3, [r2, #4]
 8007462:	4421      	add	r1, r4
 8007464:	6011      	str	r1, [r2, #0]
 8007466:	e7d7      	b.n	8007418 <_free_r+0x28>
 8007468:	d902      	bls.n	8007470 <_free_r+0x80>
 800746a:	230c      	movs	r3, #12
 800746c:	6003      	str	r3, [r0, #0]
 800746e:	e7d3      	b.n	8007418 <_free_r+0x28>
 8007470:	6825      	ldr	r5, [r4, #0]
 8007472:	1961      	adds	r1, r4, r5
 8007474:	428b      	cmp	r3, r1
 8007476:	bf04      	itt	eq
 8007478:	6819      	ldreq	r1, [r3, #0]
 800747a:	685b      	ldreq	r3, [r3, #4]
 800747c:	6063      	str	r3, [r4, #4]
 800747e:	bf04      	itt	eq
 8007480:	1949      	addeq	r1, r1, r5
 8007482:	6021      	streq	r1, [r4, #0]
 8007484:	6054      	str	r4, [r2, #4]
 8007486:	e7c7      	b.n	8007418 <_free_r+0x28>
 8007488:	b003      	add	sp, #12
 800748a:	bd30      	pop	{r4, r5, pc}
 800748c:	20000128 	.word	0x20000128

08007490 <_malloc_r>:
 8007490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007492:	1ccd      	adds	r5, r1, #3
 8007494:	f025 0503 	bic.w	r5, r5, #3
 8007498:	3508      	adds	r5, #8
 800749a:	2d0c      	cmp	r5, #12
 800749c:	bf38      	it	cc
 800749e:	250c      	movcc	r5, #12
 80074a0:	2d00      	cmp	r5, #0
 80074a2:	4606      	mov	r6, r0
 80074a4:	db01      	blt.n	80074aa <_malloc_r+0x1a>
 80074a6:	42a9      	cmp	r1, r5
 80074a8:	d903      	bls.n	80074b2 <_malloc_r+0x22>
 80074aa:	230c      	movs	r3, #12
 80074ac:	6033      	str	r3, [r6, #0]
 80074ae:	2000      	movs	r0, #0
 80074b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b2:	f000 f87d 	bl	80075b0 <__malloc_lock>
 80074b6:	4921      	ldr	r1, [pc, #132]	; (800753c <_malloc_r+0xac>)
 80074b8:	680a      	ldr	r2, [r1, #0]
 80074ba:	4614      	mov	r4, r2
 80074bc:	b99c      	cbnz	r4, 80074e6 <_malloc_r+0x56>
 80074be:	4f20      	ldr	r7, [pc, #128]	; (8007540 <_malloc_r+0xb0>)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	b923      	cbnz	r3, 80074ce <_malloc_r+0x3e>
 80074c4:	4621      	mov	r1, r4
 80074c6:	4630      	mov	r0, r6
 80074c8:	f000 f862 	bl	8007590 <_sbrk_r>
 80074cc:	6038      	str	r0, [r7, #0]
 80074ce:	4629      	mov	r1, r5
 80074d0:	4630      	mov	r0, r6
 80074d2:	f000 f85d 	bl	8007590 <_sbrk_r>
 80074d6:	1c43      	adds	r3, r0, #1
 80074d8:	d123      	bne.n	8007522 <_malloc_r+0x92>
 80074da:	230c      	movs	r3, #12
 80074dc:	6033      	str	r3, [r6, #0]
 80074de:	4630      	mov	r0, r6
 80074e0:	f000 f86c 	bl	80075bc <__malloc_unlock>
 80074e4:	e7e3      	b.n	80074ae <_malloc_r+0x1e>
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	1b5b      	subs	r3, r3, r5
 80074ea:	d417      	bmi.n	800751c <_malloc_r+0x8c>
 80074ec:	2b0b      	cmp	r3, #11
 80074ee:	d903      	bls.n	80074f8 <_malloc_r+0x68>
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	441c      	add	r4, r3
 80074f4:	6025      	str	r5, [r4, #0]
 80074f6:	e004      	b.n	8007502 <_malloc_r+0x72>
 80074f8:	6863      	ldr	r3, [r4, #4]
 80074fa:	42a2      	cmp	r2, r4
 80074fc:	bf0c      	ite	eq
 80074fe:	600b      	streq	r3, [r1, #0]
 8007500:	6053      	strne	r3, [r2, #4]
 8007502:	4630      	mov	r0, r6
 8007504:	f000 f85a 	bl	80075bc <__malloc_unlock>
 8007508:	f104 000b 	add.w	r0, r4, #11
 800750c:	1d23      	adds	r3, r4, #4
 800750e:	f020 0007 	bic.w	r0, r0, #7
 8007512:	1ac2      	subs	r2, r0, r3
 8007514:	d0cc      	beq.n	80074b0 <_malloc_r+0x20>
 8007516:	1a1b      	subs	r3, r3, r0
 8007518:	50a3      	str	r3, [r4, r2]
 800751a:	e7c9      	b.n	80074b0 <_malloc_r+0x20>
 800751c:	4622      	mov	r2, r4
 800751e:	6864      	ldr	r4, [r4, #4]
 8007520:	e7cc      	b.n	80074bc <_malloc_r+0x2c>
 8007522:	1cc4      	adds	r4, r0, #3
 8007524:	f024 0403 	bic.w	r4, r4, #3
 8007528:	42a0      	cmp	r0, r4
 800752a:	d0e3      	beq.n	80074f4 <_malloc_r+0x64>
 800752c:	1a21      	subs	r1, r4, r0
 800752e:	4630      	mov	r0, r6
 8007530:	f000 f82e 	bl	8007590 <_sbrk_r>
 8007534:	3001      	adds	r0, #1
 8007536:	d1dd      	bne.n	80074f4 <_malloc_r+0x64>
 8007538:	e7cf      	b.n	80074da <_malloc_r+0x4a>
 800753a:	bf00      	nop
 800753c:	20000128 	.word	0x20000128
 8007540:	2000012c 	.word	0x2000012c

08007544 <_realloc_r>:
 8007544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007546:	4607      	mov	r7, r0
 8007548:	4614      	mov	r4, r2
 800754a:	460e      	mov	r6, r1
 800754c:	b921      	cbnz	r1, 8007558 <_realloc_r+0x14>
 800754e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007552:	4611      	mov	r1, r2
 8007554:	f7ff bf9c 	b.w	8007490 <_malloc_r>
 8007558:	b922      	cbnz	r2, 8007564 <_realloc_r+0x20>
 800755a:	f7ff ff49 	bl	80073f0 <_free_r>
 800755e:	4625      	mov	r5, r4
 8007560:	4628      	mov	r0, r5
 8007562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007564:	f000 f830 	bl	80075c8 <_malloc_usable_size_r>
 8007568:	42a0      	cmp	r0, r4
 800756a:	d20f      	bcs.n	800758c <_realloc_r+0x48>
 800756c:	4621      	mov	r1, r4
 800756e:	4638      	mov	r0, r7
 8007570:	f7ff ff8e 	bl	8007490 <_malloc_r>
 8007574:	4605      	mov	r5, r0
 8007576:	2800      	cmp	r0, #0
 8007578:	d0f2      	beq.n	8007560 <_realloc_r+0x1c>
 800757a:	4631      	mov	r1, r6
 800757c:	4622      	mov	r2, r4
 800757e:	f7ff ff0f 	bl	80073a0 <memcpy>
 8007582:	4631      	mov	r1, r6
 8007584:	4638      	mov	r0, r7
 8007586:	f7ff ff33 	bl	80073f0 <_free_r>
 800758a:	e7e9      	b.n	8007560 <_realloc_r+0x1c>
 800758c:	4635      	mov	r5, r6
 800758e:	e7e7      	b.n	8007560 <_realloc_r+0x1c>

08007590 <_sbrk_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4d06      	ldr	r5, [pc, #24]	; (80075ac <_sbrk_r+0x1c>)
 8007594:	2300      	movs	r3, #0
 8007596:	4604      	mov	r4, r0
 8007598:	4608      	mov	r0, r1
 800759a:	602b      	str	r3, [r5, #0]
 800759c:	f7fa fa54 	bl	8001a48 <_sbrk>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d102      	bne.n	80075aa <_sbrk_r+0x1a>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	b103      	cbz	r3, 80075aa <_sbrk_r+0x1a>
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	2000035c 	.word	0x2000035c

080075b0 <__malloc_lock>:
 80075b0:	4801      	ldr	r0, [pc, #4]	; (80075b8 <__malloc_lock+0x8>)
 80075b2:	f000 b811 	b.w	80075d8 <__retarget_lock_acquire_recursive>
 80075b6:	bf00      	nop
 80075b8:	20000364 	.word	0x20000364

080075bc <__malloc_unlock>:
 80075bc:	4801      	ldr	r0, [pc, #4]	; (80075c4 <__malloc_unlock+0x8>)
 80075be:	f000 b80c 	b.w	80075da <__retarget_lock_release_recursive>
 80075c2:	bf00      	nop
 80075c4:	20000364 	.word	0x20000364

080075c8 <_malloc_usable_size_r>:
 80075c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075cc:	1f18      	subs	r0, r3, #4
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	bfbc      	itt	lt
 80075d2:	580b      	ldrlt	r3, [r1, r0]
 80075d4:	18c0      	addlt	r0, r0, r3
 80075d6:	4770      	bx	lr

080075d8 <__retarget_lock_acquire_recursive>:
 80075d8:	4770      	bx	lr

080075da <__retarget_lock_release_recursive>:
 80075da:	4770      	bx	lr

080075dc <_init>:
 80075dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075de:	bf00      	nop
 80075e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075e2:	bc08      	pop	{r3}
 80075e4:	469e      	mov	lr, r3
 80075e6:	4770      	bx	lr

080075e8 <_fini>:
 80075e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ea:	bf00      	nop
 80075ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ee:	bc08      	pop	{r3}
 80075f0:	469e      	mov	lr, r3
 80075f2:	4770      	bx	lr
