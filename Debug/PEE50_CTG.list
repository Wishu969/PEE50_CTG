
PEE50_CTG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e08  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002f90  08002f90  00012f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fd0  08002fd0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fd0  08002fd0  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fd0  08002fd0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fd0  08002fd0  00012fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fd4  08002fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08002fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000008c  08003064  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003064  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da9a  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db1  00000000  00000000  0002db56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0002f908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  000305f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025dbd  00000000  00000000  000311f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d96e  00000000  00000000  00056fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec455  00000000  00000000  0006491b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150d70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003578  00000000  00000000  00150dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f78 	.word	0x08002f78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	08002f78 	.word	0x08002f78

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fb0f 	bl	80007f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f81b 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f92b 	bl	8000430 <MX_GPIO_Init>
  MX_DMA_Init();
 80001da:	f000 f90b 	bl	80003f4 <MX_DMA_Init>
  MX_DAC1_Init();
 80001de:	f000 f867 	bl	80002b0 <MX_DAC1_Init>
  MX_TIM2_Init();
 80001e2:	f000 f897 	bl	8000314 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* start dac with dma */
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sinewave32, 32, DAC_ALIGN_12B_R);
 80001e6:	2300      	movs	r3, #0
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	2320      	movs	r3, #32
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <main+0x38>)
 80001ee:	2100      	movs	r1, #0
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <main+0x3c>)
 80001f2:	f000 fcd1 	bl	8000b98 <HAL_DAC_Start_DMA>

  /* start timer for dma */
  HAL_TIM_Base_Start_IT(&htim2);
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <main+0x40>)
 80001f8:	f002 f986 	bl	8002508 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fc:	e7fe      	b.n	80001fc <main+0x34>
 80001fe:	bf00      	nop
 8000200:	20000000 	.word	0x20000000
 8000204:	200000a8 	.word	0x200000a8
 8000208:	20000104 	.word	0x20000104

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b096      	sub	sp, #88	; 0x58
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0314 	add.w	r3, r7, #20
 8000216:	2244      	movs	r2, #68	; 0x44
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f002 fea4 	bl	8002f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	463b      	mov	r3, r7
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022e:	2302      	movs	r3, #2
 8000230:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000236:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000238:	2310      	movs	r3, #16
 800023a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023c:	2302      	movs	r3, #2
 800023e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000240:	2302      	movs	r3, #2
 8000242:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000244:	2301      	movs	r3, #1
 8000246:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000248:	230a      	movs	r3, #10
 800024a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800024c:	2307      	movs	r3, #7
 800024e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000250:	2302      	movs	r3, #2
 8000252:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000254:	2302      	movs	r3, #2
 8000256:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	4618      	mov	r0, r3
 800025e:	f001 fb47 	bl	80018f0 <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000268:	f000 f95a 	bl	8000520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	230f      	movs	r3, #15
 800026e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000270:	2303      	movs	r3, #3
 8000272:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000280:	463b      	mov	r3, r7
 8000282:	2104      	movs	r1, #4
 8000284:	4618      	mov	r0, r3
 8000286:	f001 ff19 	bl	80020bc <HAL_RCC_ClockConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000290:	f000 f946 	bl	8000520 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000294:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000298:	f001 fad4 	bl	8001844 <HAL_PWREx_ControlVoltageScaling>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002a2:	f000 f93d 	bl	8000520 <Error_Handler>
  }
}
 80002a6:	bf00      	nop
 80002a8:	3758      	adds	r7, #88	; 0x58
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b08a      	sub	sp, #40	; 0x28
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2224      	movs	r2, #36	; 0x24
 80002ba:	2100      	movs	r1, #0
 80002bc:	4618      	mov	r0, r3
 80002be:	f002 fe53 	bl	8002f68 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80002c2:	4b12      	ldr	r3, [pc, #72]	; (800030c <MX_DAC1_Init+0x5c>)
 80002c4:	4a12      	ldr	r2, [pc, #72]	; (8000310 <MX_DAC1_Init+0x60>)
 80002c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80002c8:	4810      	ldr	r0, [pc, #64]	; (800030c <MX_DAC1_Init+0x5c>)
 80002ca:	f000 fc42 	bl	8000b52 <HAL_DAC_Init>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80002d4:	f000 f924 	bl	8000520 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80002d8:	2300      	movs	r3, #0
 80002da:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80002dc:	2324      	movs	r3, #36	; 0x24
 80002de:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80002e4:	2300      	movs	r3, #0
 80002e6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80002e8:	2300      	movs	r3, #0
 80002ea:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	4619      	mov	r1, r3
 80002f2:	4806      	ldr	r0, [pc, #24]	; (800030c <MX_DAC1_Init+0x5c>)
 80002f4:	f000 fd3a 	bl	8000d6c <HAL_DAC_ConfigChannel>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80002fe:	f000 f90f 	bl	8000520 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000302:	bf00      	nop
 8000304:	3728      	adds	r7, #40	; 0x28
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	200000a8 	.word	0x200000a8
 8000310:	40007400 	.word	0x40007400

08000314 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b08c      	sub	sp, #48	; 0x30
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800031a:	f107 0320 	add.w	r3, r7, #32
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000328:	f107 0314 	add.w	r3, r7, #20
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000340:	4b2b      	ldr	r3, [pc, #172]	; (80003f0 <MX_TIM2_Init+0xdc>)
 8000342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000346:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000348:	4b29      	ldr	r3, [pc, #164]	; (80003f0 <MX_TIM2_Init+0xdc>)
 800034a:	2200      	movs	r2, #0
 800034c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800034e:	4b28      	ldr	r3, [pc, #160]	; (80003f0 <MX_TIM2_Init+0xdc>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24;
 8000354:	4b26      	ldr	r3, [pc, #152]	; (80003f0 <MX_TIM2_Init+0xdc>)
 8000356:	2218      	movs	r2, #24
 8000358:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800035a:	4b25      	ldr	r3, [pc, #148]	; (80003f0 <MX_TIM2_Init+0xdc>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000360:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <MX_TIM2_Init+0xdc>)
 8000362:	2280      	movs	r2, #128	; 0x80
 8000364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000366:	4822      	ldr	r0, [pc, #136]	; (80003f0 <MX_TIM2_Init+0xdc>)
 8000368:	f002 f876 	bl	8002458 <HAL_TIM_Base_Init>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000372:	f000 f8d5 	bl	8000520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800037a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800037c:	f107 0320 	add.w	r3, r7, #32
 8000380:	4619      	mov	r1, r3
 8000382:	481b      	ldr	r0, [pc, #108]	; (80003f0 <MX_TIM2_Init+0xdc>)
 8000384:	f002 fa25 	bl	80027d2 <HAL_TIM_ConfigClockSource>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800038e:	f000 f8c7 	bl	8000520 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000392:	4817      	ldr	r0, [pc, #92]	; (80003f0 <MX_TIM2_Init+0xdc>)
 8000394:	f002 f928 	bl	80025e8 <HAL_TIM_IC_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800039e:	f000 f8bf 	bl	8000520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80003a2:	2320      	movs	r3, #32
 80003a4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003aa:	f107 0314 	add.w	r3, r7, #20
 80003ae:	4619      	mov	r1, r3
 80003b0:	480f      	ldr	r0, [pc, #60]	; (80003f0 <MX_TIM2_Init+0xdc>)
 80003b2:	f002 fd2d 	bl	8002e10 <HAL_TIMEx_MasterConfigSynchronization>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80003bc:	f000 f8b0 	bl	8000520 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80003c0:	2300      	movs	r3, #0
 80003c2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80003c4:	2301      	movs	r3, #1
 80003c6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2200      	movs	r2, #0
 80003d4:	4619      	mov	r1, r3
 80003d6:	4806      	ldr	r0, [pc, #24]	; (80003f0 <MX_TIM2_Init+0xdc>)
 80003d8:	f002 f967 	bl	80026aa <HAL_TIM_IC_ConfigChannel>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80003e2:	f000 f89d 	bl	8000520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	3730      	adds	r7, #48	; 0x30
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000104 	.word	0x20000104

080003f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <MX_DMA_Init+0x38>)
 80003fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003fe:	4a0b      	ldr	r2, [pc, #44]	; (800042c <MX_DMA_Init+0x38>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6493      	str	r3, [r2, #72]	; 0x48
 8000406:	4b09      	ldr	r3, [pc, #36]	; (800042c <MX_DMA_Init+0x38>)
 8000408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000412:	2200      	movs	r2, #0
 8000414:	2100      	movs	r1, #0
 8000416:	200d      	movs	r0, #13
 8000418:	f000 fb65 	bl	8000ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800041c:	200d      	movs	r0, #13
 800041e:	f000 fb7e 	bl	8000b1e <HAL_NVIC_EnableIRQ>

}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08a      	sub	sp, #40	; 0x28
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
 8000444:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000446:	4b33      	ldr	r3, [pc, #204]	; (8000514 <MX_GPIO_Init+0xe4>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	4a32      	ldr	r2, [pc, #200]	; (8000514 <MX_GPIO_Init+0xe4>)
 800044c:	f043 0304 	orr.w	r3, r3, #4
 8000450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000452:	4b30      	ldr	r3, [pc, #192]	; (8000514 <MX_GPIO_Init+0xe4>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	f003 0304 	and.w	r3, r3, #4
 800045a:	613b      	str	r3, [r7, #16]
 800045c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800045e:	4b2d      	ldr	r3, [pc, #180]	; (8000514 <MX_GPIO_Init+0xe4>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	4a2c      	ldr	r2, [pc, #176]	; (8000514 <MX_GPIO_Init+0xe4>)
 8000464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800046a:	4b2a      	ldr	r3, [pc, #168]	; (8000514 <MX_GPIO_Init+0xe4>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000476:	4b27      	ldr	r3, [pc, #156]	; (8000514 <MX_GPIO_Init+0xe4>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047a:	4a26      	ldr	r2, [pc, #152]	; (8000514 <MX_GPIO_Init+0xe4>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000482:	4b24      	ldr	r3, [pc, #144]	; (8000514 <MX_GPIO_Init+0xe4>)
 8000484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048e:	4b21      	ldr	r3, [pc, #132]	; (8000514 <MX_GPIO_Init+0xe4>)
 8000490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000492:	4a20      	ldr	r2, [pc, #128]	; (8000514 <MX_GPIO_Init+0xe4>)
 8000494:	f043 0302 	orr.w	r3, r3, #2
 8000498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800049a:	4b1e      	ldr	r3, [pc, #120]	; (8000514 <MX_GPIO_Init+0xe4>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049e:	f003 0302 	and.w	r3, r3, #2
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2120      	movs	r1, #32
 80004aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ae:	f001 f9a3 	bl	80017f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004b8:	4b17      	ldr	r3, [pc, #92]	; (8000518 <MX_GPIO_Init+0xe8>)
 80004ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004c0:	f107 0314 	add.w	r3, r7, #20
 80004c4:	4619      	mov	r1, r3
 80004c6:	4815      	ldr	r0, [pc, #84]	; (800051c <MX_GPIO_Init+0xec>)
 80004c8:	f000 ffec 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004cc:	230c      	movs	r3, #12
 80004ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d0:	2302      	movs	r3, #2
 80004d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004d8:	2303      	movs	r3, #3
 80004da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004dc:	2307      	movs	r3, #7
 80004de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	4619      	mov	r1, r3
 80004e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ea:	f000 ffdb 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004ee:	2320      	movs	r3, #32
 80004f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	2301      	movs	r3, #1
 80004f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fa:	2300      	movs	r3, #0
 80004fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	4619      	mov	r1, r3
 8000504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000508:	f000 ffcc 	bl	80014a4 <HAL_GPIO_Init>

}
 800050c:	bf00      	nop
 800050e:	3728      	adds	r7, #40	; 0x28
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000
 8000518:	10210000 	.word	0x10210000
 800051c:	48000800 	.word	0x48000800

08000520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000524:	b672      	cpsid	i
}
 8000526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000528:	e7fe      	b.n	8000528 <Error_Handler+0x8>
	...

0800052c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <HAL_MspInit+0x44>)
 8000534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <HAL_MspInit+0x44>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6613      	str	r3, [r2, #96]	; 0x60
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <HAL_MspInit+0x44>)
 8000540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <HAL_MspInit+0x44>)
 800054c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800054e:	4a08      	ldr	r2, [pc, #32]	; (8000570 <HAL_MspInit+0x44>)
 8000550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000554:	6593      	str	r3, [r2, #88]	; 0x58
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <HAL_MspInit+0x44>)
 8000558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800055a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000

08000574 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a2b      	ldr	r2, [pc, #172]	; (8000640 <HAL_DAC_MspInit+0xcc>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d150      	bne.n	8000638 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000596:	4b2b      	ldr	r3, [pc, #172]	; (8000644 <HAL_DAC_MspInit+0xd0>)
 8000598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800059a:	4a2a      	ldr	r2, [pc, #168]	; (8000644 <HAL_DAC_MspInit+0xd0>)
 800059c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80005a0:	6593      	str	r3, [r2, #88]	; 0x58
 80005a2:	4b28      	ldr	r3, [pc, #160]	; (8000644 <HAL_DAC_MspInit+0xd0>)
 80005a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b25      	ldr	r3, [pc, #148]	; (8000644 <HAL_DAC_MspInit+0xd0>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4a24      	ldr	r2, [pc, #144]	; (8000644 <HAL_DAC_MspInit+0xd0>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ba:	4b22      	ldr	r3, [pc, #136]	; (8000644 <HAL_DAC_MspInit+0xd0>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005c6:	2310      	movs	r3, #16
 80005c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ca:	2303      	movs	r3, #3
 80005cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005dc:	f000 ff62 	bl	80014a4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80005e0:	4b19      	ldr	r3, [pc, #100]	; (8000648 <HAL_DAC_MspInit+0xd4>)
 80005e2:	4a1a      	ldr	r2, [pc, #104]	; (800064c <HAL_DAC_MspInit+0xd8>)
 80005e4:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <HAL_DAC_MspInit+0xd4>)
 80005e8:	2206      	movs	r2, #6
 80005ea:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <HAL_DAC_MspInit+0xd4>)
 80005ee:	2210      	movs	r2, #16
 80005f0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <HAL_DAC_MspInit+0xd4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <HAL_DAC_MspInit+0xd4>)
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_DAC_MspInit+0xd4>)
 8000600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000604:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <HAL_DAC_MspInit+0xd4>)
 8000608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800060c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <HAL_DAC_MspInit+0xd4>)
 8000610:	2220      	movs	r2, #32
 8000612:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_DAC_MspInit+0xd4>)
 8000616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800061a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800061c:	480a      	ldr	r0, [pc, #40]	; (8000648 <HAL_DAC_MspInit+0xd4>)
 800061e:	f000 fd49 	bl	80010b4 <HAL_DMA_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8000628:	f7ff ff7a 	bl	8000520 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a06      	ldr	r2, [pc, #24]	; (8000648 <HAL_DAC_MspInit+0xd4>)
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	4a05      	ldr	r2, [pc, #20]	; (8000648 <HAL_DAC_MspInit+0xd4>)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000638:	bf00      	nop
 800063a:	3728      	adds	r7, #40	; 0x28
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40007400 	.word	0x40007400
 8000644:	40021000 	.word	0x40021000
 8000648:	200000bc 	.word	0x200000bc
 800064c:	40020030 	.word	0x40020030

08000650 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000670:	d128      	bne.n	80006c4 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <HAL_TIM_Base_MspInit+0x7c>)
 8000674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000676:	4a15      	ldr	r2, [pc, #84]	; (80006cc <HAL_TIM_Base_MspInit+0x7c>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6593      	str	r3, [r2, #88]	; 0x58
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <HAL_TIM_Base_MspInit+0x7c>)
 8000680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <HAL_TIM_Base_MspInit+0x7c>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a0f      	ldr	r2, [pc, #60]	; (80006cc <HAL_TIM_Base_MspInit+0x7c>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <HAL_TIM_Base_MspInit+0x7c>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006a2:	2301      	movs	r3, #1
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a6:	2302      	movs	r3, #2
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80006b2:	2301      	movs	r3, #1
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c0:	f000 fef0 	bl	80014a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	; 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000

080006d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <NMI_Handler+0x4>

080006d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <HardFault_Handler+0x4>

080006dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <MemManage_Handler+0x4>

080006e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <BusFault_Handler+0x4>

080006e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <UsageFault_Handler+0x4>

080006ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071c:	f000 f8c4 	bl	80008a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <DMA1_Channel3_IRQHandler+0x10>)
 800072a:	f000 fddb 	bl	80012e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200000bc 	.word	0x200000bc

08000738 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <SystemInit+0x5c>)
 800073e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000742:	4a14      	ldr	r2, [pc, #80]	; (8000794 <SystemInit+0x5c>)
 8000744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x60>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x60>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x60>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <SystemInit+0x60>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <SystemInit+0x60>)
 8000764:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000768:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800076c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <SystemInit+0x60>)
 8000770:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000774:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <SystemInit+0x60>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a07      	ldr	r2, [pc, #28]	; (8000798 <SystemInit+0x60>)
 800077c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000780:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SystemInit+0x60>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	40021000 	.word	0x40021000

0800079c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800079c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a0:	f7ff ffca 	bl	8000738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007a6:	e003      	b.n	80007b0 <LoopCopyDataInit>

080007a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007a8:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007ae:	3104      	adds	r1, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007b0:	480a      	ldr	r0, [pc, #40]	; (80007dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80007b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007b8:	d3f6      	bcc.n	80007a8 <CopyDataInit>
	ldr	r2, =_sbss
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007bc:	e002      	b.n	80007c4 <LoopFillZerobss>

080007be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007c0:	f842 3b04 	str.w	r3, [r2], #4

080007c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <LoopForever+0x16>)
	cmp	r2, r3
 80007c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007c8:	d3f9      	bcc.n	80007be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ca:	f002 fba9 	bl	8002f20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ce:	f7ff fcfb 	bl	80001c8 <main>

080007d2 <LoopForever>:

LoopForever:
    b LoopForever
 80007d2:	e7fe      	b.n	80007d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007d4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80007d8:	08002fd8 	.word	0x08002fd8
	ldr	r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80007e0:	2000008c 	.word	0x2000008c
	ldr	r2, =_sbss
 80007e4:	2000008c 	.word	0x2000008c
	ldr	r3, = _ebss
 80007e8:	20000154 	.word	0x20000154

080007ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <ADC1_2_IRQHandler>
	...

080007f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <HAL_Init+0x3c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a0b      	ldr	r2, [pc, #44]	; (800082c <HAL_Init+0x3c>)
 8000800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000804:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000806:	2003      	movs	r0, #3
 8000808:	f000 f962 	bl	8000ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800080c:	2000      	movs	r0, #0
 800080e:	f000 f80f 	bl	8000830 <HAL_InitTick>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d002      	beq.n	800081e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000818:	2301      	movs	r3, #1
 800081a:	71fb      	strb	r3, [r7, #7]
 800081c:	e001      	b.n	8000822 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800081e:	f7ff fe85 	bl	800052c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000822:	79fb      	ldrb	r3, [r7, #7]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40022000 	.word	0x40022000

08000830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000838:	2300      	movs	r3, #0
 800083a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <HAL_InitTick+0x6c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d023      	beq.n	800088c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <HAL_InitTick+0x70>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_InitTick+0x6c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4619      	mov	r1, r3
 800084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000852:	fbb3 f3f1 	udiv	r3, r3, r1
 8000856:	fbb2 f3f3 	udiv	r3, r2, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f000 f96d 	bl	8000b3a <HAL_SYSTICK_Config>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d10f      	bne.n	8000886 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b0f      	cmp	r3, #15
 800086a:	d809      	bhi.n	8000880 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800086c:	2200      	movs	r2, #0
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	f000 f937 	bl	8000ae6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000878:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <HAL_InitTick+0x74>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6013      	str	r3, [r2, #0]
 800087e:	e007      	b.n	8000890 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000880:	2301      	movs	r3, #1
 8000882:	73fb      	strb	r3, [r7, #15]
 8000884:	e004      	b.n	8000890 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	73fb      	strb	r3, [r7, #15]
 800088a:	e001      	b.n	8000890 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000890:	7bfb      	ldrb	r3, [r7, #15]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000088 	.word	0x20000088
 80008a0:	20000080 	.word	0x20000080
 80008a4:	20000084 	.word	0x20000084

080008a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_IncTick+0x20>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_IncTick+0x24>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <HAL_IncTick+0x24>)
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	20000088 	.word	0x20000088
 80008cc:	20000150 	.word	0x20000150

080008d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return uwTick;
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <HAL_GetTick+0x14>)
 80008d6:	681b      	ldr	r3, [r3, #0]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000150 	.word	0x20000150

080008e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008f0:	f7ff ffee 	bl	80008d0 <HAL_GetTick>
 80008f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000900:	d005      	beq.n	800090e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <HAL_Delay+0x44>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	461a      	mov	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	4413      	add	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800090e:	bf00      	nop
 8000910:	f7ff ffde 	bl	80008d0 <HAL_GetTick>
 8000914:	4602      	mov	r2, r0
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	429a      	cmp	r2, r3
 800091e:	d8f7      	bhi.n	8000910 <HAL_Delay+0x28>
  {
  }
}
 8000920:	bf00      	nop
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000088 	.word	0x20000088

08000930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800094c:	4013      	ands	r3, r2
 800094e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800095c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000962:	4a04      	ldr	r2, [pc, #16]	; (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	60d3      	str	r3, [r2, #12]
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800097c:	4b04      	ldr	r3, [pc, #16]	; (8000990 <__NVIC_GetPriorityGrouping+0x18>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	0a1b      	lsrs	r3, r3, #8
 8000982:	f003 0307 	and.w	r3, r3, #7
}
 8000986:	4618      	mov	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	db0b      	blt.n	80009be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	f003 021f 	and.w	r2, r3, #31
 80009ac:	4907      	ldr	r1, [pc, #28]	; (80009cc <__NVIC_EnableIRQ+0x38>)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	095b      	lsrs	r3, r3, #5
 80009b4:	2001      	movs	r0, #1
 80009b6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000e100 	.word	0xe000e100

080009d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	6039      	str	r1, [r7, #0]
 80009da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	db0a      	blt.n	80009fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	490c      	ldr	r1, [pc, #48]	; (8000a1c <__NVIC_SetPriority+0x4c>)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	0112      	lsls	r2, r2, #4
 80009f0:	b2d2      	uxtb	r2, r2
 80009f2:	440b      	add	r3, r1
 80009f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f8:	e00a      	b.n	8000a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	4908      	ldr	r1, [pc, #32]	; (8000a20 <__NVIC_SetPriority+0x50>)
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	f003 030f 	and.w	r3, r3, #15
 8000a06:	3b04      	subs	r3, #4
 8000a08:	0112      	lsls	r2, r2, #4
 8000a0a:	b2d2      	uxtb	r2, r2
 8000a0c:	440b      	add	r3, r1
 8000a0e:	761a      	strb	r2, [r3, #24]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000e100 	.word	0xe000e100
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b089      	sub	sp, #36	; 0x24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	f1c3 0307 	rsb	r3, r3, #7
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	bf28      	it	cs
 8000a42:	2304      	movcs	r3, #4
 8000a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3304      	adds	r3, #4
 8000a4a:	2b06      	cmp	r3, #6
 8000a4c:	d902      	bls.n	8000a54 <NVIC_EncodePriority+0x30>
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3b03      	subs	r3, #3
 8000a52:	e000      	b.n	8000a56 <NVIC_EncodePriority+0x32>
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a58:	f04f 32ff 	mov.w	r2, #4294967295
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43da      	mvns	r2, r3
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	401a      	ands	r2, r3
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	fa01 f303 	lsl.w	r3, r1, r3
 8000a76:	43d9      	mvns	r1, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	4313      	orrs	r3, r2
         );
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3724      	adds	r7, #36	; 0x24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a9c:	d301      	bcc.n	8000aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00f      	b.n	8000ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <SysTick_Config+0x40>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aaa:	210f      	movs	r1, #15
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f7ff ff8e 	bl	80009d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <SysTick_Config+0x40>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <SysTick_Config+0x40>)
 8000abc:	2207      	movs	r2, #7
 8000abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	e000e010 	.word	0xe000e010

08000ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ff29 	bl	8000930 <__NVIC_SetPriorityGrouping>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	4603      	mov	r3, r0
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
 8000af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000af8:	f7ff ff3e 	bl	8000978 <__NVIC_GetPriorityGrouping>
 8000afc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	6978      	ldr	r0, [r7, #20]
 8000b04:	f7ff ff8e 	bl	8000a24 <NVIC_EncodePriority>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff5d 	bl	80009d0 <__NVIC_SetPriority>
}
 8000b16:	bf00      	nop
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4603      	mov	r3, r0
 8000b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff31 	bl	8000994 <__NVIC_EnableIRQ>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ffa2 	bl	8000a8c <SysTick_Config>
 8000b48:	4603      	mov	r3, r0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d101      	bne.n	8000b64 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	e014      	b.n	8000b8e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	791b      	ldrb	r3, [r3, #4]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d105      	bne.n	8000b7a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff fcfd 	bl	8000574 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	795b      	ldrb	r3, [r3, #5]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d101      	bne.n	8000bb6 <HAL_DAC_Start_DMA+0x1e>
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	e0ab      	b.n	8000d0e <HAL_DAC_Start_DMA+0x176>
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d12f      	bne.n	8000c28 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	4a52      	ldr	r2, [pc, #328]	; (8000d18 <HAL_DAC_Start_DMA+0x180>)
 8000bce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	4a51      	ldr	r2, [pc, #324]	; (8000d1c <HAL_DAC_Start_DMA+0x184>)
 8000bd6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	4a50      	ldr	r2, [pc, #320]	; (8000d20 <HAL_DAC_Start_DMA+0x188>)
 8000bde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000bee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
 8000bf2:	2b08      	cmp	r3, #8
 8000bf4:	d013      	beq.n	8000c1e <HAL_DAC_Start_DMA+0x86>
 8000bf6:	6a3b      	ldr	r3, [r7, #32]
 8000bf8:	2b08      	cmp	r3, #8
 8000bfa:	d845      	bhi.n	8000c88 <HAL_DAC_Start_DMA+0xf0>
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_DAC_Start_DMA+0x72>
 8000c02:	6a3b      	ldr	r3, [r7, #32]
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d005      	beq.n	8000c14 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000c08:	e03e      	b.n	8000c88 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3308      	adds	r3, #8
 8000c10:	613b      	str	r3, [r7, #16]
        break;
 8000c12:	e03c      	b.n	8000c8e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	330c      	adds	r3, #12
 8000c1a:	613b      	str	r3, [r7, #16]
        break;
 8000c1c:	e037      	b.n	8000c8e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3310      	adds	r3, #16
 8000c24:	613b      	str	r3, [r7, #16]
        break;
 8000c26:	e032      	b.n	8000c8e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	4a3d      	ldr	r2, [pc, #244]	; (8000d24 <HAL_DAC_Start_DMA+0x18c>)
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	4a3c      	ldr	r2, [pc, #240]	; (8000d28 <HAL_DAC_Start_DMA+0x190>)
 8000c36:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	4a3b      	ldr	r2, [pc, #236]	; (8000d2c <HAL_DAC_Start_DMA+0x194>)
 8000c3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c4e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000c50:	6a3b      	ldr	r3, [r7, #32]
 8000c52:	2b08      	cmp	r3, #8
 8000c54:	d013      	beq.n	8000c7e <HAL_DAC_Start_DMA+0xe6>
 8000c56:	6a3b      	ldr	r3, [r7, #32]
 8000c58:	2b08      	cmp	r3, #8
 8000c5a:	d817      	bhi.n	8000c8c <HAL_DAC_Start_DMA+0xf4>
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_DAC_Start_DMA+0xd2>
 8000c62:	6a3b      	ldr	r3, [r7, #32]
 8000c64:	2b04      	cmp	r3, #4
 8000c66:	d005      	beq.n	8000c74 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000c68:	e010      	b.n	8000c8c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3314      	adds	r3, #20
 8000c70:	613b      	str	r3, [r7, #16]
        break;
 8000c72:	e00c      	b.n	8000c8e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3318      	adds	r3, #24
 8000c7a:	613b      	str	r3, [r7, #16]
        break;
 8000c7c:	e007      	b.n	8000c8e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	331c      	adds	r3, #28
 8000c84:	613b      	str	r3, [r7, #16]
        break;
 8000c86:	e002      	b.n	8000c8e <HAL_DAC_Start_DMA+0xf6>
        break;
 8000c88:	bf00      	nop
 8000c8a:	e000      	b.n	8000c8e <HAL_DAC_Start_DMA+0xf6>
        break;
 8000c8c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d111      	bne.n	8000cb8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ca2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	6898      	ldr	r0, [r3, #8]
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	f000 fab9 	bl	8001224 <HAL_DMA_Start_IT>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	75fb      	strb	r3, [r7, #23]
 8000cb6:	e010      	b.n	8000cda <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000cc6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	68d8      	ldr	r0, [r3, #12]
 8000ccc:	6879      	ldr	r1, [r7, #4]
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	f000 faa7 	bl	8001224 <HAL_DMA_Start_IT>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000ce0:	7dfb      	ldrb	r3, [r7, #23]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10c      	bne.n	8000d00 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6819      	ldr	r1, [r3, #0]
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	f003 0310 	and.w	r3, r3, #16
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	409a      	lsls	r2, r3
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	e005      	b.n	8000d0c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	691b      	ldr	r3, [r3, #16]
 8000d04:	f043 0204 	orr.w	r2, r3, #4
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	08000fa1 	.word	0x08000fa1
 8000d1c:	08000fc3 	.word	0x08000fc3
 8000d20:	08000fdf 	.word	0x08000fdf
 8000d24:	08001049 	.word	0x08001049
 8000d28:	0800106b 	.word	0x0800106b
 8000d2c:	08001087 	.word	0x08001087

08000d30 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	795b      	ldrb	r3, [r3, #5]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d101      	bne.n	8000d88 <HAL_DAC_ConfigChannel+0x1c>
 8000d84:	2302      	movs	r3, #2
 8000d86:	e107      	b.n	8000f98 <HAL_DAC_ConfigChannel+0x22c>
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2202      	movs	r2, #2
 8000d92:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d174      	bne.n	8000e86 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000d9c:	f7ff fd98 	bl	80008d0 <HAL_GetTick>
 8000da0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d134      	bne.n	8000e12 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000da8:	e011      	b.n	8000dce <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000daa:	f7ff fd91 	bl	80008d0 <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d90a      	bls.n	8000dce <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	f043 0208 	orr.w	r2, r3, #8
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e0e4      	b.n	8000f98 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1e6      	bne.n	8000daa <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f7ff fd83 	bl	80008e8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	6992      	ldr	r2, [r2, #24]
 8000dea:	641a      	str	r2, [r3, #64]	; 0x40
 8000dec:	e01e      	b.n	8000e2c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000dee:	f7ff fd6f 	bl	80008d0 <HAL_GetTick>
 8000df2:	4602      	mov	r2, r0
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d90a      	bls.n	8000e12 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	f043 0208 	orr.w	r2, r3, #8
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e0c2      	b.n	8000f98 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	dbe8      	blt.n	8000dee <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f7ff fd63 	bl	80008e8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	6992      	ldr	r2, [r2, #24]
 8000e2a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f003 0310 	and.w	r3, r3, #16
 8000e38:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	ea02 0103 	and.w	r1, r2, r3
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	69da      	ldr	r2, [r3, #28]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f003 0310 	and.w	r3, r3, #16
 8000e50:	409a      	lsls	r2, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	430a      	orrs	r2, r1
 8000e58:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0310 	and.w	r3, r3, #16
 8000e66:	21ff      	movs	r1, #255	; 0xff
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	ea02 0103 	and.w	r1, r2, r3
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	6a1a      	ldr	r2, [r3, #32]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f003 0310 	and.w	r3, r3, #16
 8000e7c:	409a      	lsls	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	430a      	orrs	r2, r1
 8000e84:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d11d      	bne.n	8000eca <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e94:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f003 0310 	and.w	r3, r3, #16
 8000e9c:	221f      	movs	r2, #31
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0310 	and.w	r3, r3, #16
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed0:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f003 0310 	and.w	r3, r3, #16
 8000ed8:	2207      	movs	r2, #7
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6819      	ldr	r1, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0310 	and.w	r3, r3, #16
 8000f1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	400a      	ands	r2, r1
 8000f2e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0310 	and.w	r3, r3, #16
 8000f3e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0310 	and.w	r3, r3, #16
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6819      	ldr	r1, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f003 0310 	and.w	r3, r3, #16
 8000f7a:	22c0      	movs	r2, #192	; 0xc0
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43da      	mvns	r2, r3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	400a      	ands	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2200      	movs	r2, #0
 8000f94:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3720      	adds	r7, #32
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f7ff febe 	bl	8000d30 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	711a      	strb	r2, [r3, #4]
}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f7ff feb7 	bl	8000d44 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	f043 0204 	orr.w	r2, r3, #4
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f7ff fead 	bl	8000d58 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2201      	movs	r2, #1
 8001002:	711a      	strb	r2, [r3, #4]
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001054:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f7ff ffd8 	bl	800100c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2201      	movs	r2, #1
 8001060:	711a      	strb	r2, [r3, #4]
}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b084      	sub	sp, #16
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001076:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f7ff ffd1 	bl	8001020 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b084      	sub	sp, #16
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001092:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	f043 0204 	orr.w	r2, r3, #4
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f7ff ffc7 	bl	8001034 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2201      	movs	r2, #1
 80010aa:	711a      	strb	r2, [r3, #4]
}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e098      	b.n	80011f8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b4d      	ldr	r3, [pc, #308]	; (8001204 <HAL_DMA_Init+0x150>)
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d80f      	bhi.n	80010f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b4b      	ldr	r3, [pc, #300]	; (8001208 <HAL_DMA_Init+0x154>)
 80010da:	4413      	add	r3, r2
 80010dc:	4a4b      	ldr	r2, [pc, #300]	; (800120c <HAL_DMA_Init+0x158>)
 80010de:	fba2 2303 	umull	r2, r3, r2, r3
 80010e2:	091b      	lsrs	r3, r3, #4
 80010e4:	009a      	lsls	r2, r3, #2
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a48      	ldr	r2, [pc, #288]	; (8001210 <HAL_DMA_Init+0x15c>)
 80010ee:	641a      	str	r2, [r3, #64]	; 0x40
 80010f0:	e00e      	b.n	8001110 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b46      	ldr	r3, [pc, #280]	; (8001214 <HAL_DMA_Init+0x160>)
 80010fa:	4413      	add	r3, r2
 80010fc:	4a43      	ldr	r2, [pc, #268]	; (800120c <HAL_DMA_Init+0x158>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	009a      	lsls	r2, r3, #2
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a42      	ldr	r2, [pc, #264]	; (8001218 <HAL_DMA_Init+0x164>)
 800110e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2202      	movs	r2, #2
 8001114:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800112a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001134:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800114c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	4313      	orrs	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800116a:	d039      	beq.n	80011e0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	4a27      	ldr	r2, [pc, #156]	; (8001210 <HAL_DMA_Init+0x15c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d11a      	bne.n	80011ac <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001176:	4b29      	ldr	r3, [pc, #164]	; (800121c <HAL_DMA_Init+0x168>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f003 031c 	and.w	r3, r3, #28
 8001182:	210f      	movs	r1, #15
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	4924      	ldr	r1, [pc, #144]	; (800121c <HAL_DMA_Init+0x168>)
 800118c:	4013      	ands	r3, r2
 800118e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <HAL_DMA_Init+0x168>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6859      	ldr	r1, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	f003 031c 	and.w	r3, r3, #28
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	491d      	ldr	r1, [pc, #116]	; (800121c <HAL_DMA_Init+0x168>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]
 80011aa:	e019      	b.n	80011e0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011ac:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <HAL_DMA_Init+0x16c>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b4:	f003 031c 	and.w	r3, r3, #28
 80011b8:	210f      	movs	r1, #15
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	4917      	ldr	r1, [pc, #92]	; (8001220 <HAL_DMA_Init+0x16c>)
 80011c2:	4013      	ands	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <HAL_DMA_Init+0x16c>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6859      	ldr	r1, [r3, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f003 031c 	and.w	r3, r3, #28
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	4911      	ldr	r1, [pc, #68]	; (8001220 <HAL_DMA_Init+0x16c>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	40020407 	.word	0x40020407
 8001208:	bffdfff8 	.word	0xbffdfff8
 800120c:	cccccccd 	.word	0xcccccccd
 8001210:	40020000 	.word	0x40020000
 8001214:	bffdfbf8 	.word	0xbffdfbf8
 8001218:	40020400 	.word	0x40020400
 800121c:	400200a8 	.word	0x400200a8
 8001220:	400204a8 	.word	0x400204a8

08001224 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800123c:	2b01      	cmp	r3, #1
 800123e:	d101      	bne.n	8001244 <HAL_DMA_Start_IT+0x20>
 8001240:	2302      	movs	r3, #2
 8001242:	e04b      	b.n	80012dc <HAL_DMA_Start_IT+0xb8>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b01      	cmp	r3, #1
 8001256:	d13a      	bne.n	80012ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2202      	movs	r2, #2
 800125c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2200      	movs	r2, #0
 8001264:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 0201 	bic.w	r2, r2, #1
 8001274:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	68b9      	ldr	r1, [r7, #8]
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f000 f8e0 	bl	8001442 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	2b00      	cmp	r3, #0
 8001288:	d008      	beq.n	800129c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f042 020e 	orr.w	r2, r2, #14
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	e00f      	b.n	80012bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0204 	bic.w	r2, r2, #4
 80012aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 020a 	orr.w	r2, r2, #10
 80012ba:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0201 	orr.w	r2, r2, #1
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	e005      	b.n	80012da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80012d6:	2302      	movs	r3, #2
 80012d8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80012da:	7dfb      	ldrb	r3, [r7, #23]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001300:	f003 031c 	and.w	r3, r3, #28
 8001304:	2204      	movs	r2, #4
 8001306:	409a      	lsls	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4013      	ands	r3, r2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d026      	beq.n	800135e <HAL_DMA_IRQHandler+0x7a>
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	2b00      	cmp	r3, #0
 8001318:	d021      	beq.n	800135e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0320 	and.w	r3, r3, #32
 8001324:	2b00      	cmp	r3, #0
 8001326:	d107      	bne.n	8001338 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0204 	bic.w	r2, r2, #4
 8001336:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133c:	f003 021c 	and.w	r2, r3, #28
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	2104      	movs	r1, #4
 8001346:	fa01 f202 	lsl.w	r2, r1, r2
 800134a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	2b00      	cmp	r3, #0
 8001352:	d071      	beq.n	8001438 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800135c:	e06c      	b.n	8001438 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f003 031c 	and.w	r3, r3, #28
 8001366:	2202      	movs	r2, #2
 8001368:	409a      	lsls	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4013      	ands	r3, r2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d02e      	beq.n	80013d0 <HAL_DMA_IRQHandler+0xec>
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d029      	beq.n	80013d0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0320 	and.w	r3, r3, #32
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10b      	bne.n	80013a2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 020a 	bic.w	r2, r2, #10
 8001398:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f003 021c 	and.w	r2, r3, #28
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	2102      	movs	r1, #2
 80013b0:	fa01 f202 	lsl.w	r2, r1, r2
 80013b4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d038      	beq.n	8001438 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013ce:	e033      	b.n	8001438 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d4:	f003 031c 	and.w	r3, r3, #28
 80013d8:	2208      	movs	r2, #8
 80013da:	409a      	lsls	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4013      	ands	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d02a      	beq.n	800143a <HAL_DMA_IRQHandler+0x156>
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d025      	beq.n	800143a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 020e 	bic.w	r2, r2, #14
 80013fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f003 021c 	and.w	r2, r3, #28
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	2101      	movs	r1, #1
 800140c:	fa01 f202 	lsl.w	r2, r1, r2
 8001410:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142c:	2b00      	cmp	r3, #0
 800142e:	d004      	beq.n	800143a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001438:	bf00      	nop
 800143a:	bf00      	nop
}
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001442:	b480      	push	{r7}
 8001444:	b085      	sub	sp, #20
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001454:	f003 021c 	and.w	r2, r3, #28
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	2101      	movs	r1, #1
 800145e:	fa01 f202 	lsl.w	r2, r1, r2
 8001462:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b10      	cmp	r3, #16
 8001472:	d108      	bne.n	8001486 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001484:	e007      	b.n	8001496 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	60da      	str	r2, [r3, #12]
}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b2:	e17f      	b.n	80017b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	2101      	movs	r1, #1
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	4013      	ands	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 8171 	beq.w	80017ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d00b      	beq.n	80014ec <HAL_GPIO_Init+0x48>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d007      	beq.n	80014ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014e0:	2b11      	cmp	r3, #17
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b12      	cmp	r3, #18
 80014ea:	d130      	bne.n	800154e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	2203      	movs	r2, #3
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001522:	2201      	movs	r2, #1
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	091b      	lsrs	r3, r3, #4
 8001538:	f003 0201 	and.w	r2, r3, #1
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b03      	cmp	r3, #3
 8001558:	d118      	bne.n	800158c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001560:	2201      	movs	r2, #1
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	08db      	lsrs	r3, r3, #3
 8001576:	f003 0201 	and.w	r2, r3, #1
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	2203      	movs	r2, #3
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x128>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b12      	cmp	r3, #18
 80015ca:	d123      	bne.n	8001614 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	08da      	lsrs	r2, r3, #3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3208      	adds	r2, #8
 80015d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	220f      	movs	r2, #15
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	08da      	lsrs	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3208      	adds	r2, #8
 800160e:	6939      	ldr	r1, [r7, #16]
 8001610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2203      	movs	r2, #3
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0203 	and.w	r2, r3, #3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80ac 	beq.w	80017ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	4b5f      	ldr	r3, [pc, #380]	; (80017d4 <HAL_GPIO_Init+0x330>)
 8001658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165a:	4a5e      	ldr	r2, [pc, #376]	; (80017d4 <HAL_GPIO_Init+0x330>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6613      	str	r3, [r2, #96]	; 0x60
 8001662:	4b5c      	ldr	r3, [pc, #368]	; (80017d4 <HAL_GPIO_Init+0x330>)
 8001664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800166e:	4a5a      	ldr	r2, [pc, #360]	; (80017d8 <HAL_GPIO_Init+0x334>)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	3302      	adds	r3, #2
 8001676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	220f      	movs	r2, #15
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001698:	d025      	beq.n	80016e6 <HAL_GPIO_Init+0x242>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4f      	ldr	r2, [pc, #316]	; (80017dc <HAL_GPIO_Init+0x338>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01f      	beq.n	80016e2 <HAL_GPIO_Init+0x23e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4e      	ldr	r2, [pc, #312]	; (80017e0 <HAL_GPIO_Init+0x33c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d019      	beq.n	80016de <HAL_GPIO_Init+0x23a>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4d      	ldr	r2, [pc, #308]	; (80017e4 <HAL_GPIO_Init+0x340>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d013      	beq.n	80016da <HAL_GPIO_Init+0x236>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4c      	ldr	r2, [pc, #304]	; (80017e8 <HAL_GPIO_Init+0x344>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d00d      	beq.n	80016d6 <HAL_GPIO_Init+0x232>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4b      	ldr	r2, [pc, #300]	; (80017ec <HAL_GPIO_Init+0x348>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d007      	beq.n	80016d2 <HAL_GPIO_Init+0x22e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4a      	ldr	r2, [pc, #296]	; (80017f0 <HAL_GPIO_Init+0x34c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d101      	bne.n	80016ce <HAL_GPIO_Init+0x22a>
 80016ca:	2306      	movs	r3, #6
 80016cc:	e00c      	b.n	80016e8 <HAL_GPIO_Init+0x244>
 80016ce:	2307      	movs	r3, #7
 80016d0:	e00a      	b.n	80016e8 <HAL_GPIO_Init+0x244>
 80016d2:	2305      	movs	r3, #5
 80016d4:	e008      	b.n	80016e8 <HAL_GPIO_Init+0x244>
 80016d6:	2304      	movs	r3, #4
 80016d8:	e006      	b.n	80016e8 <HAL_GPIO_Init+0x244>
 80016da:	2303      	movs	r3, #3
 80016dc:	e004      	b.n	80016e8 <HAL_GPIO_Init+0x244>
 80016de:	2302      	movs	r3, #2
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_Init+0x244>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <HAL_GPIO_Init+0x244>
 80016e6:	2300      	movs	r3, #0
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	f002 0203 	and.w	r2, r2, #3
 80016ee:	0092      	lsls	r2, r2, #2
 80016f0:	4093      	lsls	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016f8:	4937      	ldr	r1, [pc, #220]	; (80017d8 <HAL_GPIO_Init+0x334>)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	3302      	adds	r3, #2
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001706:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <HAL_GPIO_Init+0x350>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800172a:	4a32      	ldr	r2, [pc, #200]	; (80017f4 <HAL_GPIO_Init+0x350>)
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001730:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <HAL_GPIO_Init+0x350>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	43db      	mvns	r3, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001754:	4a27      	ldr	r2, [pc, #156]	; (80017f4 <HAL_GPIO_Init+0x350>)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <HAL_GPIO_Init+0x350>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800177e:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_GPIO_Init+0x350>)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_GPIO_Init+0x350>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	43db      	mvns	r3, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017a8:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <HAL_GPIO_Init+0x350>)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3301      	adds	r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa22 f303 	lsr.w	r3, r2, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f47f ae78 	bne.w	80014b4 <HAL_GPIO_Init+0x10>
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	371c      	adds	r7, #28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010000 	.word	0x40010000
 80017dc:	48000400 	.word	0x48000400
 80017e0:	48000800 	.word	0x48000800
 80017e4:	48000c00 	.word	0x48000c00
 80017e8:	48001000 	.word	0x48001000
 80017ec:	48001400 	.word	0x48001400
 80017f0:	48001800 	.word	0x48001800
 80017f4:	40010400 	.word	0x40010400

080017f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	807b      	strh	r3, [r7, #2]
 8001804:	4613      	mov	r3, r2
 8001806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001808:	787b      	ldrb	r3, [r7, #1]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800180e:	887a      	ldrh	r2, [r7, #2]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001814:	e002      	b.n	800181c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001816:	887a      	ldrh	r2, [r7, #2]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <HAL_PWREx_GetVoltageRange+0x18>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40007000 	.word	0x40007000

08001844 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001852:	d130      	bne.n	80018b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001854:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800185c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001860:	d038      	beq.n	80018d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800186a:	4a1e      	ldr	r2, [pc, #120]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800186c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001870:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001872:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2232      	movs	r2, #50	; 0x32
 8001878:	fb02 f303 	mul.w	r3, r2, r3
 800187c:	4a1b      	ldr	r2, [pc, #108]	; (80018ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	0c9b      	lsrs	r3, r3, #18
 8001884:	3301      	adds	r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001888:	e002      	b.n	8001890 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3b01      	subs	r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800189c:	d102      	bne.n	80018a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f2      	bne.n	800188a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b0:	d110      	bne.n	80018d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e00f      	b.n	80018d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c2:	d007      	beq.n	80018d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018cc:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40007000 	.word	0x40007000
 80018e8:	20000080 	.word	0x20000080
 80018ec:	431bde83 	.word	0x431bde83

080018f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e3d4      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001902:	4ba1      	ldr	r3, [pc, #644]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800190c:	4b9e      	ldr	r3, [pc, #632]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0310 	and.w	r3, r3, #16
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 80e4 	beq.w	8001aec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d007      	beq.n	800193a <HAL_RCC_OscConfig+0x4a>
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	2b0c      	cmp	r3, #12
 800192e:	f040 808b 	bne.w	8001a48 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2b01      	cmp	r3, #1
 8001936:	f040 8087 	bne.w	8001a48 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800193a:	4b93      	ldr	r3, [pc, #588]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <HAL_RCC_OscConfig+0x62>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e3ac      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1a      	ldr	r2, [r3, #32]
 8001956:	4b8c      	ldr	r3, [pc, #560]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <HAL_RCC_OscConfig+0x7c>
 8001962:	4b89      	ldr	r3, [pc, #548]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800196a:	e005      	b.n	8001978 <HAL_RCC_OscConfig+0x88>
 800196c:	4b86      	ldr	r3, [pc, #536]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 800196e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001972:	091b      	lsrs	r3, r3, #4
 8001974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001978:	4293      	cmp	r3, r2
 800197a:	d223      	bcs.n	80019c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	4618      	mov	r0, r3
 8001982:	f000 fd09 	bl	8002398 <RCC_SetFlashLatencyFromMSIRange>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e38d      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001990:	4b7d      	ldr	r3, [pc, #500]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a7c      	ldr	r2, [pc, #496]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001996:	f043 0308 	orr.w	r3, r3, #8
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b7a      	ldr	r3, [pc, #488]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4977      	ldr	r1, [pc, #476]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ae:	4b76      	ldr	r3, [pc, #472]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	021b      	lsls	r3, r3, #8
 80019bc:	4972      	ldr	r1, [pc, #456]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	604b      	str	r3, [r1, #4]
 80019c2:	e025      	b.n	8001a10 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019c4:	4b70      	ldr	r3, [pc, #448]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a6f      	ldr	r2, [pc, #444]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 80019ca:	f043 0308 	orr.w	r3, r3, #8
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b6d      	ldr	r3, [pc, #436]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	496a      	ldr	r1, [pc, #424]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019e2:	4b69      	ldr	r3, [pc, #420]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	4965      	ldr	r1, [pc, #404]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d109      	bne.n	8001a10 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fcc9 	bl	8002398 <RCC_SetFlashLatencyFromMSIRange>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e34d      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a10:	f000 fc36 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 8001a14:	4602      	mov	r2, r0
 8001a16:	4b5c      	ldr	r3, [pc, #368]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	091b      	lsrs	r3, r3, #4
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	495a      	ldr	r1, [pc, #360]	; (8001b8c <HAL_RCC_OscConfig+0x29c>)
 8001a22:	5ccb      	ldrb	r3, [r1, r3]
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2c:	4a58      	ldr	r2, [pc, #352]	; (8001b90 <HAL_RCC_OscConfig+0x2a0>)
 8001a2e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a30:	4b58      	ldr	r3, [pc, #352]	; (8001b94 <HAL_RCC_OscConfig+0x2a4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fefb 	bl	8000830 <HAL_InitTick>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d052      	beq.n	8001aea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	e331      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d032      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a50:	4b4d      	ldr	r3, [pc, #308]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a4c      	ldr	r2, [pc, #304]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a5c:	f7fe ff38 	bl	80008d0 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a64:	f7fe ff34 	bl	80008d0 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e31a      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a76:	4b44      	ldr	r3, [pc, #272]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a82:	4b41      	ldr	r3, [pc, #260]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a40      	ldr	r2, [pc, #256]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001a88:	f043 0308 	orr.w	r3, r3, #8
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	493b      	ldr	r1, [pc, #236]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aa0:	4b39      	ldr	r3, [pc, #228]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	4936      	ldr	r1, [pc, #216]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
 8001ab4:	e01a      	b.n	8001aec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ab6:	4b34      	ldr	r3, [pc, #208]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a33      	ldr	r2, [pc, #204]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ac2:	f7fe ff05 	bl	80008d0 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aca:	f7fe ff01 	bl	80008d0 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e2e7      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001adc:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f0      	bne.n	8001aca <HAL_RCC_OscConfig+0x1da>
 8001ae8:	e000      	b.n	8001aec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d074      	beq.n	8001be2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d005      	beq.n	8001b0a <HAL_RCC_OscConfig+0x21a>
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	2b0c      	cmp	r3, #12
 8001b02:	d10e      	bne.n	8001b22 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d10b      	bne.n	8001b22 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d064      	beq.n	8001be0 <HAL_RCC_OscConfig+0x2f0>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d160      	bne.n	8001be0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e2c4      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x24a>
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a15      	ldr	r2, [pc, #84]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	e01d      	b.n	8001b76 <HAL_RCC_OscConfig+0x286>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b42:	d10c      	bne.n	8001b5e <HAL_RCC_OscConfig+0x26e>
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001b4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0c      	ldr	r2, [pc, #48]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	e00b      	b.n	8001b76 <HAL_RCC_OscConfig+0x286>
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a09      	ldr	r2, [pc, #36]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <HAL_RCC_OscConfig+0x298>)
 8001b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d01c      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7fe fea7 	bl	80008d0 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b84:	e011      	b.n	8001baa <HAL_RCC_OscConfig+0x2ba>
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	08002f90 	.word	0x08002f90
 8001b90:	20000080 	.word	0x20000080
 8001b94:	20000084 	.word	0x20000084
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b98:	f7fe fe9a 	bl	80008d0 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	; 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e280      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001baa:	4baf      	ldr	r3, [pc, #700]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x2a8>
 8001bb6:	e014      	b.n	8001be2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb8:	f7fe fe8a 	bl	80008d0 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7fe fe86 	bl	80008d0 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e26c      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bd2:	4ba5      	ldr	r3, [pc, #660]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x2d0>
 8001bde:	e000      	b.n	8001be2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d060      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d005      	beq.n	8001c00 <HAL_RCC_OscConfig+0x310>
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	2b0c      	cmp	r3, #12
 8001bf8:	d119      	bne.n	8001c2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d116      	bne.n	8001c2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c00:	4b99      	ldr	r3, [pc, #612]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_RCC_OscConfig+0x328>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e249      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c18:	4b93      	ldr	r3, [pc, #588]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	061b      	lsls	r3, r3, #24
 8001c26:	4990      	ldr	r1, [pc, #576]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c2c:	e040      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d023      	beq.n	8001c7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c36:	4b8c      	ldr	r3, [pc, #560]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a8b      	ldr	r2, [pc, #556]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7fe fe45 	bl	80008d0 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4a:	f7fe fe41 	bl	80008d0 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e227      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c5c:	4b82      	ldr	r3, [pc, #520]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c68:	4b7f      	ldr	r3, [pc, #508]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	061b      	lsls	r3, r3, #24
 8001c76:	497c      	ldr	r1, [pc, #496]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
 8001c7c:	e018      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7e:	4b7a      	ldr	r3, [pc, #488]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a79      	ldr	r2, [pc, #484]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8a:	f7fe fe21 	bl	80008d0 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c92:	f7fe fe1d 	bl	80008d0 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e203      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ca4:	4b70      	ldr	r3, [pc, #448]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f0      	bne.n	8001c92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d03c      	beq.n	8001d36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d01c      	beq.n	8001cfe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc4:	4b68      	ldr	r3, [pc, #416]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cca:	4a67      	ldr	r2, [pc, #412]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7fe fdfc 	bl	80008d0 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7fe fdf8 	bl	80008d0 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1de      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cee:	4b5e      	ldr	r3, [pc, #376]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0ef      	beq.n	8001cdc <HAL_RCC_OscConfig+0x3ec>
 8001cfc:	e01b      	b.n	8001d36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfe:	4b5a      	ldr	r3, [pc, #360]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d04:	4a58      	ldr	r2, [pc, #352]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001d06:	f023 0301 	bic.w	r3, r3, #1
 8001d0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0e:	f7fe fddf 	bl	80008d0 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d16:	f7fe fddb 	bl	80008d0 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e1c1      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d28:	4b4f      	ldr	r3, [pc, #316]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1ef      	bne.n	8001d16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 80a6 	beq.w	8001e90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d44:	2300      	movs	r3, #0
 8001d46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d48:	4b47      	ldr	r3, [pc, #284]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10d      	bne.n	8001d70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d54:	4b44      	ldr	r3, [pc, #272]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d58:	4a43      	ldr	r2, [pc, #268]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d60:	4b41      	ldr	r3, [pc, #260]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d70:	4b3e      	ldr	r3, [pc, #248]	; (8001e6c <HAL_RCC_OscConfig+0x57c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d118      	bne.n	8001dae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d7c:	4b3b      	ldr	r3, [pc, #236]	; (8001e6c <HAL_RCC_OscConfig+0x57c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a3a      	ldr	r2, [pc, #232]	; (8001e6c <HAL_RCC_OscConfig+0x57c>)
 8001d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d88:	f7fe fda2 	bl	80008d0 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d90:	f7fe fd9e 	bl	80008d0 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e184      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da2:	4b32      	ldr	r3, [pc, #200]	; (8001e6c <HAL_RCC_OscConfig+0x57c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d108      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x4d8>
 8001db6:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbc:	4a2a      	ldr	r2, [pc, #168]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dc6:	e024      	b.n	8001e12 <HAL_RCC_OscConfig+0x522>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d110      	bne.n	8001df2 <HAL_RCC_OscConfig+0x502>
 8001dd0:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd6:	4a24      	ldr	r2, [pc, #144]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001de0:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de6:	4a20      	ldr	r2, [pc, #128]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001df0:	e00f      	b.n	8001e12 <HAL_RCC_OscConfig+0x522>
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df8:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001dfa:	f023 0301 	bic.w	r3, r3, #1
 8001dfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e08:	4a17      	ldr	r2, [pc, #92]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001e0a:	f023 0304 	bic.w	r3, r3, #4
 8001e0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d016      	beq.n	8001e48 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1a:	f7fe fd59 	bl	80008d0 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7fe fd55 	bl	80008d0 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e139      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_RCC_OscConfig+0x578>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0ed      	beq.n	8001e22 <HAL_RCC_OscConfig+0x532>
 8001e46:	e01a      	b.n	8001e7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e48:	f7fe fd42 	bl	80008d0 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e4e:	e00f      	b.n	8001e70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e50:	f7fe fd3e 	bl	80008d0 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d906      	bls.n	8001e70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e122      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e70:	4b90      	ldr	r3, [pc, #576]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8001e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1e8      	bne.n	8001e50 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e7e:	7ffb      	ldrb	r3, [r7, #31]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d105      	bne.n	8001e90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e84:	4b8b      	ldr	r3, [pc, #556]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e88:	4a8a      	ldr	r2, [pc, #552]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8001e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 8108 	beq.w	80020aa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	f040 80d0 	bne.w	8002044 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ea4:	4b83      	ldr	r3, [pc, #524]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d130      	bne.n	8001f1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d127      	bne.n	8001f1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d11f      	bne.n	8001f1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ee4:	2a07      	cmp	r2, #7
 8001ee6:	bf14      	ite	ne
 8001ee8:	2201      	movne	r2, #1
 8001eea:	2200      	moveq	r2, #0
 8001eec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d113      	bne.n	8001f1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efc:	085b      	lsrs	r3, r3, #1
 8001efe:	3b01      	subs	r3, #1
 8001f00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d109      	bne.n	8001f1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	085b      	lsrs	r3, r3, #1
 8001f12:	3b01      	subs	r3, #1
 8001f14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d06e      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	2b0c      	cmp	r3, #12
 8001f1e:	d069      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f20:	4b64      	ldr	r3, [pc, #400]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d105      	bne.n	8001f38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f2c:	4b61      	ldr	r3, [pc, #388]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0b7      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f3c:	4b5d      	ldr	r3, [pc, #372]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a5c      	ldr	r2, [pc, #368]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8001f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f48:	f7fe fcc2 	bl	80008d0 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f50:	f7fe fcbe 	bl	80008d0 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e0a4      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f62:	4b54      	ldr	r3, [pc, #336]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f6e:	4b51      	ldr	r3, [pc, #324]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	4b51      	ldr	r3, [pc, #324]	; (80020b8 <HAL_RCC_OscConfig+0x7c8>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f7e:	3a01      	subs	r2, #1
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	4311      	orrs	r1, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f88:	0212      	lsls	r2, r2, #8
 8001f8a:	4311      	orrs	r1, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f90:	0852      	lsrs	r2, r2, #1
 8001f92:	3a01      	subs	r2, #1
 8001f94:	0552      	lsls	r2, r2, #21
 8001f96:	4311      	orrs	r1, r2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f9c:	0852      	lsrs	r2, r2, #1
 8001f9e:	3a01      	subs	r2, #1
 8001fa0:	0652      	lsls	r2, r2, #25
 8001fa2:	4311      	orrs	r1, r2
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fa8:	0912      	lsrs	r2, r2, #4
 8001faa:	0452      	lsls	r2, r2, #17
 8001fac:	430a      	orrs	r2, r1
 8001fae:	4941      	ldr	r1, [pc, #260]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fb4:	4b3f      	ldr	r3, [pc, #252]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a3e      	ldr	r2, [pc, #248]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8001fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fc0:	4b3c      	ldr	r3, [pc, #240]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4a3b      	ldr	r2, [pc, #236]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8001fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fcc:	f7fe fc80 	bl	80008d0 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7fe fc7c 	bl	80008d0 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e062      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe6:	4b33      	ldr	r3, [pc, #204]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ff2:	e05a      	b.n	80020aa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e059      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff8:	4b2e      	ldr	r3, [pc, #184]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d152      	bne.n	80020aa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002004:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a2a      	ldr	r2, [pc, #168]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 800200a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800200e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002010:	4b28      	ldr	r3, [pc, #160]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4a27      	ldr	r2, [pc, #156]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8002016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800201a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800201c:	f7fe fc58 	bl	80008d0 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002024:	f7fe fc54 	bl	80008d0 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e03a      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002036:	4b1f      	ldr	r3, [pc, #124]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x734>
 8002042:	e032      	b.n	80020aa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2b0c      	cmp	r3, #12
 8002048:	d02d      	beq.n	80020a6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204a:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a19      	ldr	r2, [pc, #100]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8002050:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002054:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002056:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d105      	bne.n	800206e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002062:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	4a13      	ldr	r2, [pc, #76]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8002068:	f023 0303 	bic.w	r3, r3, #3
 800206c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	4a10      	ldr	r2, [pc, #64]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 8002074:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7fe fc27 	bl	80008d0 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002086:	f7fe fc23 	bl	80008d0 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e009      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_RCC_OscConfig+0x7c4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f0      	bne.n	8002086 <HAL_RCC_OscConfig+0x796>
 80020a4:	e001      	b.n	80020aa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3720      	adds	r7, #32
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000
 80020b8:	f99d808c 	.word	0xf99d808c

080020bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0c8      	b.n	8002262 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4b66      	ldr	r3, [pc, #408]	; (800226c <HAL_RCC_ClockConfig+0x1b0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d910      	bls.n	8002100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b63      	ldr	r3, [pc, #396]	; (800226c <HAL_RCC_ClockConfig+0x1b0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 0207 	bic.w	r2, r3, #7
 80020e6:	4961      	ldr	r1, [pc, #388]	; (800226c <HAL_RCC_ClockConfig+0x1b0>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b5f      	ldr	r3, [pc, #380]	; (800226c <HAL_RCC_ClockConfig+0x1b0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0b0      	b.n	8002262 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d04c      	beq.n	80021a6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d107      	bne.n	8002124 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002114:	4b56      	ldr	r3, [pc, #344]	; (8002270 <HAL_RCC_ClockConfig+0x1b4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d121      	bne.n	8002164 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e09e      	b.n	8002262 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d107      	bne.n	800213c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800212c:	4b50      	ldr	r3, [pc, #320]	; (8002270 <HAL_RCC_ClockConfig+0x1b4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d115      	bne.n	8002164 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e092      	b.n	8002262 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d107      	bne.n	8002154 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002144:	4b4a      	ldr	r3, [pc, #296]	; (8002270 <HAL_RCC_ClockConfig+0x1b4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e086      	b.n	8002262 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002154:	4b46      	ldr	r3, [pc, #280]	; (8002270 <HAL_RCC_ClockConfig+0x1b4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e07e      	b.n	8002262 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002164:	4b42      	ldr	r3, [pc, #264]	; (8002270 <HAL_RCC_ClockConfig+0x1b4>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f023 0203 	bic.w	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	493f      	ldr	r1, [pc, #252]	; (8002270 <HAL_RCC_ClockConfig+0x1b4>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002176:	f7fe fbab 	bl	80008d0 <HAL_GetTick>
 800217a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217c:	e00a      	b.n	8002194 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217e:	f7fe fba7 	bl	80008d0 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e066      	b.n	8002262 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002194:	4b36      	ldr	r3, [pc, #216]	; (8002270 <HAL_RCC_ClockConfig+0x1b4>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 020c 	and.w	r2, r3, #12
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d1eb      	bne.n	800217e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d008      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b2:	4b2f      	ldr	r3, [pc, #188]	; (8002270 <HAL_RCC_ClockConfig+0x1b4>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	492c      	ldr	r1, [pc, #176]	; (8002270 <HAL_RCC_ClockConfig+0x1b4>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c4:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_RCC_ClockConfig+0x1b0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d210      	bcs.n	80021f4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	4b26      	ldr	r3, [pc, #152]	; (800226c <HAL_RCC_ClockConfig+0x1b0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 0207 	bic.w	r2, r3, #7
 80021da:	4924      	ldr	r1, [pc, #144]	; (800226c <HAL_RCC_ClockConfig+0x1b0>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b22      	ldr	r3, [pc, #136]	; (800226c <HAL_RCC_ClockConfig+0x1b0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e036      	b.n	8002262 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_RCC_ClockConfig+0x1b4>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	4918      	ldr	r1, [pc, #96]	; (8002270 <HAL_RCC_ClockConfig+0x1b4>)
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d009      	beq.n	8002232 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800221e:	4b14      	ldr	r3, [pc, #80]	; (8002270 <HAL_RCC_ClockConfig+0x1b4>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4910      	ldr	r1, [pc, #64]	; (8002270 <HAL_RCC_ClockConfig+0x1b4>)
 800222e:	4313      	orrs	r3, r2
 8002230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002232:	f000 f825 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 8002236:	4602      	mov	r2, r0
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <HAL_RCC_ClockConfig+0x1b4>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	490c      	ldr	r1, [pc, #48]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	5ccb      	ldrb	r3, [r1, r3]
 8002246:	f003 031f 	and.w	r3, r3, #31
 800224a:	fa22 f303 	lsr.w	r3, r2, r3
 800224e:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe faea 	bl	8000830 <HAL_InitTick>
 800225c:	4603      	mov	r3, r0
 800225e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002260:	7afb      	ldrb	r3, [r7, #11]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40022000 	.word	0x40022000
 8002270:	40021000 	.word	0x40021000
 8002274:	08002f90 	.word	0x08002f90
 8002278:	20000080 	.word	0x20000080
 800227c:	20000084 	.word	0x20000084

08002280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228e:	4b3e      	ldr	r3, [pc, #248]	; (8002388 <HAL_RCC_GetSysClockFreq+0x108>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002298:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <HAL_RCC_GetSysClockFreq+0x108>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x34>
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	2b0c      	cmp	r3, #12
 80022ac:	d121      	bne.n	80022f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d11e      	bne.n	80022f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022b4:	4b34      	ldr	r3, [pc, #208]	; (8002388 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d107      	bne.n	80022d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022c0:	4b31      	ldr	r3, [pc, #196]	; (8002388 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c6:	0a1b      	lsrs	r3, r3, #8
 80022c8:	f003 030f 	and.w	r3, r3, #15
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	e005      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022d0:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022dc:	4a2b      	ldr	r2, [pc, #172]	; (800238c <HAL_RCC_GetSysClockFreq+0x10c>)
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10d      	bne.n	8002308 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d102      	bne.n	80022fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022f8:	4b25      	ldr	r3, [pc, #148]	; (8002390 <HAL_RCC_GetSysClockFreq+0x110>)
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	e004      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b08      	cmp	r3, #8
 8002302:	d101      	bne.n	8002308 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002304:	4b23      	ldr	r3, [pc, #140]	; (8002394 <HAL_RCC_GetSysClockFreq+0x114>)
 8002306:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	2b0c      	cmp	r3, #12
 800230c:	d134      	bne.n	8002378 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800230e:	4b1e      	ldr	r3, [pc, #120]	; (8002388 <HAL_RCC_GetSysClockFreq+0x108>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d003      	beq.n	8002326 <HAL_RCC_GetSysClockFreq+0xa6>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d003      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0xac>
 8002324:	e005      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002326:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <HAL_RCC_GetSysClockFreq+0x110>)
 8002328:	617b      	str	r3, [r7, #20]
      break;
 800232a:	e005      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_RCC_GetSysClockFreq+0x114>)
 800232e:	617b      	str	r3, [r7, #20]
      break;
 8002330:	e002      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	617b      	str	r3, [r7, #20]
      break;
 8002336:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b13      	ldr	r3, [pc, #76]	; (8002388 <HAL_RCC_GetSysClockFreq+0x108>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	3301      	adds	r3, #1
 8002344:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002346:	4b10      	ldr	r3, [pc, #64]	; (8002388 <HAL_RCC_GetSysClockFreq+0x108>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	fb02 f203 	mul.w	r2, r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	fbb2 f3f3 	udiv	r3, r2, r3
 800235c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <HAL_RCC_GetSysClockFreq+0x108>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	0e5b      	lsrs	r3, r3, #25
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	3301      	adds	r3, #1
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	fbb2 f3f3 	udiv	r3, r2, r3
 8002376:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002378:	69bb      	ldr	r3, [r7, #24]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3724      	adds	r7, #36	; 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000
 800238c:	08002fa0 	.word	0x08002fa0
 8002390:	00f42400 	.word	0x00f42400
 8002394:	007a1200 	.word	0x007a1200

08002398 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023a4:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023b0:	f7ff fa3a 	bl	8001828 <HAL_PWREx_GetVoltageRange>
 80023b4:	6178      	str	r0, [r7, #20]
 80023b6:	e014      	b.n	80023e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023b8:	4b25      	ldr	r3, [pc, #148]	; (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	4a24      	ldr	r2, [pc, #144]	; (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c2:	6593      	str	r3, [r2, #88]	; 0x58
 80023c4:	4b22      	ldr	r3, [pc, #136]	; (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023d0:	f7ff fa2a 	bl	8001828 <HAL_PWREx_GetVoltageRange>
 80023d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e8:	d10b      	bne.n	8002402 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b80      	cmp	r3, #128	; 0x80
 80023ee:	d919      	bls.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2ba0      	cmp	r3, #160	; 0xa0
 80023f4:	d902      	bls.n	80023fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023f6:	2302      	movs	r3, #2
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	e013      	b.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023fc:	2301      	movs	r3, #1
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	e010      	b.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b80      	cmp	r3, #128	; 0x80
 8002406:	d902      	bls.n	800240e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002408:	2303      	movs	r3, #3
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	e00a      	b.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b80      	cmp	r3, #128	; 0x80
 8002412:	d102      	bne.n	800241a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002414:	2302      	movs	r3, #2
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	e004      	b.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b70      	cmp	r3, #112	; 0x70
 800241e:	d101      	bne.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002420:	2301      	movs	r3, #1
 8002422:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f023 0207 	bic.w	r2, r3, #7
 800242c:	4909      	ldr	r1, [pc, #36]	; (8002454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002434:	4b07      	ldr	r3, [pc, #28]	; (8002454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	429a      	cmp	r2, r3
 8002440:	d001      	beq.n	8002446 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	40022000 	.word	0x40022000

08002458 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e049      	b.n	80024fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d106      	bne.n	8002484 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe f8e6 	bl	8000650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3304      	adds	r3, #4
 8002494:	4619      	mov	r1, r3
 8002496:	4610      	mov	r0, r2
 8002498:	f000 fa62 	bl	8002960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b01      	cmp	r3, #1
 800251a:	d001      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e04f      	b.n	80025c0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2202      	movs	r2, #2
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a23      	ldr	r2, [pc, #140]	; (80025cc <HAL_TIM_Base_Start_IT+0xc4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d01d      	beq.n	800257e <HAL_TIM_Base_Start_IT+0x76>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254a:	d018      	beq.n	800257e <HAL_TIM_Base_Start_IT+0x76>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1f      	ldr	r2, [pc, #124]	; (80025d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d013      	beq.n	800257e <HAL_TIM_Base_Start_IT+0x76>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1e      	ldr	r2, [pc, #120]	; (80025d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d00e      	beq.n	800257e <HAL_TIM_Base_Start_IT+0x76>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d009      	beq.n	800257e <HAL_TIM_Base_Start_IT+0x76>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1b      	ldr	r2, [pc, #108]	; (80025dc <HAL_TIM_Base_Start_IT+0xd4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d004      	beq.n	800257e <HAL_TIM_Base_Start_IT+0x76>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d115      	bne.n	80025aa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002586:	4013      	ands	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b06      	cmp	r3, #6
 800258e:	d015      	beq.n	80025bc <HAL_TIM_Base_Start_IT+0xb4>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002596:	d011      	beq.n	80025bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a8:	e008      	b.n	80025bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0201 	orr.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e000      	b.n	80025be <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	40012c00 	.word	0x40012c00
 80025d0:	40000400 	.word	0x40000400
 80025d4:	40000800 	.word	0x40000800
 80025d8:	40000c00 	.word	0x40000c00
 80025dc:	40013400 	.word	0x40013400
 80025e0:	40014000 	.word	0x40014000
 80025e4:	00010007 	.word	0x00010007

080025e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e049      	b.n	800268e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d106      	bne.n	8002614 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f841 	bl	8002696 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3304      	adds	r3, #4
 8002624:	4619      	mov	r1, r3
 8002626:	4610      	mov	r0, r2
 8002628:	f000 f99a 	bl	8002960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_TIM_IC_ConfigChannel+0x1a>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e082      	b.n	80027ca <HAL_TIM_IC_ConfigChannel+0x120>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d11b      	bne.n	800270a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	6819      	ldr	r1, [r3, #0]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f000 f9d7 	bl	8002a94 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699a      	ldr	r2, [r3, #24]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 020c 	bic.w	r2, r2, #12
 80026f4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6999      	ldr	r1, [r3, #24]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	619a      	str	r2, [r3, #24]
 8002708:	e05a      	b.n	80027c0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b04      	cmp	r3, #4
 800270e:	d11c      	bne.n	800274a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	6819      	ldr	r1, [r3, #0]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f000 fa55 	bl	8002bce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699a      	ldr	r2, [r3, #24]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002732:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6999      	ldr	r1, [r3, #24]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	021a      	lsls	r2, r3, #8
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	619a      	str	r2, [r3, #24]
 8002748:	e03a      	b.n	80027c0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b08      	cmp	r3, #8
 800274e:	d11b      	bne.n	8002788 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	6819      	ldr	r1, [r3, #0]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f000 faa2 	bl	8002ca8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	69da      	ldr	r2, [r3, #28]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 020c 	bic.w	r2, r2, #12
 8002772:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69d9      	ldr	r1, [r3, #28]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	61da      	str	r2, [r3, #28]
 8002786:	e01b      	b.n	80027c0 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	6819      	ldr	r1, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f000 fac2 	bl	8002d20 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80027aa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	69d9      	ldr	r1, [r3, #28]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	021a      	lsls	r2, r3, #8
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_TIM_ConfigClockSource+0x18>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e0b5      	b.n	8002956 <HAL_TIM_ConfigClockSource+0x184>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2202      	movs	r2, #2
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002808:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800280c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002814:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002826:	d03e      	beq.n	80028a6 <HAL_TIM_ConfigClockSource+0xd4>
 8002828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282c:	f200 8087 	bhi.w	800293e <HAL_TIM_ConfigClockSource+0x16c>
 8002830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002834:	f000 8085 	beq.w	8002942 <HAL_TIM_ConfigClockSource+0x170>
 8002838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283c:	d87f      	bhi.n	800293e <HAL_TIM_ConfigClockSource+0x16c>
 800283e:	2b70      	cmp	r3, #112	; 0x70
 8002840:	d01a      	beq.n	8002878 <HAL_TIM_ConfigClockSource+0xa6>
 8002842:	2b70      	cmp	r3, #112	; 0x70
 8002844:	d87b      	bhi.n	800293e <HAL_TIM_ConfigClockSource+0x16c>
 8002846:	2b60      	cmp	r3, #96	; 0x60
 8002848:	d050      	beq.n	80028ec <HAL_TIM_ConfigClockSource+0x11a>
 800284a:	2b60      	cmp	r3, #96	; 0x60
 800284c:	d877      	bhi.n	800293e <HAL_TIM_ConfigClockSource+0x16c>
 800284e:	2b50      	cmp	r3, #80	; 0x50
 8002850:	d03c      	beq.n	80028cc <HAL_TIM_ConfigClockSource+0xfa>
 8002852:	2b50      	cmp	r3, #80	; 0x50
 8002854:	d873      	bhi.n	800293e <HAL_TIM_ConfigClockSource+0x16c>
 8002856:	2b40      	cmp	r3, #64	; 0x40
 8002858:	d058      	beq.n	800290c <HAL_TIM_ConfigClockSource+0x13a>
 800285a:	2b40      	cmp	r3, #64	; 0x40
 800285c:	d86f      	bhi.n	800293e <HAL_TIM_ConfigClockSource+0x16c>
 800285e:	2b30      	cmp	r3, #48	; 0x30
 8002860:	d064      	beq.n	800292c <HAL_TIM_ConfigClockSource+0x15a>
 8002862:	2b30      	cmp	r3, #48	; 0x30
 8002864:	d86b      	bhi.n	800293e <HAL_TIM_ConfigClockSource+0x16c>
 8002866:	2b20      	cmp	r3, #32
 8002868:	d060      	beq.n	800292c <HAL_TIM_ConfigClockSource+0x15a>
 800286a:	2b20      	cmp	r3, #32
 800286c:	d867      	bhi.n	800293e <HAL_TIM_ConfigClockSource+0x16c>
 800286e:	2b00      	cmp	r3, #0
 8002870:	d05c      	beq.n	800292c <HAL_TIM_ConfigClockSource+0x15a>
 8002872:	2b10      	cmp	r3, #16
 8002874:	d05a      	beq.n	800292c <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002876:	e062      	b.n	800293e <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	6899      	ldr	r1, [r3, #8]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f000 faa2 	bl	8002dd0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800289a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	609a      	str	r2, [r3, #8]
      break;
 80028a4:	e04e      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6899      	ldr	r1, [r3, #8]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f000 fa8b 	bl	8002dd0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c8:	609a      	str	r2, [r3, #8]
      break;
 80028ca:	e03b      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	461a      	mov	r2, r3
 80028da:	f000 f949 	bl	8002b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2150      	movs	r1, #80	; 0x50
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fa58 	bl	8002d9a <TIM_ITRx_SetConfig>
      break;
 80028ea:	e02b      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	461a      	mov	r2, r3
 80028fa:	f000 f9a5 	bl	8002c48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2160      	movs	r1, #96	; 0x60
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fa48 	bl	8002d9a <TIM_ITRx_SetConfig>
      break;
 800290a:	e01b      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6859      	ldr	r1, [r3, #4]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	461a      	mov	r2, r3
 800291a:	f000 f929 	bl	8002b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2140      	movs	r1, #64	; 0x40
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fa38 	bl	8002d9a <TIM_ITRx_SetConfig>
      break;
 800292a:	e00b      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f000 fa2f 	bl	8002d9a <TIM_ITRx_SetConfig>
        break;
 800293c:	e002      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800293e:	bf00      	nop
 8002940:	e000      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a40      	ldr	r2, [pc, #256]	; (8002a74 <TIM_Base_SetConfig+0x114>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d013      	beq.n	80029a0 <TIM_Base_SetConfig+0x40>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297e:	d00f      	beq.n	80029a0 <TIM_Base_SetConfig+0x40>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a3d      	ldr	r2, [pc, #244]	; (8002a78 <TIM_Base_SetConfig+0x118>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d00b      	beq.n	80029a0 <TIM_Base_SetConfig+0x40>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a3c      	ldr	r2, [pc, #240]	; (8002a7c <TIM_Base_SetConfig+0x11c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d007      	beq.n	80029a0 <TIM_Base_SetConfig+0x40>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a3b      	ldr	r2, [pc, #236]	; (8002a80 <TIM_Base_SetConfig+0x120>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d003      	beq.n	80029a0 <TIM_Base_SetConfig+0x40>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a3a      	ldr	r2, [pc, #232]	; (8002a84 <TIM_Base_SetConfig+0x124>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d108      	bne.n	80029b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a2f      	ldr	r2, [pc, #188]	; (8002a74 <TIM_Base_SetConfig+0x114>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d01f      	beq.n	80029fa <TIM_Base_SetConfig+0x9a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c0:	d01b      	beq.n	80029fa <TIM_Base_SetConfig+0x9a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a2c      	ldr	r2, [pc, #176]	; (8002a78 <TIM_Base_SetConfig+0x118>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d017      	beq.n	80029fa <TIM_Base_SetConfig+0x9a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a2b      	ldr	r2, [pc, #172]	; (8002a7c <TIM_Base_SetConfig+0x11c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d013      	beq.n	80029fa <TIM_Base_SetConfig+0x9a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a2a      	ldr	r2, [pc, #168]	; (8002a80 <TIM_Base_SetConfig+0x120>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00f      	beq.n	80029fa <TIM_Base_SetConfig+0x9a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a29      	ldr	r2, [pc, #164]	; (8002a84 <TIM_Base_SetConfig+0x124>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d00b      	beq.n	80029fa <TIM_Base_SetConfig+0x9a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a28      	ldr	r2, [pc, #160]	; (8002a88 <TIM_Base_SetConfig+0x128>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d007      	beq.n	80029fa <TIM_Base_SetConfig+0x9a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a27      	ldr	r2, [pc, #156]	; (8002a8c <TIM_Base_SetConfig+0x12c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d003      	beq.n	80029fa <TIM_Base_SetConfig+0x9a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a26      	ldr	r2, [pc, #152]	; (8002a90 <TIM_Base_SetConfig+0x130>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d108      	bne.n	8002a0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a10      	ldr	r2, [pc, #64]	; (8002a74 <TIM_Base_SetConfig+0x114>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00f      	beq.n	8002a58 <TIM_Base_SetConfig+0xf8>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a12      	ldr	r2, [pc, #72]	; (8002a84 <TIM_Base_SetConfig+0x124>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00b      	beq.n	8002a58 <TIM_Base_SetConfig+0xf8>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a11      	ldr	r2, [pc, #68]	; (8002a88 <TIM_Base_SetConfig+0x128>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d007      	beq.n	8002a58 <TIM_Base_SetConfig+0xf8>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a10      	ldr	r2, [pc, #64]	; (8002a8c <TIM_Base_SetConfig+0x12c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d003      	beq.n	8002a58 <TIM_Base_SetConfig+0xf8>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a0f      	ldr	r2, [pc, #60]	; (8002a90 <TIM_Base_SetConfig+0x130>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d103      	bne.n	8002a60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	615a      	str	r2, [r3, #20]
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40012c00 	.word	0x40012c00
 8002a78:	40000400 	.word	0x40000400
 8002a7c:	40000800 	.word	0x40000800
 8002a80:	40000c00 	.word	0x40000c00
 8002a84:	40013400 	.word	0x40013400
 8002a88:	40014000 	.word	0x40014000
 8002a8c:	40014400 	.word	0x40014400
 8002a90:	40014800 	.word	0x40014800

08002a94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	f023 0201 	bic.w	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4a26      	ldr	r2, [pc, #152]	; (8002b58 <TIM_TI1_SetConfig+0xc4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d017      	beq.n	8002af2 <TIM_TI1_SetConfig+0x5e>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac8:	d013      	beq.n	8002af2 <TIM_TI1_SetConfig+0x5e>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4a23      	ldr	r2, [pc, #140]	; (8002b5c <TIM_TI1_SetConfig+0xc8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00f      	beq.n	8002af2 <TIM_TI1_SetConfig+0x5e>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4a22      	ldr	r2, [pc, #136]	; (8002b60 <TIM_TI1_SetConfig+0xcc>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00b      	beq.n	8002af2 <TIM_TI1_SetConfig+0x5e>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4a21      	ldr	r2, [pc, #132]	; (8002b64 <TIM_TI1_SetConfig+0xd0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d007      	beq.n	8002af2 <TIM_TI1_SetConfig+0x5e>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4a20      	ldr	r2, [pc, #128]	; (8002b68 <TIM_TI1_SetConfig+0xd4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d003      	beq.n	8002af2 <TIM_TI1_SetConfig+0x5e>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4a1f      	ldr	r2, [pc, #124]	; (8002b6c <TIM_TI1_SetConfig+0xd8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d101      	bne.n	8002af6 <TIM_TI1_SetConfig+0x62>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <TIM_TI1_SetConfig+0x64>
 8002af6:	2300      	movs	r3, #0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f023 0303 	bic.w	r3, r3, #3
 8002b02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	e003      	b.n	8002b16 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f023 030a 	bic.w	r3, r3, #10
 8002b30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f003 030a 	and.w	r3, r3, #10
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	621a      	str	r2, [r3, #32]
}
 8002b4a:	bf00      	nop
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40000800 	.word	0x40000800
 8002b64:	40000c00 	.word	0x40000c00
 8002b68:	40013400 	.word	0x40013400
 8002b6c:	40014000 	.word	0x40014000

08002b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	f023 0201 	bic.w	r2, r3, #1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f023 030a 	bic.w	r3, r3, #10
 8002bac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	621a      	str	r2, [r3, #32]
}
 8002bc2:	bf00      	nop
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b087      	sub	sp, #28
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f023 0210 	bic.w	r2, r3, #16
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bfa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	021b      	lsls	r3, r3, #8
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	031b      	lsls	r3, r3, #12
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c20:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	621a      	str	r2, [r3, #32]
}
 8002c3c:	bf00      	nop
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f023 0210 	bic.w	r2, r3, #16
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	031b      	lsls	r3, r3, #12
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	621a      	str	r2, [r3, #32]
}
 8002c9c:	bf00      	nop
 8002c9e:	371c      	adds	r7, #28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f023 0303 	bic.w	r3, r3, #3
 8002cd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ce4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002cf8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	621a      	str	r2, [r3, #32]
}
 8002d14:	bf00      	nop
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d5e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	031b      	lsls	r3, r3, #12
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002d72:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	031b      	lsls	r3, r3, #12
 8002d78:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	621a      	str	r2, [r3, #32]
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b085      	sub	sp, #20
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f043 0307 	orr.w	r3, r3, #7
 8002dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	609a      	str	r2, [r3, #8]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	021a      	lsls	r2, r3, #8
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	609a      	str	r2, [r3, #8]
}
 8002e04:	bf00      	nop
 8002e06:	371c      	adds	r7, #28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e068      	b.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a2e      	ldr	r2, [pc, #184]	; (8002f08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d004      	beq.n	8002e5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a2d      	ldr	r2, [pc, #180]	; (8002f0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d108      	bne.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1e      	ldr	r2, [pc, #120]	; (8002f08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d01d      	beq.n	8002ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9a:	d018      	beq.n	8002ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1b      	ldr	r2, [pc, #108]	; (8002f10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d013      	beq.n	8002ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1a      	ldr	r2, [pc, #104]	; (8002f14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00e      	beq.n	8002ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a18      	ldr	r2, [pc, #96]	; (8002f18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d009      	beq.n	8002ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a13      	ldr	r2, [pc, #76]	; (8002f0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d004      	beq.n	8002ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a14      	ldr	r2, [pc, #80]	; (8002f1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40012c00 	.word	0x40012c00
 8002f0c:	40013400 	.word	0x40013400
 8002f10:	40000400 	.word	0x40000400
 8002f14:	40000800 	.word	0x40000800
 8002f18:	40000c00 	.word	0x40000c00
 8002f1c:	40014000 	.word	0x40014000

08002f20 <__libc_init_array>:
 8002f20:	b570      	push	{r4, r5, r6, lr}
 8002f22:	4d0d      	ldr	r5, [pc, #52]	; (8002f58 <__libc_init_array+0x38>)
 8002f24:	4c0d      	ldr	r4, [pc, #52]	; (8002f5c <__libc_init_array+0x3c>)
 8002f26:	1b64      	subs	r4, r4, r5
 8002f28:	10a4      	asrs	r4, r4, #2
 8002f2a:	2600      	movs	r6, #0
 8002f2c:	42a6      	cmp	r6, r4
 8002f2e:	d109      	bne.n	8002f44 <__libc_init_array+0x24>
 8002f30:	4d0b      	ldr	r5, [pc, #44]	; (8002f60 <__libc_init_array+0x40>)
 8002f32:	4c0c      	ldr	r4, [pc, #48]	; (8002f64 <__libc_init_array+0x44>)
 8002f34:	f000 f820 	bl	8002f78 <_init>
 8002f38:	1b64      	subs	r4, r4, r5
 8002f3a:	10a4      	asrs	r4, r4, #2
 8002f3c:	2600      	movs	r6, #0
 8002f3e:	42a6      	cmp	r6, r4
 8002f40:	d105      	bne.n	8002f4e <__libc_init_array+0x2e>
 8002f42:	bd70      	pop	{r4, r5, r6, pc}
 8002f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f48:	4798      	blx	r3
 8002f4a:	3601      	adds	r6, #1
 8002f4c:	e7ee      	b.n	8002f2c <__libc_init_array+0xc>
 8002f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f52:	4798      	blx	r3
 8002f54:	3601      	adds	r6, #1
 8002f56:	e7f2      	b.n	8002f3e <__libc_init_array+0x1e>
 8002f58:	08002fd0 	.word	0x08002fd0
 8002f5c:	08002fd0 	.word	0x08002fd0
 8002f60:	08002fd0 	.word	0x08002fd0
 8002f64:	08002fd4 	.word	0x08002fd4

08002f68 <memset>:
 8002f68:	4402      	add	r2, r0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d100      	bne.n	8002f72 <memset+0xa>
 8002f70:	4770      	bx	lr
 8002f72:	f803 1b01 	strb.w	r1, [r3], #1
 8002f76:	e7f9      	b.n	8002f6c <memset+0x4>

08002f78 <_init>:
 8002f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7a:	bf00      	nop
 8002f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f7e:	bc08      	pop	{r3}
 8002f80:	469e      	mov	lr, r3
 8002f82:	4770      	bx	lr

08002f84 <_fini>:
 8002f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f86:	bf00      	nop
 8002f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8a:	bc08      	pop	{r3}
 8002f8c:	469e      	mov	lr, r3
 8002f8e:	4770      	bx	lr
