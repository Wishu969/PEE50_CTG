
PEE50_CTG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007440  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080075d0  080075d0  000175d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800766c  0800766c  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800766c  0800766c  0001766c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007674  08007674  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007674  08007674  00017674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007678  08007678  00017678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800767c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200000f0  0800776c  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  0800776c  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018678  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c4d  00000000  00000000  00038798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0003b3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  0003c820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b03  00000000  00000000  0003db40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015dea  00000000  00000000  00067643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109505  00000000  00000000  0007d42d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00186932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ba4  00000000  00000000  00186988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080075b8 	.word	0x080075b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	080075b8 	.word	0x080075b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <ctg_print>:

/* @brief	uart print function with newline
 * @param	huart: pointer to the uart handle
 * @param	buffer: pointer to a char or string */
void ctg_print(UART_HandleTypeDef *huart, char * buffer)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), 10);
 8000d5e:	6838      	ldr	r0, [r7, #0]
 8000d60:	f7ff fa36 	bl	80001d0 <strlen>
 8000d64:	4603      	mov	r3, r0
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	230a      	movs	r3, #10
 8000d6a:	6839      	ldr	r1, [r7, #0]
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f005 fb2b 	bl	80063c8 <HAL_UART_Transmit>
	/* print newline */
	char newline[2] = "\r\n";
 8000d72:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000d76:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t *)newline, 2, 10);
 8000d78:	f107 010c 	add.w	r1, r7, #12
 8000d7c:	230a      	movs	r3, #10
 8000d7e:	2202      	movs	r2, #2
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f005 fb21 	bl	80063c8 <HAL_UART_Transmit>
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <ctg_read_adc>:

void ctg_read_adc(ADC_HandleTypeDef *hadc, float *voltage)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
	  /* (re)start ADC sampling */
	  HAL_ADC_Start(hadc);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f001 faae 	bl	80022fc <HAL_ADC_Start>

	  /* poll 1ms for conversion */
	  HAL_ADC_PollForConversion(hadc, 1);
 8000da0:	2101      	movs	r1, #1
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f001 fb64 	bl	8002470 <HAL_ADC_PollForConversion>

	  /* read ADC value */
	  uint32_t sample = HAL_ADC_GetValue(hadc);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f001 fc39 	bl	8002620 <HAL_ADC_GetValue>
 8000dae:	60f8      	str	r0, [r7, #12]

	  /* convert to voltage */
	  *voltage = ((float)sample * (float)3.3);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	ee07 3a90 	vmov	s15, r3
 8000db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dba:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000de4 <ctg_read_adc+0x54>
 8000dbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	edc3 7a00 	vstr	s15, [r3]
	  /* divide voltage by 4096  */
	  *voltage = *voltage / 4096;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	ed93 7a00 	vldr	s14, [r3]
 8000dce:	eddf 6a06 	vldr	s13, [pc, #24]	; 8000de8 <ctg_read_adc+0x58>
 8000dd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	edc3 7a00 	vstr	s15, [r3]
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40533333 	.word	0x40533333
 8000de8:	45800000 	.word	0x45800000

08000dec <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */
/* Timer interrupt for heart rate and respitory rate */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a37      	ldr	r2, [pc, #220]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d102      	bne.n	8000e02 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		bHeart = true;
 8000dfc:	4b36      	ldr	r3, [pc, #216]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
	}
	/* read adc */
	ctg_read_adc(&hadc1,&voltage);
 8000e02:	4936      	ldr	r1, [pc, #216]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000e04:	4836      	ldr	r0, [pc, #216]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000e06:	f7ff ffc3 	bl	8000d90 <ctg_read_adc>

	/* heart beat detected */
	if(voltage > 3)
 8000e0a:	4b34      	ldr	r3, [pc, #208]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000e0c:	edd3 7a00 	vldr	s15, [r3]
 8000e10:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e1c:	dc00      	bgt.n	8000e20 <HAL_TIM_PeriodElapsedCallback+0x34>
				bpm = 0;
				bHeart = false;
			}
		}
	}
}
 8000e1e:	e055      	b.n	8000ecc <HAL_TIM_PeriodElapsedCallback+0xe0>
		new_time = HAL_GetTick();
 8000e20:	f000 ff02 	bl	8001c28 <HAL_GetTick>
 8000e24:	4603      	mov	r3, r0
 8000e26:	4a2f      	ldr	r2, [pc, #188]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000e28:	6013      	str	r3, [r2, #0]
		current_time = new_time - previous_time;
 8000e2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	4a2d      	ldr	r2, [pc, #180]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000e36:	6013      	str	r3, [r2, #0]
		if(current_time > 250)
 8000e38:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2bfa      	cmp	r3, #250	; 0xfa
 8000e3e:	d945      	bls.n	8000ecc <HAL_TIM_PeriodElapsedCallback+0xe0>
			previous_time = new_time;
 8000e40:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a28      	ldr	r2, [pc, #160]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000e46:	6013      	str	r3, [r2, #0]
			if(bHeart)
 8000e48:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d03d      	beq.n	8000ecc <HAL_TIM_PeriodElapsedCallback+0xe0>
				bpm = (1.0 / (current_time / 1000.0) ) * 60;
 8000e50:	4b26      	ldr	r3, [pc, #152]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fb55 	bl	8000504 <__aeabi_ui2d>
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e60:	f7ff fcf4 	bl	800084c <__aeabi_ddiv>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	f04f 0000 	mov.w	r0, #0
 8000e6c:	4921      	ldr	r1, [pc, #132]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e6e:	f7ff fced 	bl	800084c <__aeabi_ddiv>
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	4610      	mov	r0, r2
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000e80:	f7ff fbba 	bl	80005f8 <__aeabi_dmul>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f7ff fdc6 	bl	8000a1c <__aeabi_d2uiz>
 8000e90:	4603      	mov	r3, r0
 8000e92:	4a1a      	ldr	r2, [pc, #104]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000e94:	6013      	str	r3, [r2, #0]
				sprintf(array,"%lu",bpm);
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	4918      	ldr	r1, [pc, #96]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f005 ff49 	bl	8006d38 <siprintf>
				ctg_print(&huart2, array);
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4815      	ldr	r0, [pc, #84]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000eae:	f7ff ff51 	bl	8000d54 <ctg_print>
				strncpy(array,"",7);
 8000eb2:	f107 0308 	add.w	r3, r7, #8
 8000eb6:	2207      	movs	r2, #7
 8000eb8:	4913      	ldr	r1, [pc, #76]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f005 ff5c 	bl	8006d78 <strncpy>
				bpm = 0;
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
				bHeart = false;
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000130 	.word	0x20000130
 8000ed8:	20000120 	.word	0x20000120
 8000edc:	2000010c 	.word	0x2000010c
 8000ee0:	20000224 	.word	0x20000224
 8000ee4:	20000110 	.word	0x20000110
 8000ee8:	20000118 	.word	0x20000118
 8000eec:	20000114 	.word	0x20000114
 8000ef0:	408f4000 	.word	0x408f4000
 8000ef4:	3ff00000 	.word	0x3ff00000
 8000ef8:	404e0000 	.word	0x404e0000
 8000efc:	2000011c 	.word	0x2000011c
 8000f00:	080075d0 	.word	0x080075d0
 8000f04:	200002d4 	.word	0x200002d4
 8000f08:	080075d4 	.word	0x080075d4

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f12:	f000 fe19 	bl	8001b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f16:	f000 f835 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1a:	f000 fb07 	bl	800152c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f1e:	f000 fae7 	bl	80014f0 <MX_DMA_Init>
  MX_DAC1_Init();
 8000f22:	f000 f92d 	bl	8001180 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000f26:	f000 f95d 	bl	80011e4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000f2a:	f000 fab1 	bl	8001490 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f2e:	f000 f8b1 	bl	8001094 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f32:	f000 f9c7 	bl	80012c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f36:	f000 fa37 	bl	80013a8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* start dac with dma */
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sinewave32, 32, DAC_ALIGN_12B_R);
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2320      	movs	r3, #32
 8000f40:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <main+0x5c>)
 8000f42:	2100      	movs	r1, #0
 8000f44:	4809      	ldr	r0, [pc, #36]	; (8000f6c <main+0x60>)
 8000f46:	f002 f9d5 	bl	80032f4 <HAL_DAC_Start_DMA>

  /* start timer for dma */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f4a:	4809      	ldr	r0, [pc, #36]	; (8000f70 <main+0x64>)
 8000f4c:	f004 fb7e 	bl	800564c <HAL_TIM_Base_Start_IT>

  /* start timer with interrupt */
  HAL_TIM_Base_Start_IT(&htim3);
 8000f50:	4808      	ldr	r0, [pc, #32]	; (8000f74 <main+0x68>)
 8000f52:	f004 fb7b 	bl	800564c <HAL_TIM_Base_Start_IT>

  /* start timer for uart sending*/
  HAL_TIM_Base_Start_IT(&htim4);
 8000f56:	4808      	ldr	r0, [pc, #32]	; (8000f78 <main+0x6c>)
 8000f58:	f004 fb78 	bl	800564c <HAL_TIM_Base_Start_IT>

  /* test print */
  ctg_print(&huart2, "PEE50 cardiotacograph");
 8000f5c:	4907      	ldr	r1, [pc, #28]	; (8000f7c <main+0x70>)
 8000f5e:	4808      	ldr	r0, [pc, #32]	; (8000f80 <main+0x74>)
 8000f60:	f7ff fef8 	bl	8000d54 <ctg_print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <main+0x58>
 8000f66:	bf00      	nop
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	2000017c 	.word	0x2000017c
 8000f70:	20000288 	.word	0x20000288
 8000f74:	20000190 	.word	0x20000190
 8000f78:	20000130 	.word	0x20000130
 8000f7c:	080075d8 	.word	0x080075d8
 8000f80:	200002d4 	.word	0x200002d4

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0b8      	sub	sp, #224	; 0xe0
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f8e:	2244      	movs	r2, #68	; 0x44
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f005 fec8 	bl	8006d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa8:	463b      	mov	r3, r7
 8000faa:	2288      	movs	r2, #136	; 0x88
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f005 feba 	bl	8006d28 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc2:	2310      	movs	r3, #16
 8000fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fda:	230a      	movs	r3, #10
 8000fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 f828 	bl	800404c <HAL_RCC_OscConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001002:	f000 fafb 	bl	80015fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001006:	230f      	movs	r3, #15
 8001008:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100c:	2303      	movs	r3, #3
 800100e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001024:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001028:	2104      	movs	r1, #4
 800102a:	4618      	mov	r0, r3
 800102c:	f003 fbf4 	bl	8004818 <HAL_RCC_ClockConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001036:	f000 fae1 	bl	80015fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800103a:	f244 0302 	movw	r3, #16386	; 0x4002
 800103e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001040:	2300      	movs	r3, #0
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001044:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001048:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800104a:	2302      	movs	r3, #2
 800104c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800104e:	2301      	movs	r3, #1
 8001050:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001052:	2308      	movs	r3, #8
 8001054:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001056:	2307      	movs	r3, #7
 8001058:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800105a:	2302      	movs	r3, #2
 800105c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800105e:	2302      	movs	r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001062:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001066:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001068:	463b      	mov	r3, r7
 800106a:	4618      	mov	r0, r3
 800106c:	f003 fdda 	bl	8004c24 <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001076:	f000 fac1 	bl	80015fc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800107a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800107e:	f002 ff8f 	bl	8003fa0 <HAL_PWREx_ControlVoltageScaling>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x108>
  {
    Error_Handler();
 8001088:	f000 fab8 	bl	80015fc <Error_Handler>
  }
}
 800108c:	bf00      	nop
 800108e:	37e0      	adds	r7, #224	; 0xe0
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
 80010b4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80010b6:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <MX_ADC1_Init+0xe0>)
 80010b8:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <MX_ADC1_Init+0xe4>)
 80010ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <MX_ADC1_Init+0xe0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010c2:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <MX_ADC1_Init+0xe0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c8:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <MX_ADC1_Init+0xe0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ce:	4b29      	ldr	r3, [pc, #164]	; (8001174 <MX_ADC1_Init+0xe0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <MX_ADC1_Init+0xe0>)
 80010d6:	2204      	movs	r2, #4
 80010d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <MX_ADC1_Init+0xe0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <MX_ADC1_Init+0xe0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <MX_ADC1_Init+0xe0>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ec:	4b21      	ldr	r3, [pc, #132]	; (8001174 <MX_ADC1_Init+0xe0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <MX_ADC1_Init+0xe0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <MX_ADC1_Init+0xe0>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <MX_ADC1_Init+0xe0>)
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <MX_ADC1_Init+0xe0>)
 800110a:	2200      	movs	r2, #0
 800110c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <MX_ADC1_Init+0xe0>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001116:	4817      	ldr	r0, [pc, #92]	; (8001174 <MX_ADC1_Init+0xe0>)
 8001118:	f000 ff9a 	bl	8002050 <HAL_ADC_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001122:	f000 fa6b 	bl	80015fc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	4810      	ldr	r0, [pc, #64]	; (8001174 <MX_ADC1_Init+0xe0>)
 8001132:	f001 fefb 	bl	8002f2c <HAL_ADCEx_MultiModeConfigChannel>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800113c:	f000 fa5e 	bl	80015fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_ADC1_Init+0xe8>)
 8001142:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001144:	2306      	movs	r3, #6
 8001146:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800114c:	237f      	movs	r3, #127	; 0x7f
 800114e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001150:	2304      	movs	r3, #4
 8001152:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_ADC1_Init+0xe0>)
 800115e:	f001 fa6d 	bl	800263c <HAL_ADC_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001168:	f000 fa48 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	3728      	adds	r7, #40	; 0x28
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000224 	.word	0x20000224
 8001178:	50040000 	.word	0x50040000
 800117c:	14f00020 	.word	0x14f00020

08001180 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2224      	movs	r2, #36	; 0x24
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f005 fdcb 	bl	8006d28 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_DAC1_Init+0x5c>)
 8001194:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <MX_DAC1_Init+0x60>)
 8001196:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001198:	4810      	ldr	r0, [pc, #64]	; (80011dc <MX_DAC1_Init+0x5c>)
 800119a:	f002 f888 	bl	80032ae <HAL_DAC_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80011a4:	f000 fa2a 	bl	80015fc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80011ac:	2324      	movs	r3, #36	; 0x24
 80011ae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	; (80011dc <MX_DAC1_Init+0x5c>)
 80011c4:	f002 f980 	bl	80034c8 <HAL_DAC_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80011ce:	f000 fa15 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000017c 	.word	0x2000017c
 80011e0:	40007400 	.word	0x40007400

080011e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08c      	sub	sp, #48	; 0x30
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ea:	f107 0320 	add.w	r3, r7, #32
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001210:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <MX_TIM2_Init+0xdc>)
 8001212:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001216:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001218:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <MX_TIM2_Init+0xdc>)
 800121a:	2200      	movs	r2, #0
 800121c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121e:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <MX_TIM2_Init+0xdc>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24;
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <MX_TIM2_Init+0xdc>)
 8001226:	2218      	movs	r2, #24
 8001228:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <MX_TIM2_Init+0xdc>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001230:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <MX_TIM2_Init+0xdc>)
 8001232:	2280      	movs	r2, #128	; 0x80
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001236:	4822      	ldr	r0, [pc, #136]	; (80012c0 <MX_TIM2_Init+0xdc>)
 8001238:	f004 f9b0 	bl	800559c <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001242:	f000 f9db 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800124c:	f107 0320 	add.w	r3, r7, #32
 8001250:	4619      	mov	r1, r3
 8001252:	481b      	ldr	r0, [pc, #108]	; (80012c0 <MX_TIM2_Init+0xdc>)
 8001254:	f004 fc7e 	bl	8005b54 <HAL_TIM_ConfigClockSource>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800125e:	f000 f9cd 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001262:	4817      	ldr	r0, [pc, #92]	; (80012c0 <MX_TIM2_Init+0xdc>)
 8001264:	f004 fa62 	bl	800572c <HAL_TIM_IC_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800126e:	f000 f9c5 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001272:	2320      	movs	r3, #32
 8001274:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	480f      	ldr	r0, [pc, #60]	; (80012c0 <MX_TIM2_Init+0xdc>)
 8001282:	f004 ffad 	bl	80061e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800128c:	f000 f9b6 	bl	80015fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001294:	2301      	movs	r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	4619      	mov	r1, r3
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <MX_TIM2_Init+0xdc>)
 80012a8:	f004 fbc0 	bl	8005a2c <HAL_TIM_IC_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80012b2:	f000 f9a3 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	3730      	adds	r7, #48	; 0x30
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000288 	.word	0x20000288

080012c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08c      	sub	sp, #48	; 0x30
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012f0:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <MX_TIM3_Init+0xdc>)
 80012f2:	4a2c      	ldr	r2, [pc, #176]	; (80013a4 <MX_TIM3_Init+0xe0>)
 80012f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <MX_TIM3_Init+0xdc>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <MX_TIM3_Init+0xdc>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <MX_TIM3_Init+0xdc>)
 8001304:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001308:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800130a:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <MX_TIM3_Init+0xdc>)
 800130c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001310:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001312:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <MX_TIM3_Init+0xdc>)
 8001314:	2280      	movs	r2, #128	; 0x80
 8001316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001318:	4821      	ldr	r0, [pc, #132]	; (80013a0 <MX_TIM3_Init+0xdc>)
 800131a:	f004 f93f 	bl	800559c <HAL_TIM_Base_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001324:	f000 f96a 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800132e:	f107 0320 	add.w	r3, r7, #32
 8001332:	4619      	mov	r1, r3
 8001334:	481a      	ldr	r0, [pc, #104]	; (80013a0 <MX_TIM3_Init+0xdc>)
 8001336:	f004 fc0d 	bl	8005b54 <HAL_TIM_ConfigClockSource>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001340:	f000 f95c 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001344:	4816      	ldr	r0, [pc, #88]	; (80013a0 <MX_TIM3_Init+0xdc>)
 8001346:	f004 f9f1 	bl	800572c <HAL_TIM_IC_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001350:	f000 f954 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	480f      	ldr	r0, [pc, #60]	; (80013a0 <MX_TIM3_Init+0xdc>)
 8001364:	f004 ff3c 	bl	80061e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800136e:	f000 f945 	bl	80015fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001376:	2301      	movs	r3, #1
 8001378:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_TIM3_Init+0xdc>)
 800138a:	f004 fb4f 	bl	8005a2c <HAL_TIM_IC_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001394:	f000 f932 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	3730      	adds	r7, #48	; 0x30
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000190 	.word	0x20000190
 80013a4:	40000400 	.word	0x40000400

080013a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08c      	sub	sp, #48	; 0x30
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013d4:	4b2c      	ldr	r3, [pc, #176]	; (8001488 <MX_TIM4_Init+0xe0>)
 80013d6:	4a2d      	ldr	r2, [pc, #180]	; (800148c <MX_TIM4_Init+0xe4>)
 80013d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20000;
 80013da:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <MX_TIM4_Init+0xe0>)
 80013dc:	f644 6220 	movw	r2, #20000	; 0x4e20
 80013e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	4b29      	ldr	r3, [pc, #164]	; (8001488 <MX_TIM4_Init+0xe0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8000;
 80013e8:	4b27      	ldr	r3, [pc, #156]	; (8001488 <MX_TIM4_Init+0xe0>)
 80013ea:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80013ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <MX_TIM4_Init+0xe0>)
 80013f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <MX_TIM4_Init+0xe0>)
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013fe:	4822      	ldr	r0, [pc, #136]	; (8001488 <MX_TIM4_Init+0xe0>)
 8001400:	f004 f8cc 	bl	800559c <HAL_TIM_Base_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800140a:	f000 f8f7 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001412:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001414:	f107 0320 	add.w	r3, r7, #32
 8001418:	4619      	mov	r1, r3
 800141a:	481b      	ldr	r0, [pc, #108]	; (8001488 <MX_TIM4_Init+0xe0>)
 800141c:	f004 fb9a 	bl	8005b54 <HAL_TIM_ConfigClockSource>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001426:	f000 f8e9 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800142a:	4817      	ldr	r0, [pc, #92]	; (8001488 <MX_TIM4_Init+0xe0>)
 800142c:	f004 f97e 	bl	800572c <HAL_TIM_IC_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001436:	f000 f8e1 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	480f      	ldr	r0, [pc, #60]	; (8001488 <MX_TIM4_Init+0xe0>)
 800144a:	f004 fec9 	bl	80061e0 <HAL_TIMEx_MasterConfigSynchronization>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001454:	f000 f8d2 	bl	80015fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800145c:	2301      	movs	r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2200      	movs	r2, #0
 800146c:	4619      	mov	r1, r3
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <MX_TIM4_Init+0xe0>)
 8001470:	f004 fadc 	bl	8005a2c <HAL_TIM_IC_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800147a:	f000 f8bf 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	3730      	adds	r7, #48	; 0x30
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000130 	.word	0x20000130
 800148c:	40000800 	.word	0x40000800

08001490 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 8001496:	4a15      	ldr	r2, [pc, #84]	; (80014ec <MX_USART2_UART_Init+0x5c>)
 8001498:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 800149c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_USART2_UART_Init+0x58>)
 80014d4:	f004 ff2a 	bl	800632c <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014de:	f000 f88d 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200002d4 	.word	0x200002d4
 80014ec:	40004400 	.word	0x40004400

080014f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_DMA_Init+0x38>)
 80014f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014fa:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <MX_DMA_Init+0x38>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6493      	str	r3, [r2, #72]	; 0x48
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_DMA_Init+0x38>)
 8001504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	200d      	movs	r0, #13
 8001514:	f001 fe95 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001518:	200d      	movs	r0, #13
 800151a:	f001 feae 	bl	800327a <HAL_NVIC_EnableIRQ>

}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000

0800152c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <MX_GPIO_Init+0xc4>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	4a2a      	ldr	r2, [pc, #168]	; (80015f0 <MX_GPIO_Init+0xc4>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154e:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <MX_GPIO_Init+0xc4>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800155a:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <MX_GPIO_Init+0xc4>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	4a24      	ldr	r2, [pc, #144]	; (80015f0 <MX_GPIO_Init+0xc4>)
 8001560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <MX_GPIO_Init+0xc4>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <MX_GPIO_Init+0xc4>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	4a1e      	ldr	r2, [pc, #120]	; (80015f0 <MX_GPIO_Init+0xc4>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <MX_GPIO_Init+0xc4>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <MX_GPIO_Init+0xc4>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	4a18      	ldr	r2, [pc, #96]	; (80015f0 <MX_GPIO_Init+0xc4>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <MX_GPIO_Init+0xc4>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2120      	movs	r1, #32
 80015a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015aa:	f002 fcd3 	bl	8003f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_GPIO_Init+0xc8>)
 80015b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	480d      	ldr	r0, [pc, #52]	; (80015f8 <MX_GPIO_Init+0xcc>)
 80015c4:	f002 fb1c 	bl	8003c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015c8:	2320      	movs	r3, #32
 80015ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e2:	f002 fb0d 	bl	8003c00 <HAL_GPIO_Init>

}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	; 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	10210000 	.word	0x10210000
 80015f8:	48000800 	.word	0x48000800

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
}
 8001602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001604:	e7fe      	b.n	8001604 <Error_Handler+0x8>
	...

08001608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_MspInit+0x44>)
 8001610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001612:	4a0e      	ldr	r2, [pc, #56]	; (800164c <HAL_MspInit+0x44>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6613      	str	r3, [r2, #96]	; 0x60
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_MspInit+0x44>)
 800161c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_MspInit+0x44>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	4a08      	ldr	r2, [pc, #32]	; (800164c <HAL_MspInit+0x44>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001630:	6593      	str	r3, [r2, #88]	; 0x58
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_MspInit+0x44>)
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000

08001650 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a15      	ldr	r2, [pc, #84]	; (80016c4 <HAL_ADC_MspInit+0x74>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d124      	bne.n	80016bc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_ADC_MspInit+0x78>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <HAL_ADC_MspInit+0x78>)
 8001678:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800167c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_ADC_MspInit+0x78>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <HAL_ADC_MspInit+0x78>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <HAL_ADC_MspInit+0x78>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <HAL_ADC_MspInit+0x78>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016a2:	2301      	movs	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016a6:	230b      	movs	r3, #11
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b8:	f002 faa2 	bl	8003c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	; 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	50040000 	.word	0x50040000
 80016c8:	40021000 	.word	0x40021000

080016cc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a2b      	ldr	r2, [pc, #172]	; (8001798 <HAL_DAC_MspInit+0xcc>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d150      	bne.n	8001790 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80016ee:	4b2b      	ldr	r3, [pc, #172]	; (800179c <HAL_DAC_MspInit+0xd0>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	4a2a      	ldr	r2, [pc, #168]	; (800179c <HAL_DAC_MspInit+0xd0>)
 80016f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016f8:	6593      	str	r3, [r2, #88]	; 0x58
 80016fa:	4b28      	ldr	r3, [pc, #160]	; (800179c <HAL_DAC_MspInit+0xd0>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <HAL_DAC_MspInit+0xd0>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a24      	ldr	r2, [pc, #144]	; (800179c <HAL_DAC_MspInit+0xd0>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <HAL_DAC_MspInit+0xd0>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800171e:	2310      	movs	r3, #16
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001722:	2303      	movs	r3, #3
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001734:	f002 fa64 	bl	8003c00 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_DAC_MspInit+0xd4>)
 800173a:	4a1a      	ldr	r2, [pc, #104]	; (80017a4 <HAL_DAC_MspInit+0xd8>)
 800173c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <HAL_DAC_MspInit+0xd4>)
 8001740:	2206      	movs	r2, #6
 8001742:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001744:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_DAC_MspInit+0xd4>)
 8001746:	2210      	movs	r2, #16
 8001748:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_DAC_MspInit+0xd4>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <HAL_DAC_MspInit+0xd4>)
 8001752:	2280      	movs	r2, #128	; 0x80
 8001754:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_DAC_MspInit+0xd4>)
 8001758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175c:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_DAC_MspInit+0xd4>)
 8001760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001764:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_DAC_MspInit+0xd4>)
 8001768:	2220      	movs	r2, #32
 800176a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <HAL_DAC_MspInit+0xd4>)
 800176e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001772:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001774:	480a      	ldr	r0, [pc, #40]	; (80017a0 <HAL_DAC_MspInit+0xd4>)
 8001776:	f002 f84b 	bl	8003810 <HAL_DMA_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001780:	f7ff ff3c 	bl	80015fc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <HAL_DAC_MspInit+0xd4>)
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <HAL_DAC_MspInit+0xd4>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001790:	bf00      	nop
 8001792:	3728      	adds	r7, #40	; 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40007400 	.word	0x40007400
 800179c:	40021000 	.word	0x40021000
 80017a0:	200001dc 	.word	0x200001dc
 80017a4:	40020030 	.word	0x40020030

080017a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08e      	sub	sp, #56	; 0x38
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c8:	d12a      	bne.n	8001820 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ca:	4b4d      	ldr	r3, [pc, #308]	; (8001900 <HAL_TIM_Base_MspInit+0x158>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	4a4c      	ldr	r2, [pc, #304]	; (8001900 <HAL_TIM_Base_MspInit+0x158>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6593      	str	r3, [r2, #88]	; 0x58
 80017d6:	4b4a      	ldr	r3, [pc, #296]	; (8001900 <HAL_TIM_Base_MspInit+0x158>)
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	623b      	str	r3, [r7, #32]
 80017e0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	4b47      	ldr	r3, [pc, #284]	; (8001900 <HAL_TIM_Base_MspInit+0x158>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	4a46      	ldr	r2, [pc, #280]	; (8001900 <HAL_TIM_Base_MspInit+0x158>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ee:	4b44      	ldr	r3, [pc, #272]	; (8001900 <HAL_TIM_Base_MspInit+0x158>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800180c:	2301      	movs	r3, #1
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001814:	4619      	mov	r1, r3
 8001816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181a:	f002 f9f1 	bl	8003c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800181e:	e06b      	b.n	80018f8 <HAL_TIM_Base_MspInit+0x150>
  else if(htim_base->Instance==TIM3)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a37      	ldr	r2, [pc, #220]	; (8001904 <HAL_TIM_Base_MspInit+0x15c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d131      	bne.n	800188e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800182a:	4b35      	ldr	r3, [pc, #212]	; (8001900 <HAL_TIM_Base_MspInit+0x158>)
 800182c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182e:	4a34      	ldr	r2, [pc, #208]	; (8001900 <HAL_TIM_Base_MspInit+0x158>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6593      	str	r3, [r2, #88]	; 0x58
 8001836:	4b32      	ldr	r3, [pc, #200]	; (8001900 <HAL_TIM_Base_MspInit+0x158>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	61bb      	str	r3, [r7, #24]
 8001840:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	4b2f      	ldr	r3, [pc, #188]	; (8001900 <HAL_TIM_Base_MspInit+0x158>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	4a2e      	ldr	r2, [pc, #184]	; (8001900 <HAL_TIM_Base_MspInit+0x158>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184e:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <HAL_TIM_Base_MspInit+0x158>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800185a:	2340      	movs	r3, #64	; 0x40
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800186a:	2302      	movs	r3, #2
 800186c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001878:	f002 f9c2 	bl	8003c00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2100      	movs	r1, #0
 8001880:	201d      	movs	r0, #29
 8001882:	f001 fcde 	bl	8003242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001886:	201d      	movs	r0, #29
 8001888:	f001 fcf7 	bl	800327a <HAL_NVIC_EnableIRQ>
}
 800188c:	e034      	b.n	80018f8 <HAL_TIM_Base_MspInit+0x150>
  else if(htim_base->Instance==TIM4)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <HAL_TIM_Base_MspInit+0x160>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d12f      	bne.n	80018f8 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_TIM_Base_MspInit+0x158>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	4a18      	ldr	r2, [pc, #96]	; (8001900 <HAL_TIM_Base_MspInit+0x158>)
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	6593      	str	r3, [r2, #88]	; 0x58
 80018a4:	4b16      	ldr	r3, [pc, #88]	; (8001900 <HAL_TIM_Base_MspInit+0x158>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <HAL_TIM_Base_MspInit+0x158>)
 80018b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b4:	4a12      	ldr	r2, [pc, #72]	; (8001900 <HAL_TIM_Base_MspInit+0x158>)
 80018b6:	f043 0302 	orr.w	r3, r3, #2
 80018ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_TIM_Base_MspInit+0x158>)
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018c8:	2340      	movs	r3, #64	; 0x40
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018d8:	2302      	movs	r3, #2
 80018da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e0:	4619      	mov	r1, r3
 80018e2:	480a      	ldr	r0, [pc, #40]	; (800190c <HAL_TIM_Base_MspInit+0x164>)
 80018e4:	f002 f98c 	bl	8003c00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2100      	movs	r1, #0
 80018ec:	201e      	movs	r0, #30
 80018ee:	f001 fca8 	bl	8003242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018f2:	201e      	movs	r0, #30
 80018f4:	f001 fcc1 	bl	800327a <HAL_NVIC_EnableIRQ>
}
 80018f8:	bf00      	nop
 80018fa:	3738      	adds	r7, #56	; 0x38
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40021000 	.word	0x40021000
 8001904:	40000400 	.word	0x40000400
 8001908:	40000800 	.word	0x40000800
 800190c:	48000400 	.word	0x48000400

08001910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a17      	ldr	r2, [pc, #92]	; (800198c <HAL_UART_MspInit+0x7c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d128      	bne.n	8001984 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <HAL_UART_MspInit+0x80>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	4a16      	ldr	r2, [pc, #88]	; (8001990 <HAL_UART_MspInit+0x80>)
 8001938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193c:	6593      	str	r3, [r2, #88]	; 0x58
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <HAL_UART_MspInit+0x80>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <HAL_UART_MspInit+0x80>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	4a10      	ldr	r2, [pc, #64]	; (8001990 <HAL_UART_MspInit+0x80>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_UART_MspInit+0x80>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001962:	230c      	movs	r3, #12
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001972:	2307      	movs	r3, #7
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001980:	f002 f93e 	bl	8003c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001984:	bf00      	nop
 8001986:	3728      	adds	r7, #40	; 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40004400 	.word	0x40004400
 8001990:	40021000 	.word	0x40021000

08001994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <NMI_Handler+0x4>

0800199a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <HardFault_Handler+0x4>

080019a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <MemManage_Handler+0x4>

080019a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <BusFault_Handler+0x4>

080019ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <UsageFault_Handler+0x4>

080019b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e0:	f000 f90e 	bl	8001c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <DMA1_Channel3_IRQHandler+0x10>)
 80019ee:	f002 f827 	bl	8003a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200001dc 	.word	0x200001dc

080019fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <TIM3_IRQHandler+0x10>)
 8001a02:	f003 fef4 	bl	80057ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000190 	.word	0x20000190

08001a10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <TIM4_IRQHandler+0x10>)
 8001a16:	f003 feea 	bl	80057ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000130 	.word	0x20000130

08001a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a2c:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <_sbrk+0x5c>)
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <_sbrk+0x60>)
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <_sbrk+0x64>)
 8001a42:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <_sbrk+0x68>)
 8001a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d207      	bcs.n	8001a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a54:	f005 f93e 	bl	8006cd4 <__errno>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	e009      	b.n	8001a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <_sbrk+0x64>)
 8001a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20018000 	.word	0x20018000
 8001a84:	00000400 	.word	0x00000400
 8001a88:	20000124 	.word	0x20000124
 8001a8c:	20000370 	.word	0x20000370

08001a90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <SystemInit+0x5c>)
 8001a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9a:	4a14      	ldr	r2, [pc, #80]	; (8001aec <SystemInit+0x5c>)
 8001a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <SystemInit+0x60>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a11      	ldr	r2, [pc, #68]	; (8001af0 <SystemInit+0x60>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <SystemInit+0x60>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <SystemInit+0x60>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a0d      	ldr	r2, [pc, #52]	; (8001af0 <SystemInit+0x60>)
 8001abc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ac0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ac4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <SystemInit+0x60>)
 8001ac8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001acc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <SystemInit+0x60>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <SystemInit+0x60>)
 8001ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <SystemInit+0x60>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00
 8001af0:	40021000 	.word	0x40021000

08001af4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001af8:	f7ff ffca 	bl	8001a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001afc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001afe:	e003      	b.n	8001b08 <LoopCopyDataInit>

08001b00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b06:	3104      	adds	r1, #4

08001b08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b08:	480a      	ldr	r0, [pc, #40]	; (8001b34 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b10:	d3f6      	bcc.n	8001b00 <CopyDataInit>
	ldr	r2, =_sbss
 8001b12:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b14:	e002      	b.n	8001b1c <LoopFillZerobss>

08001b16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b18:	f842 3b04 	str.w	r3, [r2], #4

08001b1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <LoopForever+0x16>)
	cmp	r2, r3
 8001b1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b20:	d3f9      	bcc.n	8001b16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b22:	f005 f8dd 	bl	8006ce0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b26:	f7ff f9f1 	bl	8000f0c <main>

08001b2a <LoopForever>:

LoopForever:
    b LoopForever
 8001b2a:	e7fe      	b.n	8001b2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b2c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001b30:	0800767c 	.word	0x0800767c
	ldr	r0, =_sdata
 8001b34:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b38:	200000f0 	.word	0x200000f0
	ldr	r2, =_sbss
 8001b3c:	200000f0 	.word	0x200000f0
	ldr	r3, = _ebss
 8001b40:	2000036c 	.word	0x2000036c

08001b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b44:	e7fe      	b.n	8001b44 <ADC1_2_IRQHandler>
	...

08001b48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_Init+0x3c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <HAL_Init+0x3c>)
 8001b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5e:	2003      	movs	r0, #3
 8001b60:	f001 fb64 	bl	800322c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b64:	2000      	movs	r0, #0
 8001b66:	f000 f80f 	bl	8001b88 <HAL_InitTick>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	71fb      	strb	r3, [r7, #7]
 8001b74:	e001      	b.n	8001b7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b76:	f7ff fd47 	bl	8001608 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40022000 	.word	0x40022000

08001b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b94:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_InitTick+0x6c>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d023      	beq.n	8001be4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_InitTick+0x70>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_InitTick+0x6c>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f001 fb6f 	bl	8003296 <HAL_SYSTICK_Config>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10f      	bne.n	8001bde <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b0f      	cmp	r3, #15
 8001bc2:	d809      	bhi.n	8001bd8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	f001 fb39 	bl	8003242 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bd0:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_InitTick+0x74>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e007      	b.n	8001be8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
 8001bdc:	e004      	b.n	8001be8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
 8001be2:	e001      	b.n	8001be8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000088 	.word	0x20000088
 8001bf8:	20000080 	.word	0x20000080
 8001bfc:	20000084 	.word	0x20000084

08001c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_IncTick+0x20>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_IncTick+0x24>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <HAL_IncTick+0x24>)
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000088 	.word	0x20000088
 8001c24:	20000358 	.word	0x20000358

08001c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <HAL_GetTick+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000358 	.word	0x20000358

08001c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7ff ffee 	bl	8001c28 <HAL_GetTick>
 8001c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	d005      	beq.n	8001c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_Delay+0x44>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4413      	add	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c66:	bf00      	nop
 8001c68:	f7ff ffde 	bl	8001c28 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d8f7      	bhi.n	8001c68 <HAL_Delay+0x28>
  {
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000088 	.word	0x20000088

08001c88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3360      	adds	r3, #96	; 0x60
 8001d02:	461a      	mov	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <LL_ADC_SetOffset+0x44>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d28:	bf00      	nop
 8001d2a:	371c      	adds	r7, #28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	03fff000 	.word	0x03fff000

08001d38 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3360      	adds	r3, #96	; 0x60
 8001d46:	461a      	mov	r2, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3360      	adds	r3, #96	; 0x60
 8001d74:	461a      	mov	r2, r3
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d8e:	bf00      	nop
 8001d90:	371c      	adds	r7, #28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3330      	adds	r3, #48	; 0x30
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	4413      	add	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	211f      	movs	r1, #31
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	401a      	ands	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	0e9b      	lsrs	r3, r3, #26
 8001df8:	f003 011f 	and.w	r1, r3, #31
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	431a      	orrs	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e0c:	bf00      	nop
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3314      	adds	r3, #20
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	0e5b      	lsrs	r3, r3, #25
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	4413      	add	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	0d1b      	lsrs	r3, r3, #20
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	2107      	movs	r1, #7
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	0d1b      	lsrs	r3, r3, #20
 8001e52:	f003 031f 	and.w	r3, r3, #31
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e62:	bf00      	nop
 8001e64:	371c      	adds	r7, #28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0318 	and.w	r3, r3, #24
 8001e92:	4908      	ldr	r1, [pc, #32]	; (8001eb4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e94:	40d9      	lsrs	r1, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	400b      	ands	r3, r1
 8001e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	0007ffff 	.word	0x0007ffff

08001eb8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 031f 	and.w	r3, r3, #31
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6093      	str	r3, [r2, #8]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f28:	d101      	bne.n	8001f2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f78:	d101      	bne.n	8001f7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <LL_ADC_IsEnabled+0x18>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <LL_ADC_IsEnabled+0x1a>
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fee:	f043 0204 	orr.w	r2, r3, #4
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b04      	cmp	r3, #4
 8002014:	d101      	bne.n	800201a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b08      	cmp	r3, #8
 800203a:	d101      	bne.n	8002040 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e136      	b.n	80022d8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002074:	2b00      	cmp	r3, #0
 8002076:	d109      	bne.n	800208c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fae9 	bl	8001650 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff3f 	bl	8001f14 <LL_ADC_IsDeepPowerDownEnabled>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d004      	beq.n	80020a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff25 	bl	8001ef0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff5a 	bl	8001f64 <LL_ADC_IsInternalRegulatorEnabled>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d115      	bne.n	80020e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ff3e 	bl	8001f3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020c0:	4b87      	ldr	r3, [pc, #540]	; (80022e0 <HAL_ADC_Init+0x290>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	099b      	lsrs	r3, r3, #6
 80020c6:	4a87      	ldr	r2, [pc, #540]	; (80022e4 <HAL_ADC_Init+0x294>)
 80020c8:	fba2 2303 	umull	r2, r3, r2, r3
 80020cc:	099b      	lsrs	r3, r3, #6
 80020ce:	3301      	adds	r3, #1
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020d4:	e002      	b.n	80020dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	3b01      	subs	r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f9      	bne.n	80020d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff ff3c 	bl	8001f64 <LL_ADC_IsInternalRegulatorEnabled>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10d      	bne.n	800210e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f6:	f043 0210 	orr.w	r2, r3, #16
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002102:	f043 0201 	orr.w	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff ff75 	bl	8002002 <LL_ADC_REG_IsConversionOngoing>
 8002118:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	2b00      	cmp	r3, #0
 8002124:	f040 80cf 	bne.w	80022c6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 80cb 	bne.w	80022c6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002134:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002138:	f043 0202 	orr.w	r2, r3, #2
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff35 	bl	8001fb4 <LL_ADC_IsEnabled>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d115      	bne.n	800217c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002150:	4865      	ldr	r0, [pc, #404]	; (80022e8 <HAL_ADC_Init+0x298>)
 8002152:	f7ff ff2f 	bl	8001fb4 <LL_ADC_IsEnabled>
 8002156:	4604      	mov	r4, r0
 8002158:	4864      	ldr	r0, [pc, #400]	; (80022ec <HAL_ADC_Init+0x29c>)
 800215a:	f7ff ff2b 	bl	8001fb4 <LL_ADC_IsEnabled>
 800215e:	4603      	mov	r3, r0
 8002160:	431c      	orrs	r4, r3
 8002162:	4863      	ldr	r0, [pc, #396]	; (80022f0 <HAL_ADC_Init+0x2a0>)
 8002164:	f7ff ff26 	bl	8001fb4 <LL_ADC_IsEnabled>
 8002168:	4603      	mov	r3, r0
 800216a:	4323      	orrs	r3, r4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d105      	bne.n	800217c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4619      	mov	r1, r3
 8002176:	485f      	ldr	r0, [pc, #380]	; (80022f4 <HAL_ADC_Init+0x2a4>)
 8002178:	f7ff fd86 	bl	8001c88 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	7e5b      	ldrb	r3, [r3, #25]
 8002180:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002186:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800218c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002192:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800219a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d106      	bne.n	80021b8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	3b01      	subs	r3, #1
 80021b0:	045b      	lsls	r3, r3, #17
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d009      	beq.n	80021d4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	4b47      	ldr	r3, [pc, #284]	; (80022f8 <HAL_ADC_Init+0x2a8>)
 80021dc:	4013      	ands	r3, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	69b9      	ldr	r1, [r7, #24]
 80021e4:	430b      	orrs	r3, r1
 80021e6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff08 	bl	8002002 <LL_ADC_REG_IsConversionOngoing>
 80021f2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff15 	bl	8002028 <LL_ADC_INJ_IsConversionOngoing>
 80021fe:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d13d      	bne.n	8002282 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d13a      	bne.n	8002282 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002210:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002218:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002228:	f023 0302 	bic.w	r3, r3, #2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	69b9      	ldr	r1, [r7, #24]
 8002232:	430b      	orrs	r3, r1
 8002234:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800223c:	2b01      	cmp	r3, #1
 800223e:	d118      	bne.n	8002272 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800224a:	f023 0304 	bic.w	r3, r3, #4
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002256:	4311      	orrs	r1, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800225c:	4311      	orrs	r1, r2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002262:	430a      	orrs	r2, r1
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	611a      	str	r2, [r3, #16]
 8002270:	e007      	b.n	8002282 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0201 	bic.w	r2, r2, #1
 8002280:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d10c      	bne.n	80022a4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	f023 010f 	bic.w	r1, r3, #15
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	1e5a      	subs	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30
 80022a2:	e007      	b.n	80022b4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 020f 	bic.w	r2, r2, #15
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b8:	f023 0303 	bic.w	r3, r3, #3
 80022bc:	f043 0201 	orr.w	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	655a      	str	r2, [r3, #84]	; 0x54
 80022c4:	e007      	b.n	80022d6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ca:	f043 0210 	orr.w	r2, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3724      	adds	r7, #36	; 0x24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd90      	pop	{r4, r7, pc}
 80022e0:	20000080 	.word	0x20000080
 80022e4:	053e2d63 	.word	0x053e2d63
 80022e8:	50040000 	.word	0x50040000
 80022ec:	50040100 	.word	0x50040100
 80022f0:	50040200 	.word	0x50040200
 80022f4:	50040300 	.word	0x50040300
 80022f8:	fff0c007 	.word	0xfff0c007

080022fc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002304:	4857      	ldr	r0, [pc, #348]	; (8002464 <HAL_ADC_Start+0x168>)
 8002306:	f7ff fdd7 	bl	8001eb8 <LL_ADC_GetMultimode>
 800230a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fe76 	bl	8002002 <LL_ADC_REG_IsConversionOngoing>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	f040 809c 	bne.w	8002456 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_ADC_Start+0x30>
 8002328:	2302      	movs	r3, #2
 800232a:	e097      	b.n	800245c <HAL_ADC_Start+0x160>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 fd71 	bl	8002e1c <ADC_Enable>
 800233a:	4603      	mov	r3, r0
 800233c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800233e:	7dfb      	ldrb	r3, [r7, #23]
 8002340:	2b00      	cmp	r3, #0
 8002342:	f040 8083 	bne.w	800244c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a42      	ldr	r2, [pc, #264]	; (8002468 <HAL_ADC_Start+0x16c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d002      	beq.n	800236a <HAL_ADC_Start+0x6e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	e000      	b.n	800236c <HAL_ADC_Start+0x70>
 800236a:	4b40      	ldr	r3, [pc, #256]	; (800246c <HAL_ADC_Start+0x170>)
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	4293      	cmp	r3, r2
 8002372:	d002      	beq.n	800237a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d105      	bne.n	8002386 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800238e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002392:	d106      	bne.n	80023a2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	f023 0206 	bic.w	r2, r3, #6
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	659a      	str	r2, [r3, #88]	; 0x58
 80023a0:	e002      	b.n	80023a8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	221c      	movs	r2, #28
 80023ae:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a2a      	ldr	r2, [pc, #168]	; (8002468 <HAL_ADC_Start+0x16c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d002      	beq.n	80023c8 <HAL_ADC_Start+0xcc>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	e000      	b.n	80023ca <HAL_ADC_Start+0xce>
 80023c8:	4b28      	ldr	r3, [pc, #160]	; (800246c <HAL_ADC_Start+0x170>)
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d008      	beq.n	80023e4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	2b05      	cmp	r3, #5
 80023dc:	d002      	beq.n	80023e4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b09      	cmp	r3, #9
 80023e2:	d114      	bne.n	800240e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fde7 	bl	8001fda <LL_ADC_REG_StartConversion>
 800240c:	e025      	b.n	800245a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002412:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a12      	ldr	r2, [pc, #72]	; (8002468 <HAL_ADC_Start+0x16c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d002      	beq.n	800242a <HAL_ADC_Start+0x12e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	e000      	b.n	800242c <HAL_ADC_Start+0x130>
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <HAL_ADC_Start+0x170>)
 800242c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00f      	beq.n	800245a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002442:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	655a      	str	r2, [r3, #84]	; 0x54
 800244a:	e006      	b.n	800245a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002454:	e001      	b.n	800245a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002456:	2302      	movs	r3, #2
 8002458:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800245a:	7dfb      	ldrb	r3, [r7, #23]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	50040300 	.word	0x50040300
 8002468:	50040100 	.word	0x50040100
 800246c:	50040000 	.word	0x50040000

08002470 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800247a:	4866      	ldr	r0, [pc, #408]	; (8002614 <HAL_ADC_PollForConversion+0x1a4>)
 800247c:	f7ff fd1c 	bl	8001eb8 <LL_ADC_GetMultimode>
 8002480:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	2b08      	cmp	r3, #8
 8002488:	d102      	bne.n	8002490 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800248a:	2308      	movs	r3, #8
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	e02a      	b.n	80024e6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b05      	cmp	r3, #5
 800249a:	d002      	beq.n	80024a2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2b09      	cmp	r3, #9
 80024a0:	d111      	bne.n	80024c6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b4:	f043 0220 	orr.w	r2, r3, #32
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0a4      	b.n	800260a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80024c0:	2304      	movs	r3, #4
 80024c2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80024c4:	e00f      	b.n	80024e6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80024c6:	4853      	ldr	r0, [pc, #332]	; (8002614 <HAL_ADC_PollForConversion+0x1a4>)
 80024c8:	f7ff fd04 	bl	8001ed4 <LL_ADC_GetMultiDMATransfer>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f043 0220 	orr.w	r2, r3, #32
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e093      	b.n	800260a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80024e2:	2304      	movs	r3, #4
 80024e4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80024e6:	f7ff fb9f 	bl	8001c28 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024ec:	e021      	b.n	8002532 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f4:	d01d      	beq.n	8002532 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80024f6:	f7ff fb97 	bl	8001c28 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d302      	bcc.n	800250c <HAL_ADC_PollForConversion+0x9c>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d112      	bne.n	8002532 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10b      	bne.n	8002532 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	f043 0204 	orr.w	r2, r3, #4
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e06b      	b.n	800260a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	4013      	ands	r3, r2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0d6      	beq.n	80024ee <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002544:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fc22 	bl	8001d9a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d01c      	beq.n	8002596 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7e5b      	ldrb	r3, [r3, #25]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d118      	bne.n	8002596 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b08      	cmp	r3, #8
 8002570:	d111      	bne.n	8002596 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d105      	bne.n	8002596 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258e:	f043 0201 	orr.w	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a1f      	ldr	r2, [pc, #124]	; (8002618 <HAL_ADC_PollForConversion+0x1a8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d002      	beq.n	80025a6 <HAL_ADC_PollForConversion+0x136>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	e000      	b.n	80025a8 <HAL_ADC_PollForConversion+0x138>
 80025a6:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_ADC_PollForConversion+0x1ac>)
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d008      	beq.n	80025c2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d002      	beq.n	80025c2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2b09      	cmp	r3, #9
 80025c0:	d104      	bne.n	80025cc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	e00c      	b.n	80025e6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a11      	ldr	r2, [pc, #68]	; (8002618 <HAL_ADC_PollForConversion+0x1a8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d002      	beq.n	80025dc <HAL_ADC_PollForConversion+0x16c>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	e000      	b.n	80025de <HAL_ADC_PollForConversion+0x16e>
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <HAL_ADC_PollForConversion+0x1ac>)
 80025de:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d104      	bne.n	80025f6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2208      	movs	r2, #8
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	e008      	b.n	8002608 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d103      	bne.n	8002608 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	220c      	movs	r2, #12
 8002606:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3720      	adds	r7, #32
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	50040300 	.word	0x50040300
 8002618:	50040100 	.word	0x50040100
 800261c:	50040000 	.word	0x50040000

08002620 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b0b6      	sub	sp, #216	; 0xd8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_ADC_ConfigChannel+0x22>
 800265a:	2302      	movs	r3, #2
 800265c:	e3c7      	b.n	8002dee <HAL_ADC_ConfigChannel+0x7b2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fcc9 	bl	8002002 <LL_ADC_REG_IsConversionOngoing>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 83a8 	bne.w	8002dc8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b05      	cmp	r3, #5
 800267e:	d824      	bhi.n	80026ca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	3b02      	subs	r3, #2
 8002686:	2b03      	cmp	r3, #3
 8002688:	d81b      	bhi.n	80026c2 <HAL_ADC_ConfigChannel+0x86>
 800268a:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <HAL_ADC_ConfigChannel+0x54>)
 800268c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002690:	080026a1 	.word	0x080026a1
 8002694:	080026a9 	.word	0x080026a9
 8002698:	080026b1 	.word	0x080026b1
 800269c:	080026b9 	.word	0x080026b9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	220c      	movs	r2, #12
 80026a4:	605a      	str	r2, [r3, #4]
          break;
 80026a6:	e011      	b.n	80026cc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2212      	movs	r2, #18
 80026ac:	605a      	str	r2, [r3, #4]
          break;
 80026ae:	e00d      	b.n	80026cc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2218      	movs	r2, #24
 80026b4:	605a      	str	r2, [r3, #4]
          break;
 80026b6:	e009      	b.n	80026cc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026be:	605a      	str	r2, [r3, #4]
          break;
 80026c0:	e004      	b.n	80026cc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2206      	movs	r2, #6
 80026c6:	605a      	str	r2, [r3, #4]
          break;
 80026c8:	e000      	b.n	80026cc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80026ca:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	f7ff fb71 	bl	8001dc0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fc8d 	bl	8002002 <LL_ADC_REG_IsConversionOngoing>
 80026e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fc99 	bl	8002028 <LL_ADC_INJ_IsConversionOngoing>
 80026f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 81a6 	bne.w	8002a50 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002704:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002708:	2b00      	cmp	r3, #0
 800270a:	f040 81a1 	bne.w	8002a50 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6819      	ldr	r1, [r3, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	461a      	mov	r2, r3
 800271c:	f7ff fb7c 	bl	8001e18 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	695a      	ldr	r2, [r3, #20]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	08db      	lsrs	r3, r3, #3
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b04      	cmp	r3, #4
 8002740:	d00a      	beq.n	8002758 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6919      	ldr	r1, [r3, #16]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002752:	f7ff facd 	bl	8001cf0 <LL_ADC_SetOffset>
 8002756:	e17b      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff faea 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 8002764:	4603      	mov	r3, r0
 8002766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10a      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x148>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fadf 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 800277a:	4603      	mov	r3, r0
 800277c:	0e9b      	lsrs	r3, r3, #26
 800277e:	f003 021f 	and.w	r2, r3, #31
 8002782:	e01e      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x186>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fad4 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 8002790:	4603      	mov	r3, r0
 8002792:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80027b2:	2320      	movs	r3, #32
 80027b4:	e004      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80027b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d105      	bne.n	80027da <HAL_ADC_ConfigChannel+0x19e>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	0e9b      	lsrs	r3, r3, #26
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	e018      	b.n	800280c <HAL_ADC_ConfigChannel+0x1d0>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80027ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80027f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80027fe:	2320      	movs	r3, #32
 8002800:	e004      	b.n	800280c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002802:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800280c:	429a      	cmp	r2, r3
 800280e:	d106      	bne.n	800281e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2200      	movs	r2, #0
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff faa3 	bl	8001d64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2101      	movs	r1, #1
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fa87 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 800282a:	4603      	mov	r3, r0
 800282c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10a      	bne.n	800284a <HAL_ADC_ConfigChannel+0x20e>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2101      	movs	r1, #1
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fa7c 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	0e9b      	lsrs	r3, r3, #26
 8002844:	f003 021f 	and.w	r2, r3, #31
 8002848:	e01e      	b.n	8002888 <HAL_ADC_ConfigChannel+0x24c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2101      	movs	r1, #1
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fa71 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 8002856:	4603      	mov	r3, r0
 8002858:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002868:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800286c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002870:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002878:	2320      	movs	r3, #32
 800287a:	e004      	b.n	8002886 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800287c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002880:	fab3 f383 	clz	r3, r3
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002890:	2b00      	cmp	r3, #0
 8002892:	d105      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x264>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	0e9b      	lsrs	r3, r3, #26
 800289a:	f003 031f 	and.w	r3, r3, #31
 800289e:	e018      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x296>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028ac:	fa93 f3a3 	rbit	r3, r3
 80028b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80028b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80028bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80028c4:	2320      	movs	r3, #32
 80028c6:	e004      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80028c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028cc:	fab3 f383 	clz	r3, r3
 80028d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d106      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2200      	movs	r2, #0
 80028dc:	2101      	movs	r1, #1
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fa40 	bl	8001d64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2102      	movs	r1, #2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff fa24 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10a      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x2d4>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2102      	movs	r1, #2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fa19 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 8002906:	4603      	mov	r3, r0
 8002908:	0e9b      	lsrs	r3, r3, #26
 800290a:	f003 021f 	and.w	r2, r3, #31
 800290e:	e01e      	b.n	800294e <HAL_ADC_ConfigChannel+0x312>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2102      	movs	r1, #2
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff fa0e 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 800291c:	4603      	mov	r3, r0
 800291e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800292e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002936:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800293e:	2320      	movs	r3, #32
 8002940:	e004      	b.n	800294c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002942:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002956:	2b00      	cmp	r3, #0
 8002958:	d105      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x32a>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	0e9b      	lsrs	r3, r3, #26
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	e016      	b.n	8002994 <HAL_ADC_ConfigChannel+0x358>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002978:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800297a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800297e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002986:	2320      	movs	r3, #32
 8002988:	e004      	b.n	8002994 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800298a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002994:	429a      	cmp	r2, r3
 8002996:	d106      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2200      	movs	r2, #0
 800299e:	2102      	movs	r1, #2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff f9df 	bl	8001d64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2103      	movs	r1, #3
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff f9c3 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x396>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2103      	movs	r1, #3
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff f9b8 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 80029c8:	4603      	mov	r3, r0
 80029ca:	0e9b      	lsrs	r3, r3, #26
 80029cc:	f003 021f 	and.w	r2, r3, #31
 80029d0:	e017      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x3c6>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2103      	movs	r1, #3
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff f9ad 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 80029de:	4603      	mov	r3, r0
 80029e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80029ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029ec:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80029ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80029f4:	2320      	movs	r3, #32
 80029f6:	e003      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80029f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d105      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x3de>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	0e9b      	lsrs	r3, r3, #26
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	e011      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x402>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002a32:	2320      	movs	r3, #32
 8002a34:	e003      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d106      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2200      	movs	r2, #0
 8002a48:	2103      	movs	r1, #3
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f98a 	bl	8001d64 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff faad 	bl	8001fb4 <LL_ADC_IsEnabled>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f040 813f 	bne.w	8002ce0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6819      	ldr	r1, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f7ff f9fe 	bl	8001e70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a8e      	ldr	r2, [pc, #568]	; (8002cb4 <HAL_ADC_ConfigChannel+0x678>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	f040 8130 	bne.w	8002ce0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x46c>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	0e9b      	lsrs	r3, r3, #26
 8002a96:	3301      	adds	r3, #1
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	2b09      	cmp	r3, #9
 8002a9e:	bf94      	ite	ls
 8002aa0:	2301      	movls	r3, #1
 8002aa2:	2300      	movhi	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	e019      	b.n	8002adc <HAL_ADC_ConfigChannel+0x4a0>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ab8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002ac0:	2320      	movs	r3, #32
 8002ac2:	e003      	b.n	8002acc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002ac4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	3301      	adds	r3, #1
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	2b09      	cmp	r3, #9
 8002ad4:	bf94      	ite	ls
 8002ad6:	2301      	movls	r3, #1
 8002ad8:	2300      	movhi	r3, #0
 8002ada:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d079      	beq.n	8002bd4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d107      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x4c0>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	0e9b      	lsrs	r3, r3, #26
 8002af2:	3301      	adds	r3, #1
 8002af4:	069b      	lsls	r3, r3, #26
 8002af6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002afa:	e015      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x4ec>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b0c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002b14:	2320      	movs	r3, #32
 8002b16:	e003      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	3301      	adds	r3, #1
 8002b22:	069b      	lsls	r3, r3, #26
 8002b24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d109      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x50c>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	0e9b      	lsrs	r3, r3, #26
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	2101      	movs	r1, #1
 8002b42:	fa01 f303 	lsl.w	r3, r1, r3
 8002b46:	e017      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x53c>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b58:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002b60:	2320      	movs	r3, #32
 8002b62:	e003      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	2101      	movs	r1, #1
 8002b74:	fa01 f303 	lsl.w	r3, r1, r3
 8002b78:	ea42 0103 	orr.w	r1, r2, r3
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x562>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	0e9b      	lsrs	r3, r3, #26
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f003 021f 	and.w	r2, r3, #31
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	051b      	lsls	r3, r3, #20
 8002b9c:	e018      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x594>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002bb6:	2320      	movs	r3, #32
 8002bb8:	e003      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bbc:	fab3 f383 	clz	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f003 021f 	and.w	r2, r3, #31
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	e080      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d107      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x5b4>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	0e9b      	lsrs	r3, r3, #26
 8002be6:	3301      	adds	r3, #1
 8002be8:	069b      	lsls	r3, r3, #26
 8002bea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bee:	e015      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x5e0>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	e003      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	3301      	adds	r3, #1
 8002c16:	069b      	lsls	r3, r3, #26
 8002c18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x600>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	0e9b      	lsrs	r3, r3, #26
 8002c2e:	3301      	adds	r3, #1
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	2101      	movs	r1, #1
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	e017      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x630>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	61fb      	str	r3, [r7, #28]
  return result;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002c54:	2320      	movs	r3, #32
 8002c56:	e003      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	3301      	adds	r3, #1
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	2101      	movs	r1, #1
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	ea42 0103 	orr.w	r1, r2, r3
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10d      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x65c>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	0e9b      	lsrs	r3, r3, #26
 8002c82:	3301      	adds	r3, #1
 8002c84:	f003 021f 	and.w	r2, r3, #31
 8002c88:	4613      	mov	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3b1e      	subs	r3, #30
 8002c90:	051b      	lsls	r3, r3, #20
 8002c92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c96:	e01d      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x698>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	fa93 f3a3 	rbit	r3, r3
 8002ca4:	613b      	str	r3, [r7, #16]
  return result;
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d103      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002cb0:	2320      	movs	r3, #32
 8002cb2:	e005      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x684>
 8002cb4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	f003 021f 	and.w	r2, r3, #31
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	4413      	add	r3, r2
 8002ccc:	3b1e      	subs	r3, #30
 8002cce:	051b      	lsls	r3, r3, #20
 8002cd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd4:	430b      	orrs	r3, r1
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	6892      	ldr	r2, [r2, #8]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f7ff f89c 	bl	8001e18 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b44      	ldr	r3, [pc, #272]	; (8002df8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d07a      	beq.n	8002de2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cec:	4843      	ldr	r0, [pc, #268]	; (8002dfc <HAL_ADC_ConfigChannel+0x7c0>)
 8002cee:	f7fe fff1 	bl	8001cd4 <LL_ADC_GetCommonPathInternalCh>
 8002cf2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a41      	ldr	r2, [pc, #260]	; (8002e00 <HAL_ADC_ConfigChannel+0x7c4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d12c      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d126      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a3c      	ldr	r2, [pc, #240]	; (8002e04 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d004      	beq.n	8002d20 <HAL_ADC_ConfigChannel+0x6e4>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a3b      	ldr	r2, [pc, #236]	; (8002e08 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d15d      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4834      	ldr	r0, [pc, #208]	; (8002dfc <HAL_ADC_ConfigChannel+0x7c0>)
 8002d2c:	f7fe ffbf 	bl	8001cae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d30:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <HAL_ADC_ConfigChannel+0x7d0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	099b      	lsrs	r3, r3, #6
 8002d36:	4a36      	ldr	r2, [pc, #216]	; (8002e10 <HAL_ADC_ConfigChannel+0x7d4>)
 8002d38:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3c:	099b      	lsrs	r3, r3, #6
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	4613      	mov	r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d4a:	e002      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f9      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d58:	e040      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a2d      	ldr	r2, [pc, #180]	; (8002e14 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d118      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x75a>
 8002d64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d112      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a23      	ldr	r2, [pc, #140]	; (8002e04 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d004      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0x748>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a22      	ldr	r2, [pc, #136]	; (8002e08 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d12d      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	481b      	ldr	r0, [pc, #108]	; (8002dfc <HAL_ADC_ConfigChannel+0x7c0>)
 8002d90:	f7fe ff8d 	bl	8001cae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d94:	e024      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1f      	ldr	r2, [pc, #124]	; (8002e18 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d120      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002da0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d11a      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <HAL_ADC_ConfigChannel+0x7c8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d115      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002db6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	480e      	ldr	r0, [pc, #56]	; (8002dfc <HAL_ADC_ConfigChannel+0x7c0>)
 8002dc2:	f7fe ff74 	bl	8001cae <LL_ADC_SetCommonPathInternalCh>
 8002dc6:	e00c      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dcc:	f043 0220 	orr.w	r2, r3, #32
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002dda:	e002      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ddc:	bf00      	nop
 8002dde:	e000      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002de0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	37d8      	adds	r7, #216	; 0xd8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	80080000 	.word	0x80080000
 8002dfc:	50040300 	.word	0x50040300
 8002e00:	c7520000 	.word	0xc7520000
 8002e04:	50040000 	.word	0x50040000
 8002e08:	50040200 	.word	0x50040200
 8002e0c:	20000080 	.word	0x20000080
 8002e10:	053e2d63 	.word	0x053e2d63
 8002e14:	cb840000 	.word	0xcb840000
 8002e18:	80000001 	.word	0x80000001

08002e1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff f8c3 	bl	8001fb4 <LL_ADC_IsEnabled>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d14d      	bne.n	8002ed0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	4b28      	ldr	r3, [pc, #160]	; (8002edc <ADC_Enable+0xc0>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00d      	beq.n	8002e5e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e46:	f043 0210 	orr.w	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e52:	f043 0201 	orr.w	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e039      	b.n	8002ed2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff f892 	bl	8001f8c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e68:	f7fe fede 	bl	8001c28 <HAL_GetTick>
 8002e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e6e:	e028      	b.n	8002ec2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff f89d 	bl	8001fb4 <LL_ADC_IsEnabled>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d104      	bne.n	8002e8a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff f881 	bl	8001f8c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e8a:	f7fe fecd 	bl	8001c28 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d914      	bls.n	8002ec2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d00d      	beq.n	8002ec2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eaa:	f043 0210 	orr.w	r2, r3, #16
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb6:	f043 0201 	orr.w	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e007      	b.n	8002ed2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d1cf      	bne.n	8002e70 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	8000003f 	.word	0x8000003f

08002ee0 <LL_ADC_IsEnabled>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <LL_ADC_IsEnabled+0x18>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <LL_ADC_IsEnabled+0x1a>
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <LL_ADC_REG_IsConversionOngoing>:
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d101      	bne.n	8002f1e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f2c:	b590      	push	{r4, r7, lr}
 8002f2e:	b09f      	sub	sp, #124	; 0x7c
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e093      	b.n	8003072 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002f52:	2300      	movs	r3, #0
 8002f54:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002f56:	2300      	movs	r3, #0
 8002f58:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a47      	ldr	r2, [pc, #284]	; (800307c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d102      	bne.n	8002f6a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f64:	4b46      	ldr	r3, [pc, #280]	; (8003080 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	e001      	b.n	8002f6e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10b      	bne.n	8002f8c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f78:	f043 0220 	orr.w	r2, r3, #32
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e072      	b.n	8003072 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff ffb9 	bl	8002f06 <LL_ADC_REG_IsConversionOngoing>
 8002f94:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff ffb3 	bl	8002f06 <LL_ADC_REG_IsConversionOngoing>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d154      	bne.n	8003050 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d151      	bne.n	8003050 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fac:	4b35      	ldr	r3, [pc, #212]	; (8003084 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002fae:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d02c      	beq.n	8003012 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fca:	035b      	lsls	r3, r3, #13
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fd4:	4829      	ldr	r0, [pc, #164]	; (800307c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fd6:	f7ff ff83 	bl	8002ee0 <LL_ADC_IsEnabled>
 8002fda:	4604      	mov	r4, r0
 8002fdc:	4828      	ldr	r0, [pc, #160]	; (8003080 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fde:	f7ff ff7f 	bl	8002ee0 <LL_ADC_IsEnabled>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	431c      	orrs	r4, r3
 8002fe6:	4828      	ldr	r0, [pc, #160]	; (8003088 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002fe8:	f7ff ff7a 	bl	8002ee0 <LL_ADC_IsEnabled>
 8002fec:	4603      	mov	r3, r0
 8002fee:	4323      	orrs	r3, r4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d137      	bne.n	8003064 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ffc:	f023 030f 	bic.w	r3, r3, #15
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	6811      	ldr	r1, [r2, #0]
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	6892      	ldr	r2, [r2, #8]
 8003008:	430a      	orrs	r2, r1
 800300a:	431a      	orrs	r2, r3
 800300c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003010:	e028      	b.n	8003064 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800301a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800301e:	4817      	ldr	r0, [pc, #92]	; (800307c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003020:	f7ff ff5e 	bl	8002ee0 <LL_ADC_IsEnabled>
 8003024:	4604      	mov	r4, r0
 8003026:	4816      	ldr	r0, [pc, #88]	; (8003080 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003028:	f7ff ff5a 	bl	8002ee0 <LL_ADC_IsEnabled>
 800302c:	4603      	mov	r3, r0
 800302e:	431c      	orrs	r4, r3
 8003030:	4815      	ldr	r0, [pc, #84]	; (8003088 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003032:	f7ff ff55 	bl	8002ee0 <LL_ADC_IsEnabled>
 8003036:	4603      	mov	r3, r0
 8003038:	4323      	orrs	r3, r4
 800303a:	2b00      	cmp	r3, #0
 800303c:	d112      	bne.n	8003064 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800303e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003046:	f023 030f 	bic.w	r3, r3, #15
 800304a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800304c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800304e:	e009      	b.n	8003064 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003054:	f043 0220 	orr.w	r2, r3, #32
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003062:	e000      	b.n	8003066 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003064:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800306e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003072:	4618      	mov	r0, r3
 8003074:	377c      	adds	r7, #124	; 0x7c
 8003076:	46bd      	mov	sp, r7
 8003078:	bd90      	pop	{r4, r7, pc}
 800307a:	bf00      	nop
 800307c:	50040000 	.word	0x50040000
 8003080:	50040100 	.word	0x50040100
 8003084:	50040300 	.word	0x50040300
 8003088:	50040200 	.word	0x50040200

0800308c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <__NVIC_SetPriorityGrouping+0x44>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030a8:	4013      	ands	r3, r2
 80030aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030be:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <__NVIC_SetPriorityGrouping+0x44>)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	60d3      	str	r3, [r2, #12]
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <__NVIC_GetPriorityGrouping+0x18>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	f003 0307 	and.w	r3, r3, #7
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	db0b      	blt.n	800311a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	f003 021f 	and.w	r2, r3, #31
 8003108:	4907      	ldr	r1, [pc, #28]	; (8003128 <__NVIC_EnableIRQ+0x38>)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	2001      	movs	r0, #1
 8003112:	fa00 f202 	lsl.w	r2, r0, r2
 8003116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	e000e100 	.word	0xe000e100

0800312c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	6039      	str	r1, [r7, #0]
 8003136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313c:	2b00      	cmp	r3, #0
 800313e:	db0a      	blt.n	8003156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	b2da      	uxtb	r2, r3
 8003144:	490c      	ldr	r1, [pc, #48]	; (8003178 <__NVIC_SetPriority+0x4c>)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	0112      	lsls	r2, r2, #4
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	440b      	add	r3, r1
 8003150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003154:	e00a      	b.n	800316c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4908      	ldr	r1, [pc, #32]	; (800317c <__NVIC_SetPriority+0x50>)
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	3b04      	subs	r3, #4
 8003164:	0112      	lsls	r2, r2, #4
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	440b      	add	r3, r1
 800316a:	761a      	strb	r2, [r3, #24]
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000e100 	.word	0xe000e100
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003180:	b480      	push	{r7}
 8003182:	b089      	sub	sp, #36	; 0x24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f1c3 0307 	rsb	r3, r3, #7
 800319a:	2b04      	cmp	r3, #4
 800319c:	bf28      	it	cs
 800319e:	2304      	movcs	r3, #4
 80031a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3304      	adds	r3, #4
 80031a6:	2b06      	cmp	r3, #6
 80031a8:	d902      	bls.n	80031b0 <NVIC_EncodePriority+0x30>
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3b03      	subs	r3, #3
 80031ae:	e000      	b.n	80031b2 <NVIC_EncodePriority+0x32>
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b4:	f04f 32ff 	mov.w	r2, #4294967295
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43da      	mvns	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	401a      	ands	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c8:	f04f 31ff 	mov.w	r1, #4294967295
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	43d9      	mvns	r1, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d8:	4313      	orrs	r3, r2
         );
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3724      	adds	r7, #36	; 0x24
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031f8:	d301      	bcc.n	80031fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031fa:	2301      	movs	r3, #1
 80031fc:	e00f      	b.n	800321e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031fe:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <SysTick_Config+0x40>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3b01      	subs	r3, #1
 8003204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003206:	210f      	movs	r1, #15
 8003208:	f04f 30ff 	mov.w	r0, #4294967295
 800320c:	f7ff ff8e 	bl	800312c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <SysTick_Config+0x40>)
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003216:	4b04      	ldr	r3, [pc, #16]	; (8003228 <SysTick_Config+0x40>)
 8003218:	2207      	movs	r2, #7
 800321a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	e000e010 	.word	0xe000e010

0800322c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ff29 	bl	800308c <__NVIC_SetPriorityGrouping>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	4603      	mov	r3, r0
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003254:	f7ff ff3e 	bl	80030d4 <__NVIC_GetPriorityGrouping>
 8003258:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	6978      	ldr	r0, [r7, #20]
 8003260:	f7ff ff8e 	bl	8003180 <NVIC_EncodePriority>
 8003264:	4602      	mov	r2, r0
 8003266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326a:	4611      	mov	r1, r2
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff5d 	bl	800312c <__NVIC_SetPriority>
}
 8003272:	bf00      	nop
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	4603      	mov	r3, r0
 8003282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff31 	bl	80030f0 <__NVIC_EnableIRQ>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ffa2 	bl	80031e8 <SysTick_Config>
 80032a4:	4603      	mov	r3, r0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e014      	b.n	80032ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	791b      	ldrb	r3, [r3, #4]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d105      	bne.n	80032d6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7fe f9fb 	bl	80016cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	795b      	ldrb	r3, [r3, #5]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_DAC_Start_DMA+0x1e>
 800330e:	2302      	movs	r3, #2
 8003310:	e0ab      	b.n	800346a <HAL_DAC_Start_DMA+0x176>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2201      	movs	r2, #1
 8003316:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2202      	movs	r2, #2
 800331c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d12f      	bne.n	8003384 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4a52      	ldr	r2, [pc, #328]	; (8003474 <HAL_DAC_Start_DMA+0x180>)
 800332a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	4a51      	ldr	r2, [pc, #324]	; (8003478 <HAL_DAC_Start_DMA+0x184>)
 8003332:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4a50      	ldr	r2, [pc, #320]	; (800347c <HAL_DAC_Start_DMA+0x188>)
 800333a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800334a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	2b08      	cmp	r3, #8
 8003350:	d013      	beq.n	800337a <HAL_DAC_Start_DMA+0x86>
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	2b08      	cmp	r3, #8
 8003356:	d845      	bhi.n	80033e4 <HAL_DAC_Start_DMA+0xf0>
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_DAC_Start_DMA+0x72>
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	2b04      	cmp	r3, #4
 8003362:	d005      	beq.n	8003370 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003364:	e03e      	b.n	80033e4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3308      	adds	r3, #8
 800336c:	613b      	str	r3, [r7, #16]
        break;
 800336e:	e03c      	b.n	80033ea <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	613b      	str	r3, [r7, #16]
        break;
 8003378:	e037      	b.n	80033ea <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3310      	adds	r3, #16
 8003380:	613b      	str	r3, [r7, #16]
        break;
 8003382:	e032      	b.n	80033ea <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4a3d      	ldr	r2, [pc, #244]	; (8003480 <HAL_DAC_Start_DMA+0x18c>)
 800338a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4a3c      	ldr	r2, [pc, #240]	; (8003484 <HAL_DAC_Start_DMA+0x190>)
 8003392:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4a3b      	ldr	r2, [pc, #236]	; (8003488 <HAL_DAC_Start_DMA+0x194>)
 800339a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033aa:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d013      	beq.n	80033da <HAL_DAC_Start_DMA+0xe6>
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d817      	bhi.n	80033e8 <HAL_DAC_Start_DMA+0xf4>
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_DAC_Start_DMA+0xd2>
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d005      	beq.n	80033d0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80033c4:	e010      	b.n	80033e8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3314      	adds	r3, #20
 80033cc:	613b      	str	r3, [r7, #16]
        break;
 80033ce:	e00c      	b.n	80033ea <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3318      	adds	r3, #24
 80033d6:	613b      	str	r3, [r7, #16]
        break;
 80033d8:	e007      	b.n	80033ea <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	331c      	adds	r3, #28
 80033e0:	613b      	str	r3, [r7, #16]
        break;
 80033e2:	e002      	b.n	80033ea <HAL_DAC_Start_DMA+0xf6>
        break;
 80033e4:	bf00      	nop
 80033e6:	e000      	b.n	80033ea <HAL_DAC_Start_DMA+0xf6>
        break;
 80033e8:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d111      	bne.n	8003414 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033fe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6898      	ldr	r0, [r3, #8]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	f000 fab9 	bl	8003980 <HAL_DMA_Start_IT>
 800340e:	4603      	mov	r3, r0
 8003410:	75fb      	strb	r3, [r7, #23]
 8003412:	e010      	b.n	8003436 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003422:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	68d8      	ldr	r0, [r3, #12]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	f000 faa7 	bl	8003980 <HAL_DMA_Start_IT>
 8003432:	4603      	mov	r3, r0
 8003434:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800343c:	7dfb      	ldrb	r3, [r7, #23]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10c      	bne.n	800345c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6819      	ldr	r1, [r3, #0]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	2201      	movs	r2, #1
 8003450:	409a      	lsls	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	e005      	b.n	8003468 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f043 0204 	orr.w	r2, r3, #4
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003468:	7dfb      	ldrb	r3, [r7, #23]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	080036fd 	.word	0x080036fd
 8003478:	0800371f 	.word	0x0800371f
 800347c:	0800373b 	.word	0x0800373b
 8003480:	080037a5 	.word	0x080037a5
 8003484:	080037c7 	.word	0x080037c7
 8003488:	080037e3 	.word	0x080037e3

0800348c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	795b      	ldrb	r3, [r3, #5]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_DAC_ConfigChannel+0x1c>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e107      	b.n	80036f4 <HAL_DAC_ConfigChannel+0x22c>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2202      	movs	r2, #2
 80034ee:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d174      	bne.n	80035e2 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80034f8:	f7fe fb96 	bl	8001c28 <HAL_GetTick>
 80034fc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d134      	bne.n	800356e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003504:	e011      	b.n	800352a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003506:	f7fe fb8f 	bl	8001c28 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b01      	cmp	r3, #1
 8003512:	d90a      	bls.n	800352a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f043 0208 	orr.w	r2, r3, #8
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2203      	movs	r2, #3
 8003524:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e0e4      	b.n	80036f4 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1e6      	bne.n	8003506 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003538:	2001      	movs	r0, #1
 800353a:	f7fe fb81 	bl	8001c40 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	6992      	ldr	r2, [r2, #24]
 8003546:	641a      	str	r2, [r3, #64]	; 0x40
 8003548:	e01e      	b.n	8003588 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800354a:	f7fe fb6d 	bl	8001c28 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d90a      	bls.n	800356e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f043 0208 	orr.w	r2, r3, #8
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2203      	movs	r2, #3
 8003568:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e0c2      	b.n	80036f4 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003574:	2b00      	cmp	r3, #0
 8003576:	dbe8      	blt.n	800354a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003578:	2001      	movs	r0, #1
 800357a:	f7fe fb61 	bl	8001c40 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	6992      	ldr	r2, [r2, #24]
 8003586:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003598:	fa01 f303 	lsl.w	r3, r1, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	ea02 0103 	and.w	r1, r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f003 0310 	and.w	r3, r3, #16
 80035c2:	21ff      	movs	r1, #255	; 0xff
 80035c4:	fa01 f303 	lsl.w	r3, r1, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	ea02 0103 	and.w	r1, r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	6a1a      	ldr	r2, [r3, #32]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	409a      	lsls	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d11d      	bne.n	8003626 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	221f      	movs	r2, #31
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	2207      	movs	r2, #7
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43db      	mvns	r3, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4013      	ands	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	431a      	orrs	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6819      	ldr	r1, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43da      	mvns	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	400a      	ands	r2, r1
 800368a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	f640 72fc 	movw	r2, #4092	; 0xffc
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4013      	ands	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4313      	orrs	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6819      	ldr	r1, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	22c0      	movs	r2, #192	; 0xc0
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43da      	mvns	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	400a      	ands	r2, r1
 80036e4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3720      	adds	r7, #32
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f7ff febe 	bl	800348c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	711a      	strb	r2, [r3, #4]
}
 8003716:	bf00      	nop
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f7ff feb7 	bl	80034a0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f043 0204 	orr.w	r2, r3, #4
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f7ff fead 	bl	80034b4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	711a      	strb	r2, [r3, #4]
}
 8003760:	bf00      	nop
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f7ff ffd8 	bl	8003768 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2201      	movs	r2, #1
 80037bc:	711a      	strb	r2, [r3, #4]
}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f7ff ffd1 	bl	800377c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f043 0204 	orr.w	r2, r3, #4
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f7ff ffc7 	bl	8003790 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	711a      	strb	r2, [r3, #4]
}
 8003808:	bf00      	nop
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e098      	b.n	8003954 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	4b4d      	ldr	r3, [pc, #308]	; (8003960 <HAL_DMA_Init+0x150>)
 800382a:	429a      	cmp	r2, r3
 800382c:	d80f      	bhi.n	800384e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	4b4b      	ldr	r3, [pc, #300]	; (8003964 <HAL_DMA_Init+0x154>)
 8003836:	4413      	add	r3, r2
 8003838:	4a4b      	ldr	r2, [pc, #300]	; (8003968 <HAL_DMA_Init+0x158>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	091b      	lsrs	r3, r3, #4
 8003840:	009a      	lsls	r2, r3, #2
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a48      	ldr	r2, [pc, #288]	; (800396c <HAL_DMA_Init+0x15c>)
 800384a:	641a      	str	r2, [r3, #64]	; 0x40
 800384c:	e00e      	b.n	800386c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	4b46      	ldr	r3, [pc, #280]	; (8003970 <HAL_DMA_Init+0x160>)
 8003856:	4413      	add	r3, r2
 8003858:	4a43      	ldr	r2, [pc, #268]	; (8003968 <HAL_DMA_Init+0x158>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	091b      	lsrs	r3, r3, #4
 8003860:	009a      	lsls	r2, r3, #2
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a42      	ldr	r2, [pc, #264]	; (8003974 <HAL_DMA_Init+0x164>)
 800386a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003886:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800389c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038c6:	d039      	beq.n	800393c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	4a27      	ldr	r2, [pc, #156]	; (800396c <HAL_DMA_Init+0x15c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d11a      	bne.n	8003908 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038d2:	4b29      	ldr	r3, [pc, #164]	; (8003978 <HAL_DMA_Init+0x168>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	f003 031c 	and.w	r3, r3, #28
 80038de:	210f      	movs	r1, #15
 80038e0:	fa01 f303 	lsl.w	r3, r1, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	4924      	ldr	r1, [pc, #144]	; (8003978 <HAL_DMA_Init+0x168>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80038ec:	4b22      	ldr	r3, [pc, #136]	; (8003978 <HAL_DMA_Init+0x168>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6859      	ldr	r1, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	f003 031c 	and.w	r3, r3, #28
 80038fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003900:	491d      	ldr	r1, [pc, #116]	; (8003978 <HAL_DMA_Init+0x168>)
 8003902:	4313      	orrs	r3, r2
 8003904:	600b      	str	r3, [r1, #0]
 8003906:	e019      	b.n	800393c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003908:	4b1c      	ldr	r3, [pc, #112]	; (800397c <HAL_DMA_Init+0x16c>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	f003 031c 	and.w	r3, r3, #28
 8003914:	210f      	movs	r1, #15
 8003916:	fa01 f303 	lsl.w	r3, r1, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	4917      	ldr	r1, [pc, #92]	; (800397c <HAL_DMA_Init+0x16c>)
 800391e:	4013      	ands	r3, r2
 8003920:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003922:	4b16      	ldr	r3, [pc, #88]	; (800397c <HAL_DMA_Init+0x16c>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6859      	ldr	r1, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f003 031c 	and.w	r3, r3, #28
 8003932:	fa01 f303 	lsl.w	r3, r1, r3
 8003936:	4911      	ldr	r1, [pc, #68]	; (800397c <HAL_DMA_Init+0x16c>)
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	40020407 	.word	0x40020407
 8003964:	bffdfff8 	.word	0xbffdfff8
 8003968:	cccccccd 	.word	0xcccccccd
 800396c:	40020000 	.word	0x40020000
 8003970:	bffdfbf8 	.word	0xbffdfbf8
 8003974:	40020400 	.word	0x40020400
 8003978:	400200a8 	.word	0x400200a8
 800397c:	400204a8 	.word	0x400204a8

08003980 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_DMA_Start_IT+0x20>
 800399c:	2302      	movs	r3, #2
 800399e:	e04b      	b.n	8003a38 <HAL_DMA_Start_IT+0xb8>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d13a      	bne.n	8003a2a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0201 	bic.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	68b9      	ldr	r1, [r7, #8]
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f8e0 	bl	8003b9e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 020e 	orr.w	r2, r2, #14
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e00f      	b.n	8003a18 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0204 	bic.w	r2, r2, #4
 8003a06:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 020a 	orr.w	r2, r2, #10
 8003a16:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	e005      	b.n	8003a36 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a32:	2302      	movs	r3, #2
 8003a34:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	f003 031c 	and.w	r3, r3, #28
 8003a60:	2204      	movs	r2, #4
 8003a62:	409a      	lsls	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d026      	beq.n	8003aba <HAL_DMA_IRQHandler+0x7a>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f003 0304 	and.w	r3, r3, #4
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d021      	beq.n	8003aba <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d107      	bne.n	8003a94 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0204 	bic.w	r2, r2, #4
 8003a92:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a98:	f003 021c 	and.w	r2, r3, #28
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	2104      	movs	r1, #4
 8003aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d071      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003ab8:	e06c      	b.n	8003b94 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	f003 031c 	and.w	r3, r3, #28
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d02e      	beq.n	8003b2c <HAL_DMA_IRQHandler+0xec>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d029      	beq.n	8003b2c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10b      	bne.n	8003afe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 020a 	bic.w	r2, r2, #10
 8003af4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	f003 021c 	and.w	r2, r3, #28
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	2102      	movs	r1, #2
 8003b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b10:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d038      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b2a:	e033      	b.n	8003b94 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b30:	f003 031c 	and.w	r3, r3, #28
 8003b34:	2208      	movs	r2, #8
 8003b36:	409a      	lsls	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d02a      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x156>
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d025      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 020e 	bic.w	r2, r2, #14
 8003b58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	f003 021c 	and.w	r2, r3, #28
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	2101      	movs	r1, #1
 8003b68:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
}
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb0:	f003 021c 	and.w	r2, r3, #28
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	2101      	movs	r1, #1
 8003bba:	fa01 f202 	lsl.w	r2, r1, r2
 8003bbe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b10      	cmp	r3, #16
 8003bce:	d108      	bne.n	8003be2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003be0:	e007      	b.n	8003bf2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	60da      	str	r2, [r3, #12]
}
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c0e:	e17f      	b.n	8003f10 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	2101      	movs	r1, #1
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 8171 	beq.w	8003f0a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d00b      	beq.n	8003c48 <HAL_GPIO_Init+0x48>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d007      	beq.n	8003c48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c3c:	2b11      	cmp	r3, #17
 8003c3e:	d003      	beq.n	8003c48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b12      	cmp	r3, #18
 8003c46:	d130      	bne.n	8003caa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	2203      	movs	r2, #3
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c7e:	2201      	movs	r2, #1
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	091b      	lsrs	r3, r3, #4
 8003c94:	f003 0201 	and.w	r2, r3, #1
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d118      	bne.n	8003ce8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	08db      	lsrs	r3, r3, #3
 8003cd2:	f003 0201 	and.w	r2, r3, #1
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d003      	beq.n	8003d28 <HAL_GPIO_Init+0x128>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b12      	cmp	r3, #18
 8003d26:	d123      	bne.n	8003d70 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	08da      	lsrs	r2, r3, #3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3208      	adds	r2, #8
 8003d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	220f      	movs	r2, #15
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	08da      	lsrs	r2, r3, #3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3208      	adds	r2, #8
 8003d6a:	6939      	ldr	r1, [r7, #16]
 8003d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	43db      	mvns	r3, r3
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4013      	ands	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 0203 	and.w	r2, r3, #3
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 80ac 	beq.w	8003f0a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003db2:	4b5f      	ldr	r3, [pc, #380]	; (8003f30 <HAL_GPIO_Init+0x330>)
 8003db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db6:	4a5e      	ldr	r2, [pc, #376]	; (8003f30 <HAL_GPIO_Init+0x330>)
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	6613      	str	r3, [r2, #96]	; 0x60
 8003dbe:	4b5c      	ldr	r3, [pc, #368]	; (8003f30 <HAL_GPIO_Init+0x330>)
 8003dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003dca:	4a5a      	ldr	r2, [pc, #360]	; (8003f34 <HAL_GPIO_Init+0x334>)
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	089b      	lsrs	r3, r3, #2
 8003dd0:	3302      	adds	r3, #2
 8003dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	220f      	movs	r2, #15
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4013      	ands	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003df4:	d025      	beq.n	8003e42 <HAL_GPIO_Init+0x242>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a4f      	ldr	r2, [pc, #316]	; (8003f38 <HAL_GPIO_Init+0x338>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d01f      	beq.n	8003e3e <HAL_GPIO_Init+0x23e>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a4e      	ldr	r2, [pc, #312]	; (8003f3c <HAL_GPIO_Init+0x33c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d019      	beq.n	8003e3a <HAL_GPIO_Init+0x23a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a4d      	ldr	r2, [pc, #308]	; (8003f40 <HAL_GPIO_Init+0x340>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d013      	beq.n	8003e36 <HAL_GPIO_Init+0x236>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a4c      	ldr	r2, [pc, #304]	; (8003f44 <HAL_GPIO_Init+0x344>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00d      	beq.n	8003e32 <HAL_GPIO_Init+0x232>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a4b      	ldr	r2, [pc, #300]	; (8003f48 <HAL_GPIO_Init+0x348>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d007      	beq.n	8003e2e <HAL_GPIO_Init+0x22e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a4a      	ldr	r2, [pc, #296]	; (8003f4c <HAL_GPIO_Init+0x34c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d101      	bne.n	8003e2a <HAL_GPIO_Init+0x22a>
 8003e26:	2306      	movs	r3, #6
 8003e28:	e00c      	b.n	8003e44 <HAL_GPIO_Init+0x244>
 8003e2a:	2307      	movs	r3, #7
 8003e2c:	e00a      	b.n	8003e44 <HAL_GPIO_Init+0x244>
 8003e2e:	2305      	movs	r3, #5
 8003e30:	e008      	b.n	8003e44 <HAL_GPIO_Init+0x244>
 8003e32:	2304      	movs	r3, #4
 8003e34:	e006      	b.n	8003e44 <HAL_GPIO_Init+0x244>
 8003e36:	2303      	movs	r3, #3
 8003e38:	e004      	b.n	8003e44 <HAL_GPIO_Init+0x244>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e002      	b.n	8003e44 <HAL_GPIO_Init+0x244>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <HAL_GPIO_Init+0x244>
 8003e42:	2300      	movs	r3, #0
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	f002 0203 	and.w	r2, r2, #3
 8003e4a:	0092      	lsls	r2, r2, #2
 8003e4c:	4093      	lsls	r3, r2
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e54:	4937      	ldr	r1, [pc, #220]	; (8003f34 <HAL_GPIO_Init+0x334>)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	089b      	lsrs	r3, r3, #2
 8003e5a:	3302      	adds	r3, #2
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e62:	4b3b      	ldr	r3, [pc, #236]	; (8003f50 <HAL_GPIO_Init+0x350>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e86:	4a32      	ldr	r2, [pc, #200]	; (8003f50 <HAL_GPIO_Init+0x350>)
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003e8c:	4b30      	ldr	r3, [pc, #192]	; (8003f50 <HAL_GPIO_Init+0x350>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	43db      	mvns	r3, r3
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003eb0:	4a27      	ldr	r2, [pc, #156]	; (8003f50 <HAL_GPIO_Init+0x350>)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003eb6:	4b26      	ldr	r3, [pc, #152]	; (8003f50 <HAL_GPIO_Init+0x350>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003eda:	4a1d      	ldr	r2, [pc, #116]	; (8003f50 <HAL_GPIO_Init+0x350>)
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ee0:	4b1b      	ldr	r3, [pc, #108]	; (8003f50 <HAL_GPIO_Init+0x350>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4013      	ands	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f04:	4a12      	ldr	r2, [pc, #72]	; (8003f50 <HAL_GPIO_Init+0x350>)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f47f ae78 	bne.w	8003c10 <HAL_GPIO_Init+0x10>
  }
}
 8003f20:	bf00      	nop
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40010000 	.word	0x40010000
 8003f38:	48000400 	.word	0x48000400
 8003f3c:	48000800 	.word	0x48000800
 8003f40:	48000c00 	.word	0x48000c00
 8003f44:	48001000 	.word	0x48001000
 8003f48:	48001400 	.word	0x48001400
 8003f4c:	48001800 	.word	0x48001800
 8003f50:	40010400 	.word	0x40010400

08003f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	807b      	strh	r3, [r7, #2]
 8003f60:	4613      	mov	r3, r2
 8003f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f64:	787b      	ldrb	r3, [r7, #1]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f6a:	887a      	ldrh	r2, [r7, #2]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f70:	e002      	b.n	8003f78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f72:	887a      	ldrh	r2, [r7, #2]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f88:	4b04      	ldr	r3, [pc, #16]	; (8003f9c <HAL_PWREx_GetVoltageRange+0x18>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40007000 	.word	0x40007000

08003fa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fae:	d130      	bne.n	8004012 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fb0:	4b23      	ldr	r3, [pc, #140]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fbc:	d038      	beq.n	8004030 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fbe:	4b20      	ldr	r3, [pc, #128]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fc6:	4a1e      	ldr	r2, [pc, #120]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fcc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fce:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2232      	movs	r2, #50	; 0x32
 8003fd4:	fb02 f303 	mul.w	r3, r2, r3
 8003fd8:	4a1b      	ldr	r2, [pc, #108]	; (8004048 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003fda:	fba2 2303 	umull	r2, r3, r2, r3
 8003fde:	0c9b      	lsrs	r3, r3, #18
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fe4:	e002      	b.n	8003fec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fec:	4b14      	ldr	r3, [pc, #80]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff8:	d102      	bne.n	8004000 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1f2      	bne.n	8003fe6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004000:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400c:	d110      	bne.n	8004030 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e00f      	b.n	8004032 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800401a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401e:	d007      	beq.n	8004030 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004020:	4b07      	ldr	r3, [pc, #28]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004028:	4a05      	ldr	r2, [pc, #20]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800402a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800402e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40007000 	.word	0x40007000
 8004044:	20000080 	.word	0x20000080
 8004048:	431bde83 	.word	0x431bde83

0800404c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e3d4      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800405e:	4ba1      	ldr	r3, [pc, #644]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
 8004066:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004068:	4b9e      	ldr	r3, [pc, #632]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0310 	and.w	r3, r3, #16
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 80e4 	beq.w	8004248 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d007      	beq.n	8004096 <HAL_RCC_OscConfig+0x4a>
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b0c      	cmp	r3, #12
 800408a:	f040 808b 	bne.w	80041a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b01      	cmp	r3, #1
 8004092:	f040 8087 	bne.w	80041a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004096:	4b93      	ldr	r3, [pc, #588]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_RCC_OscConfig+0x62>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e3ac      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1a      	ldr	r2, [r3, #32]
 80040b2:	4b8c      	ldr	r3, [pc, #560]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d004      	beq.n	80040c8 <HAL_RCC_OscConfig+0x7c>
 80040be:	4b89      	ldr	r3, [pc, #548]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c6:	e005      	b.n	80040d4 <HAL_RCC_OscConfig+0x88>
 80040c8:	4b86      	ldr	r3, [pc, #536]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80040ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ce:	091b      	lsrs	r3, r3, #4
 80040d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d223      	bcs.n	8004120 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fd41 	bl	8004b64 <RCC_SetFlashLatencyFromMSIRange>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e38d      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ec:	4b7d      	ldr	r3, [pc, #500]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a7c      	ldr	r2, [pc, #496]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80040f2:	f043 0308 	orr.w	r3, r3, #8
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	4b7a      	ldr	r3, [pc, #488]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	4977      	ldr	r1, [pc, #476]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 8004106:	4313      	orrs	r3, r2
 8004108:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800410a:	4b76      	ldr	r3, [pc, #472]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	021b      	lsls	r3, r3, #8
 8004118:	4972      	ldr	r1, [pc, #456]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 800411a:	4313      	orrs	r3, r2
 800411c:	604b      	str	r3, [r1, #4]
 800411e:	e025      	b.n	800416c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004120:	4b70      	ldr	r3, [pc, #448]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a6f      	ldr	r2, [pc, #444]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 8004126:	f043 0308 	orr.w	r3, r3, #8
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	4b6d      	ldr	r3, [pc, #436]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	496a      	ldr	r1, [pc, #424]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 800413a:	4313      	orrs	r3, r2
 800413c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800413e:	4b69      	ldr	r3, [pc, #420]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	4965      	ldr	r1, [pc, #404]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 800414e:	4313      	orrs	r3, r2
 8004150:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d109      	bne.n	800416c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fd01 	bl	8004b64 <RCC_SetFlashLatencyFromMSIRange>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e34d      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800416c:	f000 fc36 	bl	80049dc <HAL_RCC_GetSysClockFreq>
 8004170:	4602      	mov	r2, r0
 8004172:	4b5c      	ldr	r3, [pc, #368]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	091b      	lsrs	r3, r3, #4
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	495a      	ldr	r1, [pc, #360]	; (80042e8 <HAL_RCC_OscConfig+0x29c>)
 800417e:	5ccb      	ldrb	r3, [r1, r3]
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	fa22 f303 	lsr.w	r3, r2, r3
 8004188:	4a58      	ldr	r2, [pc, #352]	; (80042ec <HAL_RCC_OscConfig+0x2a0>)
 800418a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800418c:	4b58      	ldr	r3, [pc, #352]	; (80042f0 <HAL_RCC_OscConfig+0x2a4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f7fd fcf9 	bl	8001b88 <HAL_InitTick>
 8004196:	4603      	mov	r3, r0
 8004198:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800419a:	7bfb      	ldrb	r3, [r7, #15]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d052      	beq.n	8004246 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	e331      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d032      	beq.n	8004212 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041ac:	4b4d      	ldr	r3, [pc, #308]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a4c      	ldr	r2, [pc, #304]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041b8:	f7fd fd36 	bl	8001c28 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041c0:	f7fd fd32 	bl	8001c28 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e31a      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041d2:	4b44      	ldr	r3, [pc, #272]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041de:	4b41      	ldr	r3, [pc, #260]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a40      	ldr	r2, [pc, #256]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80041e4:	f043 0308 	orr.w	r3, r3, #8
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	4b3e      	ldr	r3, [pc, #248]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	493b      	ldr	r1, [pc, #236]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041fc:	4b39      	ldr	r3, [pc, #228]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	4936      	ldr	r1, [pc, #216]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 800420c:	4313      	orrs	r3, r2
 800420e:	604b      	str	r3, [r1, #4]
 8004210:	e01a      	b.n	8004248 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004212:	4b34      	ldr	r3, [pc, #208]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a33      	ldr	r2, [pc, #204]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 8004218:	f023 0301 	bic.w	r3, r3, #1
 800421c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800421e:	f7fd fd03 	bl	8001c28 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004226:	f7fd fcff 	bl	8001c28 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e2e7      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004238:	4b2a      	ldr	r3, [pc, #168]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f0      	bne.n	8004226 <HAL_RCC_OscConfig+0x1da>
 8004244:	e000      	b.n	8004248 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004246:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d074      	beq.n	800433e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b08      	cmp	r3, #8
 8004258:	d005      	beq.n	8004266 <HAL_RCC_OscConfig+0x21a>
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	2b0c      	cmp	r3, #12
 800425e:	d10e      	bne.n	800427e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2b03      	cmp	r3, #3
 8004264:	d10b      	bne.n	800427e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004266:	4b1f      	ldr	r3, [pc, #124]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d064      	beq.n	800433c <HAL_RCC_OscConfig+0x2f0>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d160      	bne.n	800433c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e2c4      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004286:	d106      	bne.n	8004296 <HAL_RCC_OscConfig+0x24a>
 8004288:	4b16      	ldr	r3, [pc, #88]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a15      	ldr	r2, [pc, #84]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 800428e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	e01d      	b.n	80042d2 <HAL_RCC_OscConfig+0x286>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800429e:	d10c      	bne.n	80042ba <HAL_RCC_OscConfig+0x26e>
 80042a0:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a0f      	ldr	r2, [pc, #60]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80042a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a0c      	ldr	r2, [pc, #48]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80042b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	e00b      	b.n	80042d2 <HAL_RCC_OscConfig+0x286>
 80042ba:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a09      	ldr	r2, [pc, #36]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80042c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a06      	ldr	r2, [pc, #24]	; (80042e4 <HAL_RCC_OscConfig+0x298>)
 80042cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d01c      	beq.n	8004314 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042da:	f7fd fca5 	bl	8001c28 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042e0:	e011      	b.n	8004306 <HAL_RCC_OscConfig+0x2ba>
 80042e2:	bf00      	nop
 80042e4:	40021000 	.word	0x40021000
 80042e8:	080075f0 	.word	0x080075f0
 80042ec:	20000080 	.word	0x20000080
 80042f0:	20000084 	.word	0x20000084
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f4:	f7fd fc98 	bl	8001c28 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b64      	cmp	r3, #100	; 0x64
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e280      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004306:	4baf      	ldr	r3, [pc, #700]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0f0      	beq.n	80042f4 <HAL_RCC_OscConfig+0x2a8>
 8004312:	e014      	b.n	800433e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fd fc88 	bl	8001c28 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800431c:	f7fd fc84 	bl	8001c28 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	; 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e26c      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800432e:	4ba5      	ldr	r3, [pc, #660]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x2d0>
 800433a:	e000      	b.n	800433e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800433c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d060      	beq.n	800440c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b04      	cmp	r3, #4
 800434e:	d005      	beq.n	800435c <HAL_RCC_OscConfig+0x310>
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	2b0c      	cmp	r3, #12
 8004354:	d119      	bne.n	800438a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d116      	bne.n	800438a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800435c:	4b99      	ldr	r3, [pc, #612]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_RCC_OscConfig+0x328>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e249      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004374:	4b93      	ldr	r3, [pc, #588]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	061b      	lsls	r3, r3, #24
 8004382:	4990      	ldr	r1, [pc, #576]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 8004384:	4313      	orrs	r3, r2
 8004386:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004388:	e040      	b.n	800440c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d023      	beq.n	80043da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004392:	4b8c      	ldr	r3, [pc, #560]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a8b      	ldr	r2, [pc, #556]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 8004398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800439c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439e:	f7fd fc43 	bl	8001c28 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a6:	f7fd fc3f 	bl	8001c28 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e227      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043b8:	4b82      	ldr	r3, [pc, #520]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f0      	beq.n	80043a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c4:	4b7f      	ldr	r3, [pc, #508]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	061b      	lsls	r3, r3, #24
 80043d2:	497c      	ldr	r1, [pc, #496]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]
 80043d8:	e018      	b.n	800440c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043da:	4b7a      	ldr	r3, [pc, #488]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a79      	ldr	r2, [pc, #484]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 80043e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e6:	f7fd fc1f 	bl	8001c28 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ee:	f7fd fc1b 	bl	8001c28 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e203      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004400:	4b70      	ldr	r3, [pc, #448]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1f0      	bne.n	80043ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d03c      	beq.n	8004492 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01c      	beq.n	800445a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004420:	4b68      	ldr	r3, [pc, #416]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 8004422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004426:	4a67      	ldr	r2, [pc, #412]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 8004428:	f043 0301 	orr.w	r3, r3, #1
 800442c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004430:	f7fd fbfa 	bl	8001c28 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004438:	f7fd fbf6 	bl	8001c28 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e1de      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800444a:	4b5e      	ldr	r3, [pc, #376]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 800444c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0ef      	beq.n	8004438 <HAL_RCC_OscConfig+0x3ec>
 8004458:	e01b      	b.n	8004492 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800445a:	4b5a      	ldr	r3, [pc, #360]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 800445c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004460:	4a58      	ldr	r2, [pc, #352]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 8004462:	f023 0301 	bic.w	r3, r3, #1
 8004466:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446a:	f7fd fbdd 	bl	8001c28 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004472:	f7fd fbd9 	bl	8001c28 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e1c1      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004484:	4b4f      	ldr	r3, [pc, #316]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 8004486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1ef      	bne.n	8004472 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 80a6 	beq.w	80045ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044a0:	2300      	movs	r3, #0
 80044a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80044a4:	4b47      	ldr	r3, [pc, #284]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10d      	bne.n	80044cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b0:	4b44      	ldr	r3, [pc, #272]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	4a43      	ldr	r2, [pc, #268]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 80044b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ba:	6593      	str	r3, [r2, #88]	; 0x58
 80044bc:	4b41      	ldr	r3, [pc, #260]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c8:	2301      	movs	r3, #1
 80044ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044cc:	4b3e      	ldr	r3, [pc, #248]	; (80045c8 <HAL_RCC_OscConfig+0x57c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d118      	bne.n	800450a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044d8:	4b3b      	ldr	r3, [pc, #236]	; (80045c8 <HAL_RCC_OscConfig+0x57c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a3a      	ldr	r2, [pc, #232]	; (80045c8 <HAL_RCC_OscConfig+0x57c>)
 80044de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e4:	f7fd fba0 	bl	8001c28 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ec:	f7fd fb9c 	bl	8001c28 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e184      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044fe:	4b32      	ldr	r3, [pc, #200]	; (80045c8 <HAL_RCC_OscConfig+0x57c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d108      	bne.n	8004524 <HAL_RCC_OscConfig+0x4d8>
 8004512:	4b2c      	ldr	r3, [pc, #176]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004518:	4a2a      	ldr	r2, [pc, #168]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004522:	e024      	b.n	800456e <HAL_RCC_OscConfig+0x522>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b05      	cmp	r3, #5
 800452a:	d110      	bne.n	800454e <HAL_RCC_OscConfig+0x502>
 800452c:	4b25      	ldr	r3, [pc, #148]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004532:	4a24      	ldr	r2, [pc, #144]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 8004534:	f043 0304 	orr.w	r3, r3, #4
 8004538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800453c:	4b21      	ldr	r3, [pc, #132]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004542:	4a20      	ldr	r2, [pc, #128]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800454c:	e00f      	b.n	800456e <HAL_RCC_OscConfig+0x522>
 800454e:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 8004550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004554:	4a1b      	ldr	r2, [pc, #108]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800455e:	4b19      	ldr	r3, [pc, #100]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004564:	4a17      	ldr	r2, [pc, #92]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 8004566:	f023 0304 	bic.w	r3, r3, #4
 800456a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d016      	beq.n	80045a4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004576:	f7fd fb57 	bl	8001c28 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800457c:	e00a      	b.n	8004594 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457e:	f7fd fb53 	bl	8001c28 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	f241 3288 	movw	r2, #5000	; 0x1388
 800458c:	4293      	cmp	r3, r2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e139      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004594:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <HAL_RCC_OscConfig+0x578>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0ed      	beq.n	800457e <HAL_RCC_OscConfig+0x532>
 80045a2:	e01a      	b.n	80045da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a4:	f7fd fb40 	bl	8001c28 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045aa:	e00f      	b.n	80045cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ac:	f7fd fb3c 	bl	8001c28 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d906      	bls.n	80045cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e122      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045cc:	4b90      	ldr	r3, [pc, #576]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e8      	bne.n	80045ac <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045da:	7ffb      	ldrb	r3, [r7, #31]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d105      	bne.n	80045ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045e0:	4b8b      	ldr	r3, [pc, #556]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 80045e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e4:	4a8a      	ldr	r2, [pc, #552]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 80045e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 8108 	beq.w	8004806 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	f040 80d0 	bne.w	80047a0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004600:	4b83      	ldr	r3, [pc, #524]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f003 0203 	and.w	r2, r3, #3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	429a      	cmp	r2, r3
 8004612:	d130      	bne.n	8004676 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	3b01      	subs	r3, #1
 8004620:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004622:	429a      	cmp	r2, r3
 8004624:	d127      	bne.n	8004676 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004630:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004632:	429a      	cmp	r2, r3
 8004634:	d11f      	bne.n	8004676 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004640:	2a07      	cmp	r2, #7
 8004642:	bf14      	ite	ne
 8004644:	2201      	movne	r2, #1
 8004646:	2200      	moveq	r2, #0
 8004648:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800464a:	4293      	cmp	r3, r2
 800464c:	d113      	bne.n	8004676 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004658:	085b      	lsrs	r3, r3, #1
 800465a:	3b01      	subs	r3, #1
 800465c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800465e:	429a      	cmp	r2, r3
 8004660:	d109      	bne.n	8004676 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	085b      	lsrs	r3, r3, #1
 800466e:	3b01      	subs	r3, #1
 8004670:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004672:	429a      	cmp	r2, r3
 8004674:	d06e      	beq.n	8004754 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	2b0c      	cmp	r3, #12
 800467a:	d069      	beq.n	8004750 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800467c:	4b64      	ldr	r3, [pc, #400]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d105      	bne.n	8004694 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004688:	4b61      	ldr	r3, [pc, #388]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e0b7      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004698:	4b5d      	ldr	r3, [pc, #372]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a5c      	ldr	r2, [pc, #368]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 800469e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046a4:	f7fd fac0 	bl	8001c28 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fd fabc 	bl	8001c28 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e0a4      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046be:	4b54      	ldr	r3, [pc, #336]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ca:	4b51      	ldr	r3, [pc, #324]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	4b51      	ldr	r3, [pc, #324]	; (8004814 <HAL_RCC_OscConfig+0x7c8>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046da:	3a01      	subs	r2, #1
 80046dc:	0112      	lsls	r2, r2, #4
 80046de:	4311      	orrs	r1, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046e4:	0212      	lsls	r2, r2, #8
 80046e6:	4311      	orrs	r1, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046ec:	0852      	lsrs	r2, r2, #1
 80046ee:	3a01      	subs	r2, #1
 80046f0:	0552      	lsls	r2, r2, #21
 80046f2:	4311      	orrs	r1, r2
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046f8:	0852      	lsrs	r2, r2, #1
 80046fa:	3a01      	subs	r2, #1
 80046fc:	0652      	lsls	r2, r2, #25
 80046fe:	4311      	orrs	r1, r2
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004704:	0912      	lsrs	r2, r2, #4
 8004706:	0452      	lsls	r2, r2, #17
 8004708:	430a      	orrs	r2, r1
 800470a:	4941      	ldr	r1, [pc, #260]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 800470c:	4313      	orrs	r3, r2
 800470e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004710:	4b3f      	ldr	r3, [pc, #252]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a3e      	ldr	r2, [pc, #248]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 8004716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800471a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800471c:	4b3c      	ldr	r3, [pc, #240]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4a3b      	ldr	r2, [pc, #236]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 8004722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004726:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004728:	f7fd fa7e 	bl	8001c28 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004730:	f7fd fa7a 	bl	8001c28 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e062      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004742:	4b33      	ldr	r3, [pc, #204]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f0      	beq.n	8004730 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800474e:	e05a      	b.n	8004806 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e059      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004754:	4b2e      	ldr	r3, [pc, #184]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d152      	bne.n	8004806 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004760:	4b2b      	ldr	r3, [pc, #172]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a2a      	ldr	r2, [pc, #168]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 8004766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800476a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800476c:	4b28      	ldr	r3, [pc, #160]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4a27      	ldr	r2, [pc, #156]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 8004772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004776:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004778:	f7fd fa56 	bl	8001c28 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004780:	f7fd fa52 	bl	8001c28 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e03a      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004792:	4b1f      	ldr	r3, [pc, #124]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x734>
 800479e:	e032      	b.n	8004806 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	2b0c      	cmp	r3, #12
 80047a4:	d02d      	beq.n	8004802 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a6:	4b1a      	ldr	r3, [pc, #104]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a19      	ldr	r2, [pc, #100]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 80047ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047b0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80047b2:	4b17      	ldr	r3, [pc, #92]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d105      	bne.n	80047ca <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80047be:	4b14      	ldr	r3, [pc, #80]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	4a13      	ldr	r2, [pc, #76]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 80047c4:	f023 0303 	bic.w	r3, r3, #3
 80047c8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80047ca:	4b11      	ldr	r3, [pc, #68]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	4a10      	ldr	r2, [pc, #64]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 80047d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80047d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047da:	f7fd fa25 	bl	8001c28 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e2:	f7fd fa21 	bl	8001c28 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e009      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047f4:	4b06      	ldr	r3, [pc, #24]	; (8004810 <HAL_RCC_OscConfig+0x7c4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1f0      	bne.n	80047e2 <HAL_RCC_OscConfig+0x796>
 8004800:	e001      	b.n	8004806 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3720      	adds	r7, #32
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40021000 	.word	0x40021000
 8004814:	f99d808c 	.word	0xf99d808c

08004818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0c8      	b.n	80049be <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800482c:	4b66      	ldr	r3, [pc, #408]	; (80049c8 <HAL_RCC_ClockConfig+0x1b0>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d910      	bls.n	800485c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483a:	4b63      	ldr	r3, [pc, #396]	; (80049c8 <HAL_RCC_ClockConfig+0x1b0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f023 0207 	bic.w	r2, r3, #7
 8004842:	4961      	ldr	r1, [pc, #388]	; (80049c8 <HAL_RCC_ClockConfig+0x1b0>)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	4313      	orrs	r3, r2
 8004848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484a:	4b5f      	ldr	r3, [pc, #380]	; (80049c8 <HAL_RCC_ClockConfig+0x1b0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d001      	beq.n	800485c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0b0      	b.n	80049be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d04c      	beq.n	8004902 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b03      	cmp	r3, #3
 800486e:	d107      	bne.n	8004880 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004870:	4b56      	ldr	r3, [pc, #344]	; (80049cc <HAL_RCC_ClockConfig+0x1b4>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d121      	bne.n	80048c0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e09e      	b.n	80049be <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d107      	bne.n	8004898 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004888:	4b50      	ldr	r3, [pc, #320]	; (80049cc <HAL_RCC_ClockConfig+0x1b4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d115      	bne.n	80048c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e092      	b.n	80049be <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d107      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048a0:	4b4a      	ldr	r3, [pc, #296]	; (80049cc <HAL_RCC_ClockConfig+0x1b4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d109      	bne.n	80048c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e086      	b.n	80049be <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048b0:	4b46      	ldr	r3, [pc, #280]	; (80049cc <HAL_RCC_ClockConfig+0x1b4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e07e      	b.n	80049be <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048c0:	4b42      	ldr	r3, [pc, #264]	; (80049cc <HAL_RCC_ClockConfig+0x1b4>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f023 0203 	bic.w	r2, r3, #3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	493f      	ldr	r1, [pc, #252]	; (80049cc <HAL_RCC_ClockConfig+0x1b4>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d2:	f7fd f9a9 	bl	8001c28 <HAL_GetTick>
 80048d6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d8:	e00a      	b.n	80048f0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048da:	f7fd f9a5 	bl	8001c28 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e066      	b.n	80049be <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f0:	4b36      	ldr	r3, [pc, #216]	; (80049cc <HAL_RCC_ClockConfig+0x1b4>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 020c 	and.w	r2, r3, #12
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	429a      	cmp	r2, r3
 8004900:	d1eb      	bne.n	80048da <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800490e:	4b2f      	ldr	r3, [pc, #188]	; (80049cc <HAL_RCC_ClockConfig+0x1b4>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	492c      	ldr	r1, [pc, #176]	; (80049cc <HAL_RCC_ClockConfig+0x1b4>)
 800491c:	4313      	orrs	r3, r2
 800491e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004920:	4b29      	ldr	r3, [pc, #164]	; (80049c8 <HAL_RCC_ClockConfig+0x1b0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d210      	bcs.n	8004950 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492e:	4b26      	ldr	r3, [pc, #152]	; (80049c8 <HAL_RCC_ClockConfig+0x1b0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 0207 	bic.w	r2, r3, #7
 8004936:	4924      	ldr	r1, [pc, #144]	; (80049c8 <HAL_RCC_ClockConfig+0x1b0>)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	4313      	orrs	r3, r2
 800493c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800493e:	4b22      	ldr	r3, [pc, #136]	; (80049c8 <HAL_RCC_ClockConfig+0x1b0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d001      	beq.n	8004950 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e036      	b.n	80049be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800495c:	4b1b      	ldr	r3, [pc, #108]	; (80049cc <HAL_RCC_ClockConfig+0x1b4>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4918      	ldr	r1, [pc, #96]	; (80049cc <HAL_RCC_ClockConfig+0x1b4>)
 800496a:	4313      	orrs	r3, r2
 800496c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d009      	beq.n	800498e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800497a:	4b14      	ldr	r3, [pc, #80]	; (80049cc <HAL_RCC_ClockConfig+0x1b4>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	4910      	ldr	r1, [pc, #64]	; (80049cc <HAL_RCC_ClockConfig+0x1b4>)
 800498a:	4313      	orrs	r3, r2
 800498c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800498e:	f000 f825 	bl	80049dc <HAL_RCC_GetSysClockFreq>
 8004992:	4602      	mov	r2, r0
 8004994:	4b0d      	ldr	r3, [pc, #52]	; (80049cc <HAL_RCC_ClockConfig+0x1b4>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	091b      	lsrs	r3, r3, #4
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	490c      	ldr	r1, [pc, #48]	; (80049d0 <HAL_RCC_ClockConfig+0x1b8>)
 80049a0:	5ccb      	ldrb	r3, [r1, r3]
 80049a2:	f003 031f 	and.w	r3, r3, #31
 80049a6:	fa22 f303 	lsr.w	r3, r2, r3
 80049aa:	4a0a      	ldr	r2, [pc, #40]	; (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049ae:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <HAL_RCC_ClockConfig+0x1c0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fd f8e8 	bl	8001b88 <HAL_InitTick>
 80049b8:	4603      	mov	r3, r0
 80049ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80049bc:	7afb      	ldrb	r3, [r7, #11]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40022000 	.word	0x40022000
 80049cc:	40021000 	.word	0x40021000
 80049d0:	080075f0 	.word	0x080075f0
 80049d4:	20000080 	.word	0x20000080
 80049d8:	20000084 	.word	0x20000084

080049dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	b089      	sub	sp, #36	; 0x24
 80049e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
 80049e6:	2300      	movs	r3, #0
 80049e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ea:	4b3e      	ldr	r3, [pc, #248]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 030c 	and.w	r3, r3, #12
 80049f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049f4:	4b3b      	ldr	r3, [pc, #236]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0303 	and.w	r3, r3, #3
 80049fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0x34>
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	2b0c      	cmp	r3, #12
 8004a08:	d121      	bne.n	8004a4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d11e      	bne.n	8004a4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a10:	4b34      	ldr	r3, [pc, #208]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d107      	bne.n	8004a2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a1c:	4b31      	ldr	r3, [pc, #196]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a22:	0a1b      	lsrs	r3, r3, #8
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	61fb      	str	r3, [r7, #28]
 8004a2a:	e005      	b.n	8004a38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a2c:	4b2d      	ldr	r3, [pc, #180]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	091b      	lsrs	r3, r3, #4
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a38:	4a2b      	ldr	r2, [pc, #172]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10d      	bne.n	8004a64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a4c:	e00a      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d102      	bne.n	8004a5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a54:	4b25      	ldr	r3, [pc, #148]	; (8004aec <HAL_RCC_GetSysClockFreq+0x110>)
 8004a56:	61bb      	str	r3, [r7, #24]
 8004a58:	e004      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d101      	bne.n	8004a64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a60:	4b23      	ldr	r3, [pc, #140]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	2b0c      	cmp	r3, #12
 8004a68:	d134      	bne.n	8004ad4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a6a:	4b1e      	ldr	r3, [pc, #120]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d003      	beq.n	8004a82 <HAL_RCC_GetSysClockFreq+0xa6>
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	d003      	beq.n	8004a88 <HAL_RCC_GetSysClockFreq+0xac>
 8004a80:	e005      	b.n	8004a8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a82:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <HAL_RCC_GetSysClockFreq+0x110>)
 8004a84:	617b      	str	r3, [r7, #20]
      break;
 8004a86:	e005      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a88:	4b19      	ldr	r3, [pc, #100]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a8a:	617b      	str	r3, [r7, #20]
      break;
 8004a8c:	e002      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	617b      	str	r3, [r7, #20]
      break;
 8004a92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a94:	4b13      	ldr	r3, [pc, #76]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	091b      	lsrs	r3, r3, #4
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004aa2:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	0a1b      	lsrs	r3, r3, #8
 8004aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	fb02 f203 	mul.w	r2, r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004aba:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	0e5b      	lsrs	r3, r3, #25
 8004ac0:	f003 0303 	and.w	r3, r3, #3
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ad4:	69bb      	ldr	r3, [r7, #24]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3724      	adds	r7, #36	; 0x24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	08007608 	.word	0x08007608
 8004aec:	00f42400 	.word	0x00f42400
 8004af0:	007a1200 	.word	0x007a1200

08004af4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004af8:	4b03      	ldr	r3, [pc, #12]	; (8004b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004afa:	681b      	ldr	r3, [r3, #0]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20000080 	.word	0x20000080

08004b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b10:	f7ff fff0 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8004b14:	4602      	mov	r2, r0
 8004b16:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	0a1b      	lsrs	r3, r3, #8
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	4904      	ldr	r1, [pc, #16]	; (8004b34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b22:	5ccb      	ldrb	r3, [r1, r3]
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40021000 	.word	0x40021000
 8004b34:	08007600 	.word	0x08007600

08004b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b3c:	f7ff ffda 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8004b40:	4602      	mov	r2, r0
 8004b42:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	0adb      	lsrs	r3, r3, #11
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	4904      	ldr	r1, [pc, #16]	; (8004b60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b4e:	5ccb      	ldrb	r3, [r1, r3]
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	08007600 	.word	0x08007600

08004b64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b70:	4b2a      	ldr	r3, [pc, #168]	; (8004c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b7c:	f7ff fa02 	bl	8003f84 <HAL_PWREx_GetVoltageRange>
 8004b80:	6178      	str	r0, [r7, #20]
 8004b82:	e014      	b.n	8004bae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b84:	4b25      	ldr	r3, [pc, #148]	; (8004c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b88:	4a24      	ldr	r2, [pc, #144]	; (8004c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8004b90:	4b22      	ldr	r3, [pc, #136]	; (8004c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b9c:	f7ff f9f2 	bl	8003f84 <HAL_PWREx_GetVoltageRange>
 8004ba0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ba2:	4b1e      	ldr	r3, [pc, #120]	; (8004c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba6:	4a1d      	ldr	r2, [pc, #116]	; (8004c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb4:	d10b      	bne.n	8004bce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b80      	cmp	r3, #128	; 0x80
 8004bba:	d919      	bls.n	8004bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2ba0      	cmp	r3, #160	; 0xa0
 8004bc0:	d902      	bls.n	8004bc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	e013      	b.n	8004bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bc8:	2301      	movs	r3, #1
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	e010      	b.n	8004bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b80      	cmp	r3, #128	; 0x80
 8004bd2:	d902      	bls.n	8004bda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	613b      	str	r3, [r7, #16]
 8004bd8:	e00a      	b.n	8004bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b80      	cmp	r3, #128	; 0x80
 8004bde:	d102      	bne.n	8004be6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004be0:	2302      	movs	r3, #2
 8004be2:	613b      	str	r3, [r7, #16]
 8004be4:	e004      	b.n	8004bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b70      	cmp	r3, #112	; 0x70
 8004bea:	d101      	bne.n	8004bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bec:	2301      	movs	r3, #1
 8004bee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f023 0207 	bic.w	r2, r3, #7
 8004bf8:	4909      	ldr	r1, [pc, #36]	; (8004c20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c00:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d001      	beq.n	8004c12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	40022000 	.word	0x40022000

08004c24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c30:	2300      	movs	r3, #0
 8004c32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d041      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c48:	d02a      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004c4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c4e:	d824      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c54:	d008      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c5a:	d81e      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c64:	d010      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c66:	e018      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c68:	4b86      	ldr	r3, [pc, #536]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	4a85      	ldr	r2, [pc, #532]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c72:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c74:	e015      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3304      	adds	r3, #4
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fabb 	bl	80051f8 <RCCEx_PLLSAI1_Config>
 8004c82:	4603      	mov	r3, r0
 8004c84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c86:	e00c      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3320      	adds	r3, #32
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fba6 	bl	80053e0 <RCCEx_PLLSAI2_Config>
 8004c94:	4603      	mov	r3, r0
 8004c96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c98:	e003      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	74fb      	strb	r3, [r7, #19]
      break;
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ca2:	7cfb      	ldrb	r3, [r7, #19]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10b      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ca8:	4b76      	ldr	r3, [pc, #472]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cb6:	4973      	ldr	r1, [pc, #460]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004cbe:	e001      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc0:	7cfb      	ldrb	r3, [r7, #19]
 8004cc2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d041      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cd8:	d02a      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004cda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cde:	d824      	bhi.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ce0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ce4:	d008      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ce6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cea:	d81e      	bhi.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cf4:	d010      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cf6:	e018      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cf8:	4b62      	ldr	r3, [pc, #392]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	4a61      	ldr	r2, [pc, #388]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d02:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d04:	e015      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fa73 	bl	80051f8 <RCCEx_PLLSAI1_Config>
 8004d12:	4603      	mov	r3, r0
 8004d14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d16:	e00c      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3320      	adds	r3, #32
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fb5e 	bl	80053e0 <RCCEx_PLLSAI2_Config>
 8004d24:	4603      	mov	r3, r0
 8004d26:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d28:	e003      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	74fb      	strb	r3, [r7, #19]
      break;
 8004d2e:	e000      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d32:	7cfb      	ldrb	r3, [r7, #19]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10b      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d38:	4b52      	ldr	r3, [pc, #328]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d46:	494f      	ldr	r1, [pc, #316]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d4e:	e001      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d50:	7cfb      	ldrb	r3, [r7, #19]
 8004d52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80a0 	beq.w	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d62:	2300      	movs	r3, #0
 8004d64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d66:	4b47      	ldr	r3, [pc, #284]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004d76:	2300      	movs	r3, #0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00d      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d7c:	4b41      	ldr	r3, [pc, #260]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d80:	4a40      	ldr	r2, [pc, #256]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d86:	6593      	str	r3, [r2, #88]	; 0x58
 8004d88:	4b3e      	ldr	r3, [pc, #248]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d94:	2301      	movs	r3, #1
 8004d96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d98:	4b3b      	ldr	r3, [pc, #236]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a3a      	ldr	r2, [pc, #232]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004da4:	f7fc ff40 	bl	8001c28 <HAL_GetTick>
 8004da8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004daa:	e009      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dac:	f7fc ff3c 	bl	8001c28 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d902      	bls.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	74fb      	strb	r3, [r7, #19]
        break;
 8004dbe:	e005      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dc0:	4b31      	ldr	r3, [pc, #196]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0ef      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004dcc:	7cfb      	ldrb	r3, [r7, #19]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d15c      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004dd2:	4b2c      	ldr	r3, [pc, #176]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ddc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01f      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d019      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004df0:	4b24      	ldr	r3, [pc, #144]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dfa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dfc:	4b21      	ldr	r3, [pc, #132]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e02:	4a20      	ldr	r2, [pc, #128]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e0c:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	4a1c      	ldr	r2, [pc, #112]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e1c:	4a19      	ldr	r2, [pc, #100]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d016      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2e:	f7fc fefb 	bl	8001c28 <HAL_GetTick>
 8004e32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e34:	e00b      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e36:	f7fc fef7 	bl	8001c28 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d902      	bls.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	74fb      	strb	r3, [r7, #19]
            break;
 8004e4c:	e006      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e4e:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0ec      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004e5c:	7cfb      	ldrb	r3, [r7, #19]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10c      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e62:	4b08      	ldr	r3, [pc, #32]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e72:	4904      	ldr	r1, [pc, #16]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e7a:	e009      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e7c:	7cfb      	ldrb	r3, [r7, #19]
 8004e7e:	74bb      	strb	r3, [r7, #18]
 8004e80:	e006      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004e82:	bf00      	nop
 8004e84:	40021000 	.word	0x40021000
 8004e88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e8c:	7cfb      	ldrb	r3, [r7, #19]
 8004e8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e90:	7c7b      	ldrb	r3, [r7, #17]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d105      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e96:	4b9e      	ldr	r3, [pc, #632]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9a:	4a9d      	ldr	r2, [pc, #628]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004eae:	4b98      	ldr	r3, [pc, #608]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb4:	f023 0203 	bic.w	r2, r3, #3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	4994      	ldr	r1, [pc, #592]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ed0:	4b8f      	ldr	r3, [pc, #572]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed6:	f023 020c 	bic.w	r2, r3, #12
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ede:	498c      	ldr	r1, [pc, #560]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0304 	and.w	r3, r3, #4
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ef2:	4b87      	ldr	r3, [pc, #540]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	4983      	ldr	r1, [pc, #524]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f14:	4b7e      	ldr	r3, [pc, #504]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f22:	497b      	ldr	r1, [pc, #492]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0310 	and.w	r3, r3, #16
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f36:	4b76      	ldr	r3, [pc, #472]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f44:	4972      	ldr	r1, [pc, #456]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f58:	4b6d      	ldr	r3, [pc, #436]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f66:	496a      	ldr	r1, [pc, #424]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f7a:	4b65      	ldr	r3, [pc, #404]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f88:	4961      	ldr	r1, [pc, #388]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f9c:	4b5c      	ldr	r3, [pc, #368]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004faa:	4959      	ldr	r1, [pc, #356]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fbe:	4b54      	ldr	r3, [pc, #336]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fcc:	4950      	ldr	r1, [pc, #320]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fe0:	4b4b      	ldr	r3, [pc, #300]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	4948      	ldr	r1, [pc, #288]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005002:	4b43      	ldr	r3, [pc, #268]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005008:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005010:	493f      	ldr	r1, [pc, #252]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d028      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005024:	4b3a      	ldr	r3, [pc, #232]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005032:	4937      	ldr	r1, [pc, #220]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800503e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005042:	d106      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005044:	4b32      	ldr	r3, [pc, #200]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	4a31      	ldr	r2, [pc, #196]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800504a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800504e:	60d3      	str	r3, [r2, #12]
 8005050:	e011      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005056:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800505a:	d10c      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3304      	adds	r3, #4
 8005060:	2101      	movs	r1, #1
 8005062:	4618      	mov	r0, r3
 8005064:	f000 f8c8 	bl	80051f8 <RCCEx_PLLSAI1_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800506c:	7cfb      	ldrb	r3, [r7, #19]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005072:	7cfb      	ldrb	r3, [r7, #19]
 8005074:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d028      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005082:	4b23      	ldr	r3, [pc, #140]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005088:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005090:	491f      	ldr	r1, [pc, #124]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a0:	d106      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050a2:	4b1b      	ldr	r3, [pc, #108]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	4a1a      	ldr	r2, [pc, #104]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ac:	60d3      	str	r3, [r2, #12]
 80050ae:	e011      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050b8:	d10c      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3304      	adds	r3, #4
 80050be:	2101      	movs	r1, #1
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 f899 	bl	80051f8 <RCCEx_PLLSAI1_Config>
 80050c6:	4603      	mov	r3, r0
 80050c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050ca:	7cfb      	ldrb	r3, [r7, #19]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80050d0:	7cfb      	ldrb	r3, [r7, #19]
 80050d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d02b      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050e0:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ee:	4908      	ldr	r1, [pc, #32]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050fe:	d109      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005100:	4b03      	ldr	r3, [pc, #12]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	4a02      	ldr	r2, [pc, #8]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005106:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800510a:	60d3      	str	r3, [r2, #12]
 800510c:	e014      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800510e:	bf00      	nop
 8005110:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005118:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800511c:	d10c      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3304      	adds	r3, #4
 8005122:	2101      	movs	r1, #1
 8005124:	4618      	mov	r0, r3
 8005126:	f000 f867 	bl	80051f8 <RCCEx_PLLSAI1_Config>
 800512a:	4603      	mov	r3, r0
 800512c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800512e:	7cfb      	ldrb	r3, [r7, #19]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005134:	7cfb      	ldrb	r3, [r7, #19]
 8005136:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d02f      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005144:	4b2b      	ldr	r3, [pc, #172]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005152:	4928      	ldr	r1, [pc, #160]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800515e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005162:	d10d      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3304      	adds	r3, #4
 8005168:	2102      	movs	r1, #2
 800516a:	4618      	mov	r0, r3
 800516c:	f000 f844 	bl	80051f8 <RCCEx_PLLSAI1_Config>
 8005170:	4603      	mov	r3, r0
 8005172:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005174:	7cfb      	ldrb	r3, [r7, #19]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d014      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800517a:	7cfb      	ldrb	r3, [r7, #19]
 800517c:	74bb      	strb	r3, [r7, #18]
 800517e:	e011      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005188:	d10c      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3320      	adds	r3, #32
 800518e:	2102      	movs	r1, #2
 8005190:	4618      	mov	r0, r3
 8005192:	f000 f925 	bl	80053e0 <RCCEx_PLLSAI2_Config>
 8005196:	4603      	mov	r3, r0
 8005198:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800519a:	7cfb      	ldrb	r3, [r7, #19]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80051a0:	7cfb      	ldrb	r3, [r7, #19]
 80051a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051b0:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051be:	490d      	ldr	r1, [pc, #52]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00b      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051d2:	4b08      	ldr	r3, [pc, #32]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051e2:	4904      	ldr	r1, [pc, #16]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80051ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40021000 	.word	0x40021000

080051f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005206:	4b75      	ldr	r3, [pc, #468]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d018      	beq.n	8005244 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005212:	4b72      	ldr	r3, [pc, #456]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f003 0203 	and.w	r2, r3, #3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d10d      	bne.n	800523e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
       ||
 8005226:	2b00      	cmp	r3, #0
 8005228:	d009      	beq.n	800523e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800522a:	4b6c      	ldr	r3, [pc, #432]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	091b      	lsrs	r3, r3, #4
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
       ||
 800523a:	429a      	cmp	r2, r3
 800523c:	d047      	beq.n	80052ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	73fb      	strb	r3, [r7, #15]
 8005242:	e044      	b.n	80052ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b03      	cmp	r3, #3
 800524a:	d018      	beq.n	800527e <RCCEx_PLLSAI1_Config+0x86>
 800524c:	2b03      	cmp	r3, #3
 800524e:	d825      	bhi.n	800529c <RCCEx_PLLSAI1_Config+0xa4>
 8005250:	2b01      	cmp	r3, #1
 8005252:	d002      	beq.n	800525a <RCCEx_PLLSAI1_Config+0x62>
 8005254:	2b02      	cmp	r3, #2
 8005256:	d009      	beq.n	800526c <RCCEx_PLLSAI1_Config+0x74>
 8005258:	e020      	b.n	800529c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800525a:	4b60      	ldr	r3, [pc, #384]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d11d      	bne.n	80052a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800526a:	e01a      	b.n	80052a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800526c:	4b5b      	ldr	r3, [pc, #364]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005274:	2b00      	cmp	r3, #0
 8005276:	d116      	bne.n	80052a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800527c:	e013      	b.n	80052a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800527e:	4b57      	ldr	r3, [pc, #348]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10f      	bne.n	80052aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800528a:	4b54      	ldr	r3, [pc, #336]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d109      	bne.n	80052aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800529a:	e006      	b.n	80052aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	73fb      	strb	r3, [r7, #15]
      break;
 80052a0:	e004      	b.n	80052ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052a2:	bf00      	nop
 80052a4:	e002      	b.n	80052ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052a6:	bf00      	nop
 80052a8:	e000      	b.n	80052ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10d      	bne.n	80052ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052b2:	4b4a      	ldr	r3, [pc, #296]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6819      	ldr	r1, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	430b      	orrs	r3, r1
 80052c8:	4944      	ldr	r1, [pc, #272]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d17d      	bne.n	80053d0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80052d4:	4b41      	ldr	r3, [pc, #260]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a40      	ldr	r2, [pc, #256]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e0:	f7fc fca2 	bl	8001c28 <HAL_GetTick>
 80052e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052e6:	e009      	b.n	80052fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052e8:	f7fc fc9e 	bl	8001c28 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d902      	bls.n	80052fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	73fb      	strb	r3, [r7, #15]
        break;
 80052fa:	e005      	b.n	8005308 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052fc:	4b37      	ldr	r3, [pc, #220]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1ef      	bne.n	80052e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d160      	bne.n	80053d0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d111      	bne.n	8005338 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005314:	4b31      	ldr	r3, [pc, #196]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800531c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6892      	ldr	r2, [r2, #8]
 8005324:	0211      	lsls	r1, r2, #8
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	68d2      	ldr	r2, [r2, #12]
 800532a:	0912      	lsrs	r2, r2, #4
 800532c:	0452      	lsls	r2, r2, #17
 800532e:	430a      	orrs	r2, r1
 8005330:	492a      	ldr	r1, [pc, #168]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005332:	4313      	orrs	r3, r2
 8005334:	610b      	str	r3, [r1, #16]
 8005336:	e027      	b.n	8005388 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d112      	bne.n	8005364 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800533e:	4b27      	ldr	r3, [pc, #156]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005346:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6892      	ldr	r2, [r2, #8]
 800534e:	0211      	lsls	r1, r2, #8
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6912      	ldr	r2, [r2, #16]
 8005354:	0852      	lsrs	r2, r2, #1
 8005356:	3a01      	subs	r2, #1
 8005358:	0552      	lsls	r2, r2, #21
 800535a:	430a      	orrs	r2, r1
 800535c:	491f      	ldr	r1, [pc, #124]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800535e:	4313      	orrs	r3, r2
 8005360:	610b      	str	r3, [r1, #16]
 8005362:	e011      	b.n	8005388 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005364:	4b1d      	ldr	r3, [pc, #116]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800536c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6892      	ldr	r2, [r2, #8]
 8005374:	0211      	lsls	r1, r2, #8
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	6952      	ldr	r2, [r2, #20]
 800537a:	0852      	lsrs	r2, r2, #1
 800537c:	3a01      	subs	r2, #1
 800537e:	0652      	lsls	r2, r2, #25
 8005380:	430a      	orrs	r2, r1
 8005382:	4916      	ldr	r1, [pc, #88]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005384:	4313      	orrs	r3, r2
 8005386:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005388:	4b14      	ldr	r3, [pc, #80]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a13      	ldr	r2, [pc, #76]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800538e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005392:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005394:	f7fc fc48 	bl	8001c28 <HAL_GetTick>
 8005398:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800539a:	e009      	b.n	80053b0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800539c:	f7fc fc44 	bl	8001c28 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d902      	bls.n	80053b0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	73fb      	strb	r3, [r7, #15]
          break;
 80053ae:	e005      	b.n	80053bc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053b0:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0ef      	beq.n	800539c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053c2:	4b06      	ldr	r3, [pc, #24]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	4904      	ldr	r1, [pc, #16]	; (80053dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40021000 	.word	0x40021000

080053e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053ee:	4b6a      	ldr	r3, [pc, #424]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d018      	beq.n	800542c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80053fa:	4b67      	ldr	r3, [pc, #412]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f003 0203 	and.w	r2, r3, #3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d10d      	bne.n	8005426 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
       ||
 800540e:	2b00      	cmp	r3, #0
 8005410:	d009      	beq.n	8005426 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005412:	4b61      	ldr	r3, [pc, #388]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	091b      	lsrs	r3, r3, #4
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
       ||
 8005422:	429a      	cmp	r2, r3
 8005424:	d047      	beq.n	80054b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	73fb      	strb	r3, [r7, #15]
 800542a:	e044      	b.n	80054b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b03      	cmp	r3, #3
 8005432:	d018      	beq.n	8005466 <RCCEx_PLLSAI2_Config+0x86>
 8005434:	2b03      	cmp	r3, #3
 8005436:	d825      	bhi.n	8005484 <RCCEx_PLLSAI2_Config+0xa4>
 8005438:	2b01      	cmp	r3, #1
 800543a:	d002      	beq.n	8005442 <RCCEx_PLLSAI2_Config+0x62>
 800543c:	2b02      	cmp	r3, #2
 800543e:	d009      	beq.n	8005454 <RCCEx_PLLSAI2_Config+0x74>
 8005440:	e020      	b.n	8005484 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005442:	4b55      	ldr	r3, [pc, #340]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d11d      	bne.n	800548a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005452:	e01a      	b.n	800548a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005454:	4b50      	ldr	r3, [pc, #320]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545c:	2b00      	cmp	r3, #0
 800545e:	d116      	bne.n	800548e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005464:	e013      	b.n	800548e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005466:	4b4c      	ldr	r3, [pc, #304]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10f      	bne.n	8005492 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005472:	4b49      	ldr	r3, [pc, #292]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d109      	bne.n	8005492 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005482:	e006      	b.n	8005492 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
      break;
 8005488:	e004      	b.n	8005494 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800548a:	bf00      	nop
 800548c:	e002      	b.n	8005494 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800548e:	bf00      	nop
 8005490:	e000      	b.n	8005494 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005492:	bf00      	nop
    }

    if(status == HAL_OK)
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10d      	bne.n	80054b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800549a:	4b3f      	ldr	r3, [pc, #252]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6819      	ldr	r1, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	430b      	orrs	r3, r1
 80054b0:	4939      	ldr	r1, [pc, #228]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d167      	bne.n	800558c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80054bc:	4b36      	ldr	r3, [pc, #216]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a35      	ldr	r2, [pc, #212]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c8:	f7fc fbae 	bl	8001c28 <HAL_GetTick>
 80054cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054ce:	e009      	b.n	80054e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054d0:	f7fc fbaa 	bl	8001c28 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d902      	bls.n	80054e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	73fb      	strb	r3, [r7, #15]
        break;
 80054e2:	e005      	b.n	80054f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054e4:	4b2c      	ldr	r3, [pc, #176]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1ef      	bne.n	80054d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d14a      	bne.n	800558c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d111      	bne.n	8005520 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054fc:	4b26      	ldr	r3, [pc, #152]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6892      	ldr	r2, [r2, #8]
 800550c:	0211      	lsls	r1, r2, #8
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	68d2      	ldr	r2, [r2, #12]
 8005512:	0912      	lsrs	r2, r2, #4
 8005514:	0452      	lsls	r2, r2, #17
 8005516:	430a      	orrs	r2, r1
 8005518:	491f      	ldr	r1, [pc, #124]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 800551a:	4313      	orrs	r3, r2
 800551c:	614b      	str	r3, [r1, #20]
 800551e:	e011      	b.n	8005544 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005520:	4b1d      	ldr	r3, [pc, #116]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005528:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6892      	ldr	r2, [r2, #8]
 8005530:	0211      	lsls	r1, r2, #8
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6912      	ldr	r2, [r2, #16]
 8005536:	0852      	lsrs	r2, r2, #1
 8005538:	3a01      	subs	r2, #1
 800553a:	0652      	lsls	r2, r2, #25
 800553c:	430a      	orrs	r2, r1
 800553e:	4916      	ldr	r1, [pc, #88]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005540:	4313      	orrs	r3, r2
 8005542:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005544:	4b14      	ldr	r3, [pc, #80]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a13      	ldr	r2, [pc, #76]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 800554a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800554e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005550:	f7fc fb6a 	bl	8001c28 <HAL_GetTick>
 8005554:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005556:	e009      	b.n	800556c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005558:	f7fc fb66 	bl	8001c28 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d902      	bls.n	800556c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	73fb      	strb	r3, [r7, #15]
          break;
 800556a:	e005      	b.n	8005578 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800556c:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0ef      	beq.n	8005558 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d106      	bne.n	800558c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800557e:	4b06      	ldr	r3, [pc, #24]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005580:	695a      	ldr	r2, [r3, #20]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	4904      	ldr	r1, [pc, #16]	; (8005598 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005588:	4313      	orrs	r3, r2
 800558a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800558c:	7bfb      	ldrb	r3, [r7, #15]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	40021000 	.word	0x40021000

0800559c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e049      	b.n	8005642 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fc f8f0 	bl	80017a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3304      	adds	r3, #4
 80055d8:	4619      	mov	r1, r3
 80055da:	4610      	mov	r0, r2
 80055dc:	f000 fba8 	bl	8005d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b01      	cmp	r3, #1
 800565e:	d001      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e04f      	b.n	8005704 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0201 	orr.w	r2, r2, #1
 800567a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a23      	ldr	r2, [pc, #140]	; (8005710 <HAL_TIM_Base_Start_IT+0xc4>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d01d      	beq.n	80056c2 <HAL_TIM_Base_Start_IT+0x76>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800568e:	d018      	beq.n	80056c2 <HAL_TIM_Base_Start_IT+0x76>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a1f      	ldr	r2, [pc, #124]	; (8005714 <HAL_TIM_Base_Start_IT+0xc8>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d013      	beq.n	80056c2 <HAL_TIM_Base_Start_IT+0x76>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a1e      	ldr	r2, [pc, #120]	; (8005718 <HAL_TIM_Base_Start_IT+0xcc>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00e      	beq.n	80056c2 <HAL_TIM_Base_Start_IT+0x76>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1c      	ldr	r2, [pc, #112]	; (800571c <HAL_TIM_Base_Start_IT+0xd0>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d009      	beq.n	80056c2 <HAL_TIM_Base_Start_IT+0x76>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1b      	ldr	r2, [pc, #108]	; (8005720 <HAL_TIM_Base_Start_IT+0xd4>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d004      	beq.n	80056c2 <HAL_TIM_Base_Start_IT+0x76>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a19      	ldr	r2, [pc, #100]	; (8005724 <HAL_TIM_Base_Start_IT+0xd8>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d115      	bne.n	80056ee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	4b17      	ldr	r3, [pc, #92]	; (8005728 <HAL_TIM_Base_Start_IT+0xdc>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b06      	cmp	r3, #6
 80056d2:	d015      	beq.n	8005700 <HAL_TIM_Base_Start_IT+0xb4>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056da:	d011      	beq.n	8005700 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ec:	e008      	b.n	8005700 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f042 0201 	orr.w	r2, r2, #1
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	e000      	b.n	8005702 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005700:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	40012c00 	.word	0x40012c00
 8005714:	40000400 	.word	0x40000400
 8005718:	40000800 	.word	0x40000800
 800571c:	40000c00 	.word	0x40000c00
 8005720:	40013400 	.word	0x40013400
 8005724:	40014000 	.word	0x40014000
 8005728:	00010007 	.word	0x00010007

0800572c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e049      	b.n	80057d2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d106      	bne.n	8005758 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f841 	bl	80057da <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3304      	adds	r3, #4
 8005768:	4619      	mov	r1, r3
 800576a:	4610      	mov	r0, r2
 800576c:	f000 fae0 	bl	8005d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b082      	sub	sp, #8
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b02      	cmp	r3, #2
 8005802:	d122      	bne.n	800584a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b02      	cmp	r3, #2
 8005810:	d11b      	bne.n	800584a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f06f 0202 	mvn.w	r2, #2
 800581a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fa5f 	bl	8005cf4 <HAL_TIM_IC_CaptureCallback>
 8005836:	e005      	b.n	8005844 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fa51 	bl	8005ce0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fa62 	bl	8005d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b04      	cmp	r3, #4
 8005856:	d122      	bne.n	800589e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	2b04      	cmp	r3, #4
 8005864:	d11b      	bne.n	800589e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f06f 0204 	mvn.w	r2, #4
 800586e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 fa35 	bl	8005cf4 <HAL_TIM_IC_CaptureCallback>
 800588a:	e005      	b.n	8005898 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fa27 	bl	8005ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fa38 	bl	8005d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d122      	bne.n	80058f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b08      	cmp	r3, #8
 80058b8:	d11b      	bne.n	80058f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f06f 0208 	mvn.w	r2, #8
 80058c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2204      	movs	r2, #4
 80058c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d003      	beq.n	80058e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fa0b 	bl	8005cf4 <HAL_TIM_IC_CaptureCallback>
 80058de:	e005      	b.n	80058ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f9fd 	bl	8005ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fa0e 	bl	8005d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b10      	cmp	r3, #16
 80058fe:	d122      	bne.n	8005946 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f003 0310 	and.w	r3, r3, #16
 800590a:	2b10      	cmp	r3, #16
 800590c:	d11b      	bne.n	8005946 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f06f 0210 	mvn.w	r2, #16
 8005916:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2208      	movs	r2, #8
 800591c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f9e1 	bl	8005cf4 <HAL_TIM_IC_CaptureCallback>
 8005932:	e005      	b.n	8005940 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f9d3 	bl	8005ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f9e4 	bl	8005d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b01      	cmp	r3, #1
 8005952:	d10e      	bne.n	8005972 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b01      	cmp	r3, #1
 8005960:	d107      	bne.n	8005972 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f06f 0201 	mvn.w	r2, #1
 800596a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7fb fa3d 	bl	8000dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597c:	2b80      	cmp	r3, #128	; 0x80
 800597e:	d10e      	bne.n	800599e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598a:	2b80      	cmp	r3, #128	; 0x80
 800598c:	d107      	bne.n	800599e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fcb3 	bl	8006304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ac:	d10e      	bne.n	80059cc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b8:	2b80      	cmp	r3, #128	; 0x80
 80059ba:	d107      	bne.n	80059cc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fca6 	bl	8006318 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d6:	2b40      	cmp	r3, #64	; 0x40
 80059d8:	d10e      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d107      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f992 	bl	8005d1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b20      	cmp	r3, #32
 8005a04:	d10e      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d107      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0220 	mvn.w	r2, #32
 8005a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fc66 	bl	80062f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a24:	bf00      	nop
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e082      	b.n	8005b4c <HAL_TIM_IC_ConfigChannel+0x120>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d11b      	bne.n	8005a8c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	6819      	ldr	r1, [r3, #0]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f000 f9fe 	bl	8005e64 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 020c 	bic.w	r2, r2, #12
 8005a76:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6999      	ldr	r1, [r3, #24]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	619a      	str	r2, [r3, #24]
 8005a8a:	e05a      	b.n	8005b42 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d11c      	bne.n	8005acc <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6818      	ldr	r0, [r3, #0]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	6819      	ldr	r1, [r3, #0]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f000 fa7c 	bl	8005f9e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	699a      	ldr	r2, [r3, #24]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ab4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6999      	ldr	r1, [r3, #24]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	021a      	lsls	r2, r3, #8
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	619a      	str	r2, [r3, #24]
 8005aca:	e03a      	b.n	8005b42 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b08      	cmp	r3, #8
 8005ad0:	d11b      	bne.n	8005b0a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6818      	ldr	r0, [r3, #0]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	6819      	ldr	r1, [r3, #0]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f000 fac9 	bl	8006078 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69da      	ldr	r2, [r3, #28]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 020c 	bic.w	r2, r2, #12
 8005af4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69d9      	ldr	r1, [r3, #28]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	61da      	str	r2, [r3, #28]
 8005b08:	e01b      	b.n	8005b42 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6819      	ldr	r1, [r3, #0]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f000 fae9 	bl	80060f0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b2c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69d9      	ldr	r1, [r3, #28]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	021a      	lsls	r2, r3, #8
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_TIM_ConfigClockSource+0x18>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e0b5      	b.n	8005cd8 <HAL_TIM_ConfigClockSource+0x184>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba8:	d03e      	beq.n	8005c28 <HAL_TIM_ConfigClockSource+0xd4>
 8005baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bae:	f200 8087 	bhi.w	8005cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb6:	f000 8085 	beq.w	8005cc4 <HAL_TIM_ConfigClockSource+0x170>
 8005bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bbe:	d87f      	bhi.n	8005cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc0:	2b70      	cmp	r3, #112	; 0x70
 8005bc2:	d01a      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0xa6>
 8005bc4:	2b70      	cmp	r3, #112	; 0x70
 8005bc6:	d87b      	bhi.n	8005cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc8:	2b60      	cmp	r3, #96	; 0x60
 8005bca:	d050      	beq.n	8005c6e <HAL_TIM_ConfigClockSource+0x11a>
 8005bcc:	2b60      	cmp	r3, #96	; 0x60
 8005bce:	d877      	bhi.n	8005cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd0:	2b50      	cmp	r3, #80	; 0x50
 8005bd2:	d03c      	beq.n	8005c4e <HAL_TIM_ConfigClockSource+0xfa>
 8005bd4:	2b50      	cmp	r3, #80	; 0x50
 8005bd6:	d873      	bhi.n	8005cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd8:	2b40      	cmp	r3, #64	; 0x40
 8005bda:	d058      	beq.n	8005c8e <HAL_TIM_ConfigClockSource+0x13a>
 8005bdc:	2b40      	cmp	r3, #64	; 0x40
 8005bde:	d86f      	bhi.n	8005cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005be0:	2b30      	cmp	r3, #48	; 0x30
 8005be2:	d064      	beq.n	8005cae <HAL_TIM_ConfigClockSource+0x15a>
 8005be4:	2b30      	cmp	r3, #48	; 0x30
 8005be6:	d86b      	bhi.n	8005cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d060      	beq.n	8005cae <HAL_TIM_ConfigClockSource+0x15a>
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	d867      	bhi.n	8005cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d05c      	beq.n	8005cae <HAL_TIM_ConfigClockSource+0x15a>
 8005bf4:	2b10      	cmp	r3, #16
 8005bf6:	d05a      	beq.n	8005cae <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005bf8:	e062      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	6899      	ldr	r1, [r3, #8]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f000 fac9 	bl	80061a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	609a      	str	r2, [r3, #8]
      break;
 8005c26:	e04e      	b.n	8005cc6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6818      	ldr	r0, [r3, #0]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	6899      	ldr	r1, [r3, #8]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f000 fab2 	bl	80061a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689a      	ldr	r2, [r3, #8]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c4a:	609a      	str	r2, [r3, #8]
      break;
 8005c4c:	e03b      	b.n	8005cc6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	6859      	ldr	r1, [r3, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f000 f970 	bl	8005f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2150      	movs	r1, #80	; 0x50
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 fa7f 	bl	800616a <TIM_ITRx_SetConfig>
      break;
 8005c6c:	e02b      	b.n	8005cc6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6818      	ldr	r0, [r3, #0]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	6859      	ldr	r1, [r3, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f000 f9cc 	bl	8006018 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2160      	movs	r1, #96	; 0x60
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fa6f 	bl	800616a <TIM_ITRx_SetConfig>
      break;
 8005c8c:	e01b      	b.n	8005cc6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	6859      	ldr	r1, [r3, #4]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f000 f950 	bl	8005f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2140      	movs	r1, #64	; 0x40
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fa5f 	bl	800616a <TIM_ITRx_SetConfig>
      break;
 8005cac:	e00b      	b.n	8005cc6 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4610      	mov	r0, r2
 8005cba:	f000 fa56 	bl	800616a <TIM_ITRx_SetConfig>
        break;
 8005cbe:	e002      	b.n	8005cc6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005cc0:	bf00      	nop
 8005cc2:	e000      	b.n	8005cc6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005cc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a40      	ldr	r2, [pc, #256]	; (8005e44 <TIM_Base_SetConfig+0x114>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4e:	d00f      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a3d      	ldr	r2, [pc, #244]	; (8005e48 <TIM_Base_SetConfig+0x118>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00b      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a3c      	ldr	r2, [pc, #240]	; (8005e4c <TIM_Base_SetConfig+0x11c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d007      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a3b      	ldr	r2, [pc, #236]	; (8005e50 <TIM_Base_SetConfig+0x120>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a3a      	ldr	r2, [pc, #232]	; (8005e54 <TIM_Base_SetConfig+0x124>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d108      	bne.n	8005d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a2f      	ldr	r2, [pc, #188]	; (8005e44 <TIM_Base_SetConfig+0x114>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d01f      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d90:	d01b      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a2c      	ldr	r2, [pc, #176]	; (8005e48 <TIM_Base_SetConfig+0x118>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d017      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a2b      	ldr	r2, [pc, #172]	; (8005e4c <TIM_Base_SetConfig+0x11c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d013      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a2a      	ldr	r2, [pc, #168]	; (8005e50 <TIM_Base_SetConfig+0x120>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00f      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a29      	ldr	r2, [pc, #164]	; (8005e54 <TIM_Base_SetConfig+0x124>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00b      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a28      	ldr	r2, [pc, #160]	; (8005e58 <TIM_Base_SetConfig+0x128>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d007      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a27      	ldr	r2, [pc, #156]	; (8005e5c <TIM_Base_SetConfig+0x12c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d003      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a26      	ldr	r2, [pc, #152]	; (8005e60 <TIM_Base_SetConfig+0x130>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d108      	bne.n	8005ddc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a10      	ldr	r2, [pc, #64]	; (8005e44 <TIM_Base_SetConfig+0x114>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d00f      	beq.n	8005e28 <TIM_Base_SetConfig+0xf8>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a12      	ldr	r2, [pc, #72]	; (8005e54 <TIM_Base_SetConfig+0x124>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00b      	beq.n	8005e28 <TIM_Base_SetConfig+0xf8>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a11      	ldr	r2, [pc, #68]	; (8005e58 <TIM_Base_SetConfig+0x128>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d007      	beq.n	8005e28 <TIM_Base_SetConfig+0xf8>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a10      	ldr	r2, [pc, #64]	; (8005e5c <TIM_Base_SetConfig+0x12c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d003      	beq.n	8005e28 <TIM_Base_SetConfig+0xf8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a0f      	ldr	r2, [pc, #60]	; (8005e60 <TIM_Base_SetConfig+0x130>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d103      	bne.n	8005e30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	615a      	str	r2, [r3, #20]
}
 8005e36:	bf00      	nop
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40012c00 	.word	0x40012c00
 8005e48:	40000400 	.word	0x40000400
 8005e4c:	40000800 	.word	0x40000800
 8005e50:	40000c00 	.word	0x40000c00
 8005e54:	40013400 	.word	0x40013400
 8005e58:	40014000 	.word	0x40014000
 8005e5c:	40014400 	.word	0x40014400
 8005e60:	40014800 	.word	0x40014800

08005e64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
 8005e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f023 0201 	bic.w	r2, r3, #1
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4a26      	ldr	r2, [pc, #152]	; (8005f28 <TIM_TI1_SetConfig+0xc4>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d017      	beq.n	8005ec2 <TIM_TI1_SetConfig+0x5e>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e98:	d013      	beq.n	8005ec2 <TIM_TI1_SetConfig+0x5e>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4a23      	ldr	r2, [pc, #140]	; (8005f2c <TIM_TI1_SetConfig+0xc8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00f      	beq.n	8005ec2 <TIM_TI1_SetConfig+0x5e>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4a22      	ldr	r2, [pc, #136]	; (8005f30 <TIM_TI1_SetConfig+0xcc>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d00b      	beq.n	8005ec2 <TIM_TI1_SetConfig+0x5e>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4a21      	ldr	r2, [pc, #132]	; (8005f34 <TIM_TI1_SetConfig+0xd0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d007      	beq.n	8005ec2 <TIM_TI1_SetConfig+0x5e>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4a20      	ldr	r2, [pc, #128]	; (8005f38 <TIM_TI1_SetConfig+0xd4>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d003      	beq.n	8005ec2 <TIM_TI1_SetConfig+0x5e>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4a1f      	ldr	r2, [pc, #124]	; (8005f3c <TIM_TI1_SetConfig+0xd8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d101      	bne.n	8005ec6 <TIM_TI1_SetConfig+0x62>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e000      	b.n	8005ec8 <TIM_TI1_SetConfig+0x64>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d008      	beq.n	8005ede <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f023 0303 	bic.w	r3, r3, #3
 8005ed2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	e003      	b.n	8005ee6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f043 0301 	orr.w	r3, r3, #1
 8005ee4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f023 030a 	bic.w	r3, r3, #10
 8005f00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f003 030a 	and.w	r3, r3, #10
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	621a      	str	r2, [r3, #32]
}
 8005f1a:	bf00      	nop
 8005f1c:	371c      	adds	r7, #28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40012c00 	.word	0x40012c00
 8005f2c:	40000400 	.word	0x40000400
 8005f30:	40000800 	.word	0x40000800
 8005f34:	40000c00 	.word	0x40000c00
 8005f38:	40013400 	.word	0x40013400
 8005f3c:	40014000 	.word	0x40014000

08005f40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	f023 0201 	bic.w	r2, r3, #1
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f023 030a 	bic.w	r3, r3, #10
 8005f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	621a      	str	r2, [r3, #32]
}
 8005f92:	bf00      	nop
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b087      	sub	sp, #28
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	f023 0210 	bic.w	r2, r3, #16
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	031b      	lsls	r3, r3, #12
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ff0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	621a      	str	r2, [r3, #32]
}
 800600c:	bf00      	nop
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006018:	b480      	push	{r7}
 800601a:	b087      	sub	sp, #28
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	f023 0210 	bic.w	r2, r3, #16
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006042:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	031b      	lsls	r3, r3, #12
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006054:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	621a      	str	r2, [r3, #32]
}
 800606c:	bf00      	nop
 800606e:	371c      	adds	r7, #28
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f023 0303 	bic.w	r3, r3, #3
 80060a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80060c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	021b      	lsls	r3, r3, #8
 80060ce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	621a      	str	r2, [r3, #32]
}
 80060e4:	bf00      	nop
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800611c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800612e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	031b      	lsls	r3, r3, #12
 8006134:	b29b      	uxth	r3, r3
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006142:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	031b      	lsls	r3, r3, #12
 8006148:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	621a      	str	r2, [r3, #32]
}
 800615e:	bf00      	nop
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006180:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	f043 0307 	orr.w	r3, r3, #7
 800618c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	609a      	str	r2, [r3, #8]
}
 8006194:	bf00      	nop
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	021a      	lsls	r2, r3, #8
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	609a      	str	r2, [r3, #8]
}
 80061d4:	bf00      	nop
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e068      	b.n	80062ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a2e      	ldr	r2, [pc, #184]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d004      	beq.n	800622c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a2d      	ldr	r2, [pc, #180]	; (80062dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d108      	bne.n	800623e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006232:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006244:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4313      	orrs	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1e      	ldr	r2, [pc, #120]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d01d      	beq.n	800629e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800626a:	d018      	beq.n	800629e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1b      	ldr	r2, [pc, #108]	; (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d013      	beq.n	800629e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1a      	ldr	r2, [pc, #104]	; (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00e      	beq.n	800629e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a18      	ldr	r2, [pc, #96]	; (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d009      	beq.n	800629e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a13      	ldr	r2, [pc, #76]	; (80062dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d004      	beq.n	800629e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a14      	ldr	r2, [pc, #80]	; (80062ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d10c      	bne.n	80062b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40012c00 	.word	0x40012c00
 80062dc:	40013400 	.word	0x40013400
 80062e0:	40000400 	.word	0x40000400
 80062e4:	40000800 	.word	0x40000800
 80062e8:	40000c00 	.word	0x40000c00
 80062ec:	40014000 	.word	0x40014000

080062f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e040      	b.n	80063c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006342:	2b00      	cmp	r3, #0
 8006344:	d106      	bne.n	8006354 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7fb fade 	bl	8001910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2224      	movs	r2, #36	; 0x24
 8006358:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0201 	bic.w	r2, r2, #1
 8006368:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f8c0 	bl	80064f0 <UART_SetConfig>
 8006370:	4603      	mov	r3, r0
 8006372:	2b01      	cmp	r3, #1
 8006374:	d101      	bne.n	800637a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e022      	b.n	80063c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fb3e 	bl	8006a04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006396:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0201 	orr.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fbc5 	bl	8006b48 <UART_CheckIdleState>
 80063be:	4603      	mov	r3, r0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08a      	sub	sp, #40	; 0x28
 80063cc:	af02      	add	r7, sp, #8
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	603b      	str	r3, [r7, #0]
 80063d4:	4613      	mov	r3, r2
 80063d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063dc:	2b20      	cmp	r3, #32
 80063de:	f040 8082 	bne.w	80064e6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <HAL_UART_Transmit+0x26>
 80063e8:	88fb      	ldrh	r3, [r7, #6]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e07a      	b.n	80064e8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d101      	bne.n	8006400 <HAL_UART_Transmit+0x38>
 80063fc:	2302      	movs	r3, #2
 80063fe:	e073      	b.n	80064e8 <HAL_UART_Transmit+0x120>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2221      	movs	r2, #33	; 0x21
 8006414:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006416:	f7fb fc07 	bl	8001c28 <HAL_GetTick>
 800641a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	88fa      	ldrh	r2, [r7, #6]
 8006420:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	88fa      	ldrh	r2, [r7, #6]
 8006428:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006434:	d108      	bne.n	8006448 <HAL_UART_Transmit+0x80>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d104      	bne.n	8006448 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800643e:	2300      	movs	r3, #0
 8006440:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	61bb      	str	r3, [r7, #24]
 8006446:	e003      	b.n	8006450 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800644c:	2300      	movs	r3, #0
 800644e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006458:	e02d      	b.n	80064b6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2200      	movs	r2, #0
 8006462:	2180      	movs	r1, #128	; 0x80
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 fbb8 	bl	8006bda <UART_WaitOnFlagUntilTimeout>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e039      	b.n	80064e8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10b      	bne.n	8006492 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	881a      	ldrh	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006486:	b292      	uxth	r2, r2
 8006488:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	3302      	adds	r3, #2
 800648e:	61bb      	str	r3, [r7, #24]
 8006490:	e008      	b.n	80064a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	781a      	ldrb	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	b292      	uxth	r2, r2
 800649c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	3301      	adds	r3, #1
 80064a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064bc:	b29b      	uxth	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1cb      	bne.n	800645a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2200      	movs	r2, #0
 80064ca:	2140      	movs	r1, #64	; 0x40
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 fb84 	bl	8006bda <UART_WaitOnFlagUntilTimeout>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e005      	b.n	80064e8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2220      	movs	r2, #32
 80064e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	e000      	b.n	80064e8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80064e6:	2302      	movs	r3, #2
  }
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3720      	adds	r7, #32
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064f0:	b5b0      	push	{r4, r5, r7, lr}
 80064f2:	b088      	sub	sp, #32
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064f8:	2300      	movs	r3, #0
 80064fa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	431a      	orrs	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	431a      	orrs	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	4313      	orrs	r3, r2
 8006512:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	4bad      	ldr	r3, [pc, #692]	; (80067d0 <UART_SetConfig+0x2e0>)
 800651c:	4013      	ands	r3, r2
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	6812      	ldr	r2, [r2, #0]
 8006522:	69f9      	ldr	r1, [r7, #28]
 8006524:	430b      	orrs	r3, r1
 8006526:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4aa2      	ldr	r2, [pc, #648]	; (80067d4 <UART_SetConfig+0x2e4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d004      	beq.n	8006558 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	4313      	orrs	r3, r2
 8006556:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	430a      	orrs	r2, r1
 800656a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a99      	ldr	r2, [pc, #612]	; (80067d8 <UART_SetConfig+0x2e8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d121      	bne.n	80065ba <UART_SetConfig+0xca>
 8006576:	4b99      	ldr	r3, [pc, #612]	; (80067dc <UART_SetConfig+0x2ec>)
 8006578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657c:	f003 0303 	and.w	r3, r3, #3
 8006580:	2b03      	cmp	r3, #3
 8006582:	d817      	bhi.n	80065b4 <UART_SetConfig+0xc4>
 8006584:	a201      	add	r2, pc, #4	; (adr r2, 800658c <UART_SetConfig+0x9c>)
 8006586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658a:	bf00      	nop
 800658c:	0800659d 	.word	0x0800659d
 8006590:	080065a9 	.word	0x080065a9
 8006594:	080065a3 	.word	0x080065a3
 8006598:	080065af 	.word	0x080065af
 800659c:	2301      	movs	r3, #1
 800659e:	76fb      	strb	r3, [r7, #27]
 80065a0:	e0e7      	b.n	8006772 <UART_SetConfig+0x282>
 80065a2:	2302      	movs	r3, #2
 80065a4:	76fb      	strb	r3, [r7, #27]
 80065a6:	e0e4      	b.n	8006772 <UART_SetConfig+0x282>
 80065a8:	2304      	movs	r3, #4
 80065aa:	76fb      	strb	r3, [r7, #27]
 80065ac:	e0e1      	b.n	8006772 <UART_SetConfig+0x282>
 80065ae:	2308      	movs	r3, #8
 80065b0:	76fb      	strb	r3, [r7, #27]
 80065b2:	e0de      	b.n	8006772 <UART_SetConfig+0x282>
 80065b4:	2310      	movs	r3, #16
 80065b6:	76fb      	strb	r3, [r7, #27]
 80065b8:	e0db      	b.n	8006772 <UART_SetConfig+0x282>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a88      	ldr	r2, [pc, #544]	; (80067e0 <UART_SetConfig+0x2f0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d132      	bne.n	800662a <UART_SetConfig+0x13a>
 80065c4:	4b85      	ldr	r3, [pc, #532]	; (80067dc <UART_SetConfig+0x2ec>)
 80065c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ca:	f003 030c 	and.w	r3, r3, #12
 80065ce:	2b0c      	cmp	r3, #12
 80065d0:	d828      	bhi.n	8006624 <UART_SetConfig+0x134>
 80065d2:	a201      	add	r2, pc, #4	; (adr r2, 80065d8 <UART_SetConfig+0xe8>)
 80065d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d8:	0800660d 	.word	0x0800660d
 80065dc:	08006625 	.word	0x08006625
 80065e0:	08006625 	.word	0x08006625
 80065e4:	08006625 	.word	0x08006625
 80065e8:	08006619 	.word	0x08006619
 80065ec:	08006625 	.word	0x08006625
 80065f0:	08006625 	.word	0x08006625
 80065f4:	08006625 	.word	0x08006625
 80065f8:	08006613 	.word	0x08006613
 80065fc:	08006625 	.word	0x08006625
 8006600:	08006625 	.word	0x08006625
 8006604:	08006625 	.word	0x08006625
 8006608:	0800661f 	.word	0x0800661f
 800660c:	2300      	movs	r3, #0
 800660e:	76fb      	strb	r3, [r7, #27]
 8006610:	e0af      	b.n	8006772 <UART_SetConfig+0x282>
 8006612:	2302      	movs	r3, #2
 8006614:	76fb      	strb	r3, [r7, #27]
 8006616:	e0ac      	b.n	8006772 <UART_SetConfig+0x282>
 8006618:	2304      	movs	r3, #4
 800661a:	76fb      	strb	r3, [r7, #27]
 800661c:	e0a9      	b.n	8006772 <UART_SetConfig+0x282>
 800661e:	2308      	movs	r3, #8
 8006620:	76fb      	strb	r3, [r7, #27]
 8006622:	e0a6      	b.n	8006772 <UART_SetConfig+0x282>
 8006624:	2310      	movs	r3, #16
 8006626:	76fb      	strb	r3, [r7, #27]
 8006628:	e0a3      	b.n	8006772 <UART_SetConfig+0x282>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a6d      	ldr	r2, [pc, #436]	; (80067e4 <UART_SetConfig+0x2f4>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d120      	bne.n	8006676 <UART_SetConfig+0x186>
 8006634:	4b69      	ldr	r3, [pc, #420]	; (80067dc <UART_SetConfig+0x2ec>)
 8006636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800663e:	2b30      	cmp	r3, #48	; 0x30
 8006640:	d013      	beq.n	800666a <UART_SetConfig+0x17a>
 8006642:	2b30      	cmp	r3, #48	; 0x30
 8006644:	d814      	bhi.n	8006670 <UART_SetConfig+0x180>
 8006646:	2b20      	cmp	r3, #32
 8006648:	d009      	beq.n	800665e <UART_SetConfig+0x16e>
 800664a:	2b20      	cmp	r3, #32
 800664c:	d810      	bhi.n	8006670 <UART_SetConfig+0x180>
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <UART_SetConfig+0x168>
 8006652:	2b10      	cmp	r3, #16
 8006654:	d006      	beq.n	8006664 <UART_SetConfig+0x174>
 8006656:	e00b      	b.n	8006670 <UART_SetConfig+0x180>
 8006658:	2300      	movs	r3, #0
 800665a:	76fb      	strb	r3, [r7, #27]
 800665c:	e089      	b.n	8006772 <UART_SetConfig+0x282>
 800665e:	2302      	movs	r3, #2
 8006660:	76fb      	strb	r3, [r7, #27]
 8006662:	e086      	b.n	8006772 <UART_SetConfig+0x282>
 8006664:	2304      	movs	r3, #4
 8006666:	76fb      	strb	r3, [r7, #27]
 8006668:	e083      	b.n	8006772 <UART_SetConfig+0x282>
 800666a:	2308      	movs	r3, #8
 800666c:	76fb      	strb	r3, [r7, #27]
 800666e:	e080      	b.n	8006772 <UART_SetConfig+0x282>
 8006670:	2310      	movs	r3, #16
 8006672:	76fb      	strb	r3, [r7, #27]
 8006674:	e07d      	b.n	8006772 <UART_SetConfig+0x282>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a5b      	ldr	r2, [pc, #364]	; (80067e8 <UART_SetConfig+0x2f8>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d120      	bne.n	80066c2 <UART_SetConfig+0x1d2>
 8006680:	4b56      	ldr	r3, [pc, #344]	; (80067dc <UART_SetConfig+0x2ec>)
 8006682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006686:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800668a:	2bc0      	cmp	r3, #192	; 0xc0
 800668c:	d013      	beq.n	80066b6 <UART_SetConfig+0x1c6>
 800668e:	2bc0      	cmp	r3, #192	; 0xc0
 8006690:	d814      	bhi.n	80066bc <UART_SetConfig+0x1cc>
 8006692:	2b80      	cmp	r3, #128	; 0x80
 8006694:	d009      	beq.n	80066aa <UART_SetConfig+0x1ba>
 8006696:	2b80      	cmp	r3, #128	; 0x80
 8006698:	d810      	bhi.n	80066bc <UART_SetConfig+0x1cc>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d002      	beq.n	80066a4 <UART_SetConfig+0x1b4>
 800669e:	2b40      	cmp	r3, #64	; 0x40
 80066a0:	d006      	beq.n	80066b0 <UART_SetConfig+0x1c0>
 80066a2:	e00b      	b.n	80066bc <UART_SetConfig+0x1cc>
 80066a4:	2300      	movs	r3, #0
 80066a6:	76fb      	strb	r3, [r7, #27]
 80066a8:	e063      	b.n	8006772 <UART_SetConfig+0x282>
 80066aa:	2302      	movs	r3, #2
 80066ac:	76fb      	strb	r3, [r7, #27]
 80066ae:	e060      	b.n	8006772 <UART_SetConfig+0x282>
 80066b0:	2304      	movs	r3, #4
 80066b2:	76fb      	strb	r3, [r7, #27]
 80066b4:	e05d      	b.n	8006772 <UART_SetConfig+0x282>
 80066b6:	2308      	movs	r3, #8
 80066b8:	76fb      	strb	r3, [r7, #27]
 80066ba:	e05a      	b.n	8006772 <UART_SetConfig+0x282>
 80066bc:	2310      	movs	r3, #16
 80066be:	76fb      	strb	r3, [r7, #27]
 80066c0:	e057      	b.n	8006772 <UART_SetConfig+0x282>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a49      	ldr	r2, [pc, #292]	; (80067ec <UART_SetConfig+0x2fc>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d125      	bne.n	8006718 <UART_SetConfig+0x228>
 80066cc:	4b43      	ldr	r3, [pc, #268]	; (80067dc <UART_SetConfig+0x2ec>)
 80066ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066da:	d017      	beq.n	800670c <UART_SetConfig+0x21c>
 80066dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066e0:	d817      	bhi.n	8006712 <UART_SetConfig+0x222>
 80066e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e6:	d00b      	beq.n	8006700 <UART_SetConfig+0x210>
 80066e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ec:	d811      	bhi.n	8006712 <UART_SetConfig+0x222>
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <UART_SetConfig+0x20a>
 80066f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066f6:	d006      	beq.n	8006706 <UART_SetConfig+0x216>
 80066f8:	e00b      	b.n	8006712 <UART_SetConfig+0x222>
 80066fa:	2300      	movs	r3, #0
 80066fc:	76fb      	strb	r3, [r7, #27]
 80066fe:	e038      	b.n	8006772 <UART_SetConfig+0x282>
 8006700:	2302      	movs	r3, #2
 8006702:	76fb      	strb	r3, [r7, #27]
 8006704:	e035      	b.n	8006772 <UART_SetConfig+0x282>
 8006706:	2304      	movs	r3, #4
 8006708:	76fb      	strb	r3, [r7, #27]
 800670a:	e032      	b.n	8006772 <UART_SetConfig+0x282>
 800670c:	2308      	movs	r3, #8
 800670e:	76fb      	strb	r3, [r7, #27]
 8006710:	e02f      	b.n	8006772 <UART_SetConfig+0x282>
 8006712:	2310      	movs	r3, #16
 8006714:	76fb      	strb	r3, [r7, #27]
 8006716:	e02c      	b.n	8006772 <UART_SetConfig+0x282>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a2d      	ldr	r2, [pc, #180]	; (80067d4 <UART_SetConfig+0x2e4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d125      	bne.n	800676e <UART_SetConfig+0x27e>
 8006722:	4b2e      	ldr	r3, [pc, #184]	; (80067dc <UART_SetConfig+0x2ec>)
 8006724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006728:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800672c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006730:	d017      	beq.n	8006762 <UART_SetConfig+0x272>
 8006732:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006736:	d817      	bhi.n	8006768 <UART_SetConfig+0x278>
 8006738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800673c:	d00b      	beq.n	8006756 <UART_SetConfig+0x266>
 800673e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006742:	d811      	bhi.n	8006768 <UART_SetConfig+0x278>
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <UART_SetConfig+0x260>
 8006748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800674c:	d006      	beq.n	800675c <UART_SetConfig+0x26c>
 800674e:	e00b      	b.n	8006768 <UART_SetConfig+0x278>
 8006750:	2300      	movs	r3, #0
 8006752:	76fb      	strb	r3, [r7, #27]
 8006754:	e00d      	b.n	8006772 <UART_SetConfig+0x282>
 8006756:	2302      	movs	r3, #2
 8006758:	76fb      	strb	r3, [r7, #27]
 800675a:	e00a      	b.n	8006772 <UART_SetConfig+0x282>
 800675c:	2304      	movs	r3, #4
 800675e:	76fb      	strb	r3, [r7, #27]
 8006760:	e007      	b.n	8006772 <UART_SetConfig+0x282>
 8006762:	2308      	movs	r3, #8
 8006764:	76fb      	strb	r3, [r7, #27]
 8006766:	e004      	b.n	8006772 <UART_SetConfig+0x282>
 8006768:	2310      	movs	r3, #16
 800676a:	76fb      	strb	r3, [r7, #27]
 800676c:	e001      	b.n	8006772 <UART_SetConfig+0x282>
 800676e:	2310      	movs	r3, #16
 8006770:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a17      	ldr	r2, [pc, #92]	; (80067d4 <UART_SetConfig+0x2e4>)
 8006778:	4293      	cmp	r3, r2
 800677a:	f040 8087 	bne.w	800688c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800677e:	7efb      	ldrb	r3, [r7, #27]
 8006780:	2b08      	cmp	r3, #8
 8006782:	d837      	bhi.n	80067f4 <UART_SetConfig+0x304>
 8006784:	a201      	add	r2, pc, #4	; (adr r2, 800678c <UART_SetConfig+0x29c>)
 8006786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678a:	bf00      	nop
 800678c:	080067b1 	.word	0x080067b1
 8006790:	080067f5 	.word	0x080067f5
 8006794:	080067b9 	.word	0x080067b9
 8006798:	080067f5 	.word	0x080067f5
 800679c:	080067bf 	.word	0x080067bf
 80067a0:	080067f5 	.word	0x080067f5
 80067a4:	080067f5 	.word	0x080067f5
 80067a8:	080067f5 	.word	0x080067f5
 80067ac:	080067c7 	.word	0x080067c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b0:	f7fe f9ac 	bl	8004b0c <HAL_RCC_GetPCLK1Freq>
 80067b4:	6178      	str	r0, [r7, #20]
        break;
 80067b6:	e022      	b.n	80067fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067b8:	4b0d      	ldr	r3, [pc, #52]	; (80067f0 <UART_SetConfig+0x300>)
 80067ba:	617b      	str	r3, [r7, #20]
        break;
 80067bc:	e01f      	b.n	80067fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067be:	f7fe f90d 	bl	80049dc <HAL_RCC_GetSysClockFreq>
 80067c2:	6178      	str	r0, [r7, #20]
        break;
 80067c4:	e01b      	b.n	80067fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ca:	617b      	str	r3, [r7, #20]
        break;
 80067cc:	e017      	b.n	80067fe <UART_SetConfig+0x30e>
 80067ce:	bf00      	nop
 80067d0:	efff69f3 	.word	0xefff69f3
 80067d4:	40008000 	.word	0x40008000
 80067d8:	40013800 	.word	0x40013800
 80067dc:	40021000 	.word	0x40021000
 80067e0:	40004400 	.word	0x40004400
 80067e4:	40004800 	.word	0x40004800
 80067e8:	40004c00 	.word	0x40004c00
 80067ec:	40005000 	.word	0x40005000
 80067f0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	76bb      	strb	r3, [r7, #26]
        break;
 80067fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 80f1 	beq.w	80069e8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	4613      	mov	r3, r2
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	4413      	add	r3, r2
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	429a      	cmp	r2, r3
 8006814:	d305      	bcc.n	8006822 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	429a      	cmp	r2, r3
 8006820:	d902      	bls.n	8006828 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	76bb      	strb	r3, [r7, #26]
 8006826:	e0df      	b.n	80069e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	4618      	mov	r0, r3
 800682c:	f04f 0100 	mov.w	r1, #0
 8006830:	f04f 0200 	mov.w	r2, #0
 8006834:	f04f 0300 	mov.w	r3, #0
 8006838:	020b      	lsls	r3, r1, #8
 800683a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800683e:	0202      	lsls	r2, r0, #8
 8006840:	6879      	ldr	r1, [r7, #4]
 8006842:	6849      	ldr	r1, [r1, #4]
 8006844:	0849      	lsrs	r1, r1, #1
 8006846:	4608      	mov	r0, r1
 8006848:	f04f 0100 	mov.w	r1, #0
 800684c:	1814      	adds	r4, r2, r0
 800684e:	eb43 0501 	adc.w	r5, r3, r1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	461a      	mov	r2, r3
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	4620      	mov	r0, r4
 800685e:	4629      	mov	r1, r5
 8006860:	f7fa f8fc 	bl	8000a5c <__aeabi_uldivmod>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4613      	mov	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006872:	d308      	bcc.n	8006886 <UART_SetConfig+0x396>
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800687a:	d204      	bcs.n	8006886 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	60da      	str	r2, [r3, #12]
 8006884:	e0b0      	b.n	80069e8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	76bb      	strb	r3, [r7, #26]
 800688a:	e0ad      	b.n	80069e8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006894:	d15c      	bne.n	8006950 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006896:	7efb      	ldrb	r3, [r7, #27]
 8006898:	2b08      	cmp	r3, #8
 800689a:	d828      	bhi.n	80068ee <UART_SetConfig+0x3fe>
 800689c:	a201      	add	r2, pc, #4	; (adr r2, 80068a4 <UART_SetConfig+0x3b4>)
 800689e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a2:	bf00      	nop
 80068a4:	080068c9 	.word	0x080068c9
 80068a8:	080068d1 	.word	0x080068d1
 80068ac:	080068d9 	.word	0x080068d9
 80068b0:	080068ef 	.word	0x080068ef
 80068b4:	080068df 	.word	0x080068df
 80068b8:	080068ef 	.word	0x080068ef
 80068bc:	080068ef 	.word	0x080068ef
 80068c0:	080068ef 	.word	0x080068ef
 80068c4:	080068e7 	.word	0x080068e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c8:	f7fe f920 	bl	8004b0c <HAL_RCC_GetPCLK1Freq>
 80068cc:	6178      	str	r0, [r7, #20]
        break;
 80068ce:	e013      	b.n	80068f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068d0:	f7fe f932 	bl	8004b38 <HAL_RCC_GetPCLK2Freq>
 80068d4:	6178      	str	r0, [r7, #20]
        break;
 80068d6:	e00f      	b.n	80068f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068d8:	4b49      	ldr	r3, [pc, #292]	; (8006a00 <UART_SetConfig+0x510>)
 80068da:	617b      	str	r3, [r7, #20]
        break;
 80068dc:	e00c      	b.n	80068f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068de:	f7fe f87d 	bl	80049dc <HAL_RCC_GetSysClockFreq>
 80068e2:	6178      	str	r0, [r7, #20]
        break;
 80068e4:	e008      	b.n	80068f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ea:	617b      	str	r3, [r7, #20]
        break;
 80068ec:	e004      	b.n	80068f8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	76bb      	strb	r3, [r7, #26]
        break;
 80068f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d074      	beq.n	80069e8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	005a      	lsls	r2, r3, #1
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	085b      	lsrs	r3, r3, #1
 8006908:	441a      	add	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006912:	b29b      	uxth	r3, r3
 8006914:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	2b0f      	cmp	r3, #15
 800691a:	d916      	bls.n	800694a <UART_SetConfig+0x45a>
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006922:	d212      	bcs.n	800694a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	b29b      	uxth	r3, r3
 8006928:	f023 030f 	bic.w	r3, r3, #15
 800692c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	085b      	lsrs	r3, r3, #1
 8006932:	b29b      	uxth	r3, r3
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	b29a      	uxth	r2, r3
 800693a:	89fb      	ldrh	r3, [r7, #14]
 800693c:	4313      	orrs	r3, r2
 800693e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	89fa      	ldrh	r2, [r7, #14]
 8006946:	60da      	str	r2, [r3, #12]
 8006948:	e04e      	b.n	80069e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	76bb      	strb	r3, [r7, #26]
 800694e:	e04b      	b.n	80069e8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006950:	7efb      	ldrb	r3, [r7, #27]
 8006952:	2b08      	cmp	r3, #8
 8006954:	d827      	bhi.n	80069a6 <UART_SetConfig+0x4b6>
 8006956:	a201      	add	r2, pc, #4	; (adr r2, 800695c <UART_SetConfig+0x46c>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	08006981 	.word	0x08006981
 8006960:	08006989 	.word	0x08006989
 8006964:	08006991 	.word	0x08006991
 8006968:	080069a7 	.word	0x080069a7
 800696c:	08006997 	.word	0x08006997
 8006970:	080069a7 	.word	0x080069a7
 8006974:	080069a7 	.word	0x080069a7
 8006978:	080069a7 	.word	0x080069a7
 800697c:	0800699f 	.word	0x0800699f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006980:	f7fe f8c4 	bl	8004b0c <HAL_RCC_GetPCLK1Freq>
 8006984:	6178      	str	r0, [r7, #20]
        break;
 8006986:	e013      	b.n	80069b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006988:	f7fe f8d6 	bl	8004b38 <HAL_RCC_GetPCLK2Freq>
 800698c:	6178      	str	r0, [r7, #20]
        break;
 800698e:	e00f      	b.n	80069b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006990:	4b1b      	ldr	r3, [pc, #108]	; (8006a00 <UART_SetConfig+0x510>)
 8006992:	617b      	str	r3, [r7, #20]
        break;
 8006994:	e00c      	b.n	80069b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006996:	f7fe f821 	bl	80049dc <HAL_RCC_GetSysClockFreq>
 800699a:	6178      	str	r0, [r7, #20]
        break;
 800699c:	e008      	b.n	80069b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800699e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069a2:	617b      	str	r3, [r7, #20]
        break;
 80069a4:	e004      	b.n	80069b0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	76bb      	strb	r3, [r7, #26]
        break;
 80069ae:	bf00      	nop
    }

    if (pclk != 0U)
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d018      	beq.n	80069e8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	085a      	lsrs	r2, r3, #1
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	441a      	add	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	2b0f      	cmp	r3, #15
 80069d0:	d908      	bls.n	80069e4 <UART_SetConfig+0x4f4>
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d8:	d204      	bcs.n	80069e4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	60da      	str	r2, [r3, #12]
 80069e2:	e001      	b.n	80069e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80069f4:	7ebb      	ldrb	r3, [r7, #26]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3720      	adds	r7, #32
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bdb0      	pop	{r4, r5, r7, pc}
 80069fe:	bf00      	nop
 8006a00:	00f42400 	.word	0x00f42400

08006a04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00a      	beq.n	8006a2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00a      	beq.n	8006a72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	f003 0308 	and.w	r3, r3, #8
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a98:	f003 0310 	and.w	r3, r3, #16
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00a      	beq.n	8006ab6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d01a      	beq.n	8006b1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b02:	d10a      	bne.n	8006b1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	605a      	str	r2, [r3, #4]
  }
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af02      	add	r7, sp, #8
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b58:	f7fb f866 	bl	8001c28 <HAL_GetTick>
 8006b5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0308 	and.w	r3, r3, #8
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d10e      	bne.n	8006b8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f82d 	bl	8006bda <UART_WaitOnFlagUntilTimeout>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e023      	b.n	8006bd2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	d10e      	bne.n	8006bb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f817 	bl	8006bda <UART_WaitOnFlagUntilTimeout>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e00d      	b.n	8006bd2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	603b      	str	r3, [r7, #0]
 8006be6:	4613      	mov	r3, r2
 8006be8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bea:	e05e      	b.n	8006caa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf2:	d05a      	beq.n	8006caa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bf4:	f7fb f818 	bl	8001c28 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d302      	bcc.n	8006c0a <UART_WaitOnFlagUntilTimeout+0x30>
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d11b      	bne.n	8006c42 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c18:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0201 	bic.w	r2, r2, #1
 8006c28:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2220      	movs	r2, #32
 8006c34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e043      	b.n	8006cca <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d02c      	beq.n	8006caa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c5e:	d124      	bne.n	8006caa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c68:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c78:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 0201 	bic.w	r2, r2, #1
 8006c88:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2220      	movs	r2, #32
 8006c94:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e00f      	b.n	8006cca <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69da      	ldr	r2, [r3, #28]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	bf0c      	ite	eq
 8006cba:	2301      	moveq	r3, #1
 8006cbc:	2300      	movne	r3, #0
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	79fb      	ldrb	r3, [r7, #7]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d091      	beq.n	8006bec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
	...

08006cd4 <__errno>:
 8006cd4:	4b01      	ldr	r3, [pc, #4]	; (8006cdc <__errno+0x8>)
 8006cd6:	6818      	ldr	r0, [r3, #0]
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	2000008c 	.word	0x2000008c

08006ce0 <__libc_init_array>:
 8006ce0:	b570      	push	{r4, r5, r6, lr}
 8006ce2:	4d0d      	ldr	r5, [pc, #52]	; (8006d18 <__libc_init_array+0x38>)
 8006ce4:	4c0d      	ldr	r4, [pc, #52]	; (8006d1c <__libc_init_array+0x3c>)
 8006ce6:	1b64      	subs	r4, r4, r5
 8006ce8:	10a4      	asrs	r4, r4, #2
 8006cea:	2600      	movs	r6, #0
 8006cec:	42a6      	cmp	r6, r4
 8006cee:	d109      	bne.n	8006d04 <__libc_init_array+0x24>
 8006cf0:	4d0b      	ldr	r5, [pc, #44]	; (8006d20 <__libc_init_array+0x40>)
 8006cf2:	4c0c      	ldr	r4, [pc, #48]	; (8006d24 <__libc_init_array+0x44>)
 8006cf4:	f000 fc60 	bl	80075b8 <_init>
 8006cf8:	1b64      	subs	r4, r4, r5
 8006cfa:	10a4      	asrs	r4, r4, #2
 8006cfc:	2600      	movs	r6, #0
 8006cfe:	42a6      	cmp	r6, r4
 8006d00:	d105      	bne.n	8006d0e <__libc_init_array+0x2e>
 8006d02:	bd70      	pop	{r4, r5, r6, pc}
 8006d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d08:	4798      	blx	r3
 8006d0a:	3601      	adds	r6, #1
 8006d0c:	e7ee      	b.n	8006cec <__libc_init_array+0xc>
 8006d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d12:	4798      	blx	r3
 8006d14:	3601      	adds	r6, #1
 8006d16:	e7f2      	b.n	8006cfe <__libc_init_array+0x1e>
 8006d18:	08007674 	.word	0x08007674
 8006d1c:	08007674 	.word	0x08007674
 8006d20:	08007674 	.word	0x08007674
 8006d24:	08007678 	.word	0x08007678

08006d28 <memset>:
 8006d28:	4402      	add	r2, r0
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d100      	bne.n	8006d32 <memset+0xa>
 8006d30:	4770      	bx	lr
 8006d32:	f803 1b01 	strb.w	r1, [r3], #1
 8006d36:	e7f9      	b.n	8006d2c <memset+0x4>

08006d38 <siprintf>:
 8006d38:	b40e      	push	{r1, r2, r3}
 8006d3a:	b500      	push	{lr}
 8006d3c:	b09c      	sub	sp, #112	; 0x70
 8006d3e:	ab1d      	add	r3, sp, #116	; 0x74
 8006d40:	9002      	str	r0, [sp, #8]
 8006d42:	9006      	str	r0, [sp, #24]
 8006d44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d48:	4809      	ldr	r0, [pc, #36]	; (8006d70 <siprintf+0x38>)
 8006d4a:	9107      	str	r1, [sp, #28]
 8006d4c:	9104      	str	r1, [sp, #16]
 8006d4e:	4909      	ldr	r1, [pc, #36]	; (8006d74 <siprintf+0x3c>)
 8006d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d54:	9105      	str	r1, [sp, #20]
 8006d56:	6800      	ldr	r0, [r0, #0]
 8006d58:	9301      	str	r3, [sp, #4]
 8006d5a:	a902      	add	r1, sp, #8
 8006d5c:	f000 f87a 	bl	8006e54 <_svfiprintf_r>
 8006d60:	9b02      	ldr	r3, [sp, #8]
 8006d62:	2200      	movs	r2, #0
 8006d64:	701a      	strb	r2, [r3, #0]
 8006d66:	b01c      	add	sp, #112	; 0x70
 8006d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d6c:	b003      	add	sp, #12
 8006d6e:	4770      	bx	lr
 8006d70:	2000008c 	.word	0x2000008c
 8006d74:	ffff0208 	.word	0xffff0208

08006d78 <strncpy>:
 8006d78:	b510      	push	{r4, lr}
 8006d7a:	3901      	subs	r1, #1
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	b132      	cbz	r2, 8006d8e <strncpy+0x16>
 8006d80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006d84:	f803 4b01 	strb.w	r4, [r3], #1
 8006d88:	3a01      	subs	r2, #1
 8006d8a:	2c00      	cmp	r4, #0
 8006d8c:	d1f7      	bne.n	8006d7e <strncpy+0x6>
 8006d8e:	441a      	add	r2, r3
 8006d90:	2100      	movs	r1, #0
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d100      	bne.n	8006d98 <strncpy+0x20>
 8006d96:	bd10      	pop	{r4, pc}
 8006d98:	f803 1b01 	strb.w	r1, [r3], #1
 8006d9c:	e7f9      	b.n	8006d92 <strncpy+0x1a>

08006d9e <__ssputs_r>:
 8006d9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da2:	688e      	ldr	r6, [r1, #8]
 8006da4:	429e      	cmp	r6, r3
 8006da6:	4682      	mov	sl, r0
 8006da8:	460c      	mov	r4, r1
 8006daa:	4690      	mov	r8, r2
 8006dac:	461f      	mov	r7, r3
 8006dae:	d838      	bhi.n	8006e22 <__ssputs_r+0x84>
 8006db0:	898a      	ldrh	r2, [r1, #12]
 8006db2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006db6:	d032      	beq.n	8006e1e <__ssputs_r+0x80>
 8006db8:	6825      	ldr	r5, [r4, #0]
 8006dba:	6909      	ldr	r1, [r1, #16]
 8006dbc:	eba5 0901 	sub.w	r9, r5, r1
 8006dc0:	6965      	ldr	r5, [r4, #20]
 8006dc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006dca:	3301      	adds	r3, #1
 8006dcc:	444b      	add	r3, r9
 8006dce:	106d      	asrs	r5, r5, #1
 8006dd0:	429d      	cmp	r5, r3
 8006dd2:	bf38      	it	cc
 8006dd4:	461d      	movcc	r5, r3
 8006dd6:	0553      	lsls	r3, r2, #21
 8006dd8:	d531      	bpl.n	8006e3e <__ssputs_r+0xa0>
 8006dda:	4629      	mov	r1, r5
 8006ddc:	f000 fb46 	bl	800746c <_malloc_r>
 8006de0:	4606      	mov	r6, r0
 8006de2:	b950      	cbnz	r0, 8006dfa <__ssputs_r+0x5c>
 8006de4:	230c      	movs	r3, #12
 8006de6:	f8ca 3000 	str.w	r3, [sl]
 8006dea:	89a3      	ldrh	r3, [r4, #12]
 8006dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006df0:	81a3      	strh	r3, [r4, #12]
 8006df2:	f04f 30ff 	mov.w	r0, #4294967295
 8006df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfa:	6921      	ldr	r1, [r4, #16]
 8006dfc:	464a      	mov	r2, r9
 8006dfe:	f000 fabd 	bl	800737c <memcpy>
 8006e02:	89a3      	ldrh	r3, [r4, #12]
 8006e04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e0c:	81a3      	strh	r3, [r4, #12]
 8006e0e:	6126      	str	r6, [r4, #16]
 8006e10:	6165      	str	r5, [r4, #20]
 8006e12:	444e      	add	r6, r9
 8006e14:	eba5 0509 	sub.w	r5, r5, r9
 8006e18:	6026      	str	r6, [r4, #0]
 8006e1a:	60a5      	str	r5, [r4, #8]
 8006e1c:	463e      	mov	r6, r7
 8006e1e:	42be      	cmp	r6, r7
 8006e20:	d900      	bls.n	8006e24 <__ssputs_r+0x86>
 8006e22:	463e      	mov	r6, r7
 8006e24:	4632      	mov	r2, r6
 8006e26:	6820      	ldr	r0, [r4, #0]
 8006e28:	4641      	mov	r1, r8
 8006e2a:	f000 fab5 	bl	8007398 <memmove>
 8006e2e:	68a3      	ldr	r3, [r4, #8]
 8006e30:	6822      	ldr	r2, [r4, #0]
 8006e32:	1b9b      	subs	r3, r3, r6
 8006e34:	4432      	add	r2, r6
 8006e36:	60a3      	str	r3, [r4, #8]
 8006e38:	6022      	str	r2, [r4, #0]
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	e7db      	b.n	8006df6 <__ssputs_r+0x58>
 8006e3e:	462a      	mov	r2, r5
 8006e40:	f000 fb6e 	bl	8007520 <_realloc_r>
 8006e44:	4606      	mov	r6, r0
 8006e46:	2800      	cmp	r0, #0
 8006e48:	d1e1      	bne.n	8006e0e <__ssputs_r+0x70>
 8006e4a:	6921      	ldr	r1, [r4, #16]
 8006e4c:	4650      	mov	r0, sl
 8006e4e:	f000 fabd 	bl	80073cc <_free_r>
 8006e52:	e7c7      	b.n	8006de4 <__ssputs_r+0x46>

08006e54 <_svfiprintf_r>:
 8006e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e58:	4698      	mov	r8, r3
 8006e5a:	898b      	ldrh	r3, [r1, #12]
 8006e5c:	061b      	lsls	r3, r3, #24
 8006e5e:	b09d      	sub	sp, #116	; 0x74
 8006e60:	4607      	mov	r7, r0
 8006e62:	460d      	mov	r5, r1
 8006e64:	4614      	mov	r4, r2
 8006e66:	d50e      	bpl.n	8006e86 <_svfiprintf_r+0x32>
 8006e68:	690b      	ldr	r3, [r1, #16]
 8006e6a:	b963      	cbnz	r3, 8006e86 <_svfiprintf_r+0x32>
 8006e6c:	2140      	movs	r1, #64	; 0x40
 8006e6e:	f000 fafd 	bl	800746c <_malloc_r>
 8006e72:	6028      	str	r0, [r5, #0]
 8006e74:	6128      	str	r0, [r5, #16]
 8006e76:	b920      	cbnz	r0, 8006e82 <_svfiprintf_r+0x2e>
 8006e78:	230c      	movs	r3, #12
 8006e7a:	603b      	str	r3, [r7, #0]
 8006e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e80:	e0d1      	b.n	8007026 <_svfiprintf_r+0x1d2>
 8006e82:	2340      	movs	r3, #64	; 0x40
 8006e84:	616b      	str	r3, [r5, #20]
 8006e86:	2300      	movs	r3, #0
 8006e88:	9309      	str	r3, [sp, #36]	; 0x24
 8006e8a:	2320      	movs	r3, #32
 8006e8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e90:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e94:	2330      	movs	r3, #48	; 0x30
 8006e96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007040 <_svfiprintf_r+0x1ec>
 8006e9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e9e:	f04f 0901 	mov.w	r9, #1
 8006ea2:	4623      	mov	r3, r4
 8006ea4:	469a      	mov	sl, r3
 8006ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eaa:	b10a      	cbz	r2, 8006eb0 <_svfiprintf_r+0x5c>
 8006eac:	2a25      	cmp	r2, #37	; 0x25
 8006eae:	d1f9      	bne.n	8006ea4 <_svfiprintf_r+0x50>
 8006eb0:	ebba 0b04 	subs.w	fp, sl, r4
 8006eb4:	d00b      	beq.n	8006ece <_svfiprintf_r+0x7a>
 8006eb6:	465b      	mov	r3, fp
 8006eb8:	4622      	mov	r2, r4
 8006eba:	4629      	mov	r1, r5
 8006ebc:	4638      	mov	r0, r7
 8006ebe:	f7ff ff6e 	bl	8006d9e <__ssputs_r>
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	f000 80aa 	beq.w	800701c <_svfiprintf_r+0x1c8>
 8006ec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eca:	445a      	add	r2, fp
 8006ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8006ece:	f89a 3000 	ldrb.w	r3, [sl]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 80a2 	beq.w	800701c <_svfiprintf_r+0x1c8>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f04f 32ff 	mov.w	r2, #4294967295
 8006ede:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ee2:	f10a 0a01 	add.w	sl, sl, #1
 8006ee6:	9304      	str	r3, [sp, #16]
 8006ee8:	9307      	str	r3, [sp, #28]
 8006eea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006eee:	931a      	str	r3, [sp, #104]	; 0x68
 8006ef0:	4654      	mov	r4, sl
 8006ef2:	2205      	movs	r2, #5
 8006ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ef8:	4851      	ldr	r0, [pc, #324]	; (8007040 <_svfiprintf_r+0x1ec>)
 8006efa:	f7f9 f971 	bl	80001e0 <memchr>
 8006efe:	9a04      	ldr	r2, [sp, #16]
 8006f00:	b9d8      	cbnz	r0, 8006f3a <_svfiprintf_r+0xe6>
 8006f02:	06d0      	lsls	r0, r2, #27
 8006f04:	bf44      	itt	mi
 8006f06:	2320      	movmi	r3, #32
 8006f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f0c:	0711      	lsls	r1, r2, #28
 8006f0e:	bf44      	itt	mi
 8006f10:	232b      	movmi	r3, #43	; 0x2b
 8006f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f16:	f89a 3000 	ldrb.w	r3, [sl]
 8006f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f1c:	d015      	beq.n	8006f4a <_svfiprintf_r+0xf6>
 8006f1e:	9a07      	ldr	r2, [sp, #28]
 8006f20:	4654      	mov	r4, sl
 8006f22:	2000      	movs	r0, #0
 8006f24:	f04f 0c0a 	mov.w	ip, #10
 8006f28:	4621      	mov	r1, r4
 8006f2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f2e:	3b30      	subs	r3, #48	; 0x30
 8006f30:	2b09      	cmp	r3, #9
 8006f32:	d94e      	bls.n	8006fd2 <_svfiprintf_r+0x17e>
 8006f34:	b1b0      	cbz	r0, 8006f64 <_svfiprintf_r+0x110>
 8006f36:	9207      	str	r2, [sp, #28]
 8006f38:	e014      	b.n	8006f64 <_svfiprintf_r+0x110>
 8006f3a:	eba0 0308 	sub.w	r3, r0, r8
 8006f3e:	fa09 f303 	lsl.w	r3, r9, r3
 8006f42:	4313      	orrs	r3, r2
 8006f44:	9304      	str	r3, [sp, #16]
 8006f46:	46a2      	mov	sl, r4
 8006f48:	e7d2      	b.n	8006ef0 <_svfiprintf_r+0x9c>
 8006f4a:	9b03      	ldr	r3, [sp, #12]
 8006f4c:	1d19      	adds	r1, r3, #4
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	9103      	str	r1, [sp, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	bfbb      	ittet	lt
 8006f56:	425b      	neglt	r3, r3
 8006f58:	f042 0202 	orrlt.w	r2, r2, #2
 8006f5c:	9307      	strge	r3, [sp, #28]
 8006f5e:	9307      	strlt	r3, [sp, #28]
 8006f60:	bfb8      	it	lt
 8006f62:	9204      	strlt	r2, [sp, #16]
 8006f64:	7823      	ldrb	r3, [r4, #0]
 8006f66:	2b2e      	cmp	r3, #46	; 0x2e
 8006f68:	d10c      	bne.n	8006f84 <_svfiprintf_r+0x130>
 8006f6a:	7863      	ldrb	r3, [r4, #1]
 8006f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f6e:	d135      	bne.n	8006fdc <_svfiprintf_r+0x188>
 8006f70:	9b03      	ldr	r3, [sp, #12]
 8006f72:	1d1a      	adds	r2, r3, #4
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	9203      	str	r2, [sp, #12]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	bfb8      	it	lt
 8006f7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f80:	3402      	adds	r4, #2
 8006f82:	9305      	str	r3, [sp, #20]
 8006f84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007050 <_svfiprintf_r+0x1fc>
 8006f88:	7821      	ldrb	r1, [r4, #0]
 8006f8a:	2203      	movs	r2, #3
 8006f8c:	4650      	mov	r0, sl
 8006f8e:	f7f9 f927 	bl	80001e0 <memchr>
 8006f92:	b140      	cbz	r0, 8006fa6 <_svfiprintf_r+0x152>
 8006f94:	2340      	movs	r3, #64	; 0x40
 8006f96:	eba0 000a 	sub.w	r0, r0, sl
 8006f9a:	fa03 f000 	lsl.w	r0, r3, r0
 8006f9e:	9b04      	ldr	r3, [sp, #16]
 8006fa0:	4303      	orrs	r3, r0
 8006fa2:	3401      	adds	r4, #1
 8006fa4:	9304      	str	r3, [sp, #16]
 8006fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006faa:	4826      	ldr	r0, [pc, #152]	; (8007044 <_svfiprintf_r+0x1f0>)
 8006fac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fb0:	2206      	movs	r2, #6
 8006fb2:	f7f9 f915 	bl	80001e0 <memchr>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	d038      	beq.n	800702c <_svfiprintf_r+0x1d8>
 8006fba:	4b23      	ldr	r3, [pc, #140]	; (8007048 <_svfiprintf_r+0x1f4>)
 8006fbc:	bb1b      	cbnz	r3, 8007006 <_svfiprintf_r+0x1b2>
 8006fbe:	9b03      	ldr	r3, [sp, #12]
 8006fc0:	3307      	adds	r3, #7
 8006fc2:	f023 0307 	bic.w	r3, r3, #7
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	9303      	str	r3, [sp, #12]
 8006fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fcc:	4433      	add	r3, r6
 8006fce:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd0:	e767      	b.n	8006ea2 <_svfiprintf_r+0x4e>
 8006fd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fd6:	460c      	mov	r4, r1
 8006fd8:	2001      	movs	r0, #1
 8006fda:	e7a5      	b.n	8006f28 <_svfiprintf_r+0xd4>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	3401      	adds	r4, #1
 8006fe0:	9305      	str	r3, [sp, #20]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	f04f 0c0a 	mov.w	ip, #10
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fee:	3a30      	subs	r2, #48	; 0x30
 8006ff0:	2a09      	cmp	r2, #9
 8006ff2:	d903      	bls.n	8006ffc <_svfiprintf_r+0x1a8>
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d0c5      	beq.n	8006f84 <_svfiprintf_r+0x130>
 8006ff8:	9105      	str	r1, [sp, #20]
 8006ffa:	e7c3      	b.n	8006f84 <_svfiprintf_r+0x130>
 8006ffc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007000:	4604      	mov	r4, r0
 8007002:	2301      	movs	r3, #1
 8007004:	e7f0      	b.n	8006fe8 <_svfiprintf_r+0x194>
 8007006:	ab03      	add	r3, sp, #12
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	462a      	mov	r2, r5
 800700c:	4b0f      	ldr	r3, [pc, #60]	; (800704c <_svfiprintf_r+0x1f8>)
 800700e:	a904      	add	r1, sp, #16
 8007010:	4638      	mov	r0, r7
 8007012:	f3af 8000 	nop.w
 8007016:	1c42      	adds	r2, r0, #1
 8007018:	4606      	mov	r6, r0
 800701a:	d1d6      	bne.n	8006fca <_svfiprintf_r+0x176>
 800701c:	89ab      	ldrh	r3, [r5, #12]
 800701e:	065b      	lsls	r3, r3, #25
 8007020:	f53f af2c 	bmi.w	8006e7c <_svfiprintf_r+0x28>
 8007024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007026:	b01d      	add	sp, #116	; 0x74
 8007028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702c:	ab03      	add	r3, sp, #12
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	462a      	mov	r2, r5
 8007032:	4b06      	ldr	r3, [pc, #24]	; (800704c <_svfiprintf_r+0x1f8>)
 8007034:	a904      	add	r1, sp, #16
 8007036:	4638      	mov	r0, r7
 8007038:	f000 f87a 	bl	8007130 <_printf_i>
 800703c:	e7eb      	b.n	8007016 <_svfiprintf_r+0x1c2>
 800703e:	bf00      	nop
 8007040:	08007638 	.word	0x08007638
 8007044:	08007642 	.word	0x08007642
 8007048:	00000000 	.word	0x00000000
 800704c:	08006d9f 	.word	0x08006d9f
 8007050:	0800763e 	.word	0x0800763e

08007054 <_printf_common>:
 8007054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007058:	4616      	mov	r6, r2
 800705a:	4699      	mov	r9, r3
 800705c:	688a      	ldr	r2, [r1, #8]
 800705e:	690b      	ldr	r3, [r1, #16]
 8007060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007064:	4293      	cmp	r3, r2
 8007066:	bfb8      	it	lt
 8007068:	4613      	movlt	r3, r2
 800706a:	6033      	str	r3, [r6, #0]
 800706c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007070:	4607      	mov	r7, r0
 8007072:	460c      	mov	r4, r1
 8007074:	b10a      	cbz	r2, 800707a <_printf_common+0x26>
 8007076:	3301      	adds	r3, #1
 8007078:	6033      	str	r3, [r6, #0]
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	0699      	lsls	r1, r3, #26
 800707e:	bf42      	ittt	mi
 8007080:	6833      	ldrmi	r3, [r6, #0]
 8007082:	3302      	addmi	r3, #2
 8007084:	6033      	strmi	r3, [r6, #0]
 8007086:	6825      	ldr	r5, [r4, #0]
 8007088:	f015 0506 	ands.w	r5, r5, #6
 800708c:	d106      	bne.n	800709c <_printf_common+0x48>
 800708e:	f104 0a19 	add.w	sl, r4, #25
 8007092:	68e3      	ldr	r3, [r4, #12]
 8007094:	6832      	ldr	r2, [r6, #0]
 8007096:	1a9b      	subs	r3, r3, r2
 8007098:	42ab      	cmp	r3, r5
 800709a:	dc26      	bgt.n	80070ea <_printf_common+0x96>
 800709c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070a0:	1e13      	subs	r3, r2, #0
 80070a2:	6822      	ldr	r2, [r4, #0]
 80070a4:	bf18      	it	ne
 80070a6:	2301      	movne	r3, #1
 80070a8:	0692      	lsls	r2, r2, #26
 80070aa:	d42b      	bmi.n	8007104 <_printf_common+0xb0>
 80070ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070b0:	4649      	mov	r1, r9
 80070b2:	4638      	mov	r0, r7
 80070b4:	47c0      	blx	r8
 80070b6:	3001      	adds	r0, #1
 80070b8:	d01e      	beq.n	80070f8 <_printf_common+0xa4>
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	68e5      	ldr	r5, [r4, #12]
 80070be:	6832      	ldr	r2, [r6, #0]
 80070c0:	f003 0306 	and.w	r3, r3, #6
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	bf08      	it	eq
 80070c8:	1aad      	subeq	r5, r5, r2
 80070ca:	68a3      	ldr	r3, [r4, #8]
 80070cc:	6922      	ldr	r2, [r4, #16]
 80070ce:	bf0c      	ite	eq
 80070d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070d4:	2500      	movne	r5, #0
 80070d6:	4293      	cmp	r3, r2
 80070d8:	bfc4      	itt	gt
 80070da:	1a9b      	subgt	r3, r3, r2
 80070dc:	18ed      	addgt	r5, r5, r3
 80070de:	2600      	movs	r6, #0
 80070e0:	341a      	adds	r4, #26
 80070e2:	42b5      	cmp	r5, r6
 80070e4:	d11a      	bne.n	800711c <_printf_common+0xc8>
 80070e6:	2000      	movs	r0, #0
 80070e8:	e008      	b.n	80070fc <_printf_common+0xa8>
 80070ea:	2301      	movs	r3, #1
 80070ec:	4652      	mov	r2, sl
 80070ee:	4649      	mov	r1, r9
 80070f0:	4638      	mov	r0, r7
 80070f2:	47c0      	blx	r8
 80070f4:	3001      	adds	r0, #1
 80070f6:	d103      	bne.n	8007100 <_printf_common+0xac>
 80070f8:	f04f 30ff 	mov.w	r0, #4294967295
 80070fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007100:	3501      	adds	r5, #1
 8007102:	e7c6      	b.n	8007092 <_printf_common+0x3e>
 8007104:	18e1      	adds	r1, r4, r3
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	2030      	movs	r0, #48	; 0x30
 800710a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800710e:	4422      	add	r2, r4
 8007110:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007114:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007118:	3302      	adds	r3, #2
 800711a:	e7c7      	b.n	80070ac <_printf_common+0x58>
 800711c:	2301      	movs	r3, #1
 800711e:	4622      	mov	r2, r4
 8007120:	4649      	mov	r1, r9
 8007122:	4638      	mov	r0, r7
 8007124:	47c0      	blx	r8
 8007126:	3001      	adds	r0, #1
 8007128:	d0e6      	beq.n	80070f8 <_printf_common+0xa4>
 800712a:	3601      	adds	r6, #1
 800712c:	e7d9      	b.n	80070e2 <_printf_common+0x8e>
	...

08007130 <_printf_i>:
 8007130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007134:	460c      	mov	r4, r1
 8007136:	4691      	mov	r9, r2
 8007138:	7e27      	ldrb	r7, [r4, #24]
 800713a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800713c:	2f78      	cmp	r7, #120	; 0x78
 800713e:	4680      	mov	r8, r0
 8007140:	469a      	mov	sl, r3
 8007142:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007146:	d807      	bhi.n	8007158 <_printf_i+0x28>
 8007148:	2f62      	cmp	r7, #98	; 0x62
 800714a:	d80a      	bhi.n	8007162 <_printf_i+0x32>
 800714c:	2f00      	cmp	r7, #0
 800714e:	f000 80d8 	beq.w	8007302 <_printf_i+0x1d2>
 8007152:	2f58      	cmp	r7, #88	; 0x58
 8007154:	f000 80a3 	beq.w	800729e <_printf_i+0x16e>
 8007158:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800715c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007160:	e03a      	b.n	80071d8 <_printf_i+0xa8>
 8007162:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007166:	2b15      	cmp	r3, #21
 8007168:	d8f6      	bhi.n	8007158 <_printf_i+0x28>
 800716a:	a001      	add	r0, pc, #4	; (adr r0, 8007170 <_printf_i+0x40>)
 800716c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007170:	080071c9 	.word	0x080071c9
 8007174:	080071dd 	.word	0x080071dd
 8007178:	08007159 	.word	0x08007159
 800717c:	08007159 	.word	0x08007159
 8007180:	08007159 	.word	0x08007159
 8007184:	08007159 	.word	0x08007159
 8007188:	080071dd 	.word	0x080071dd
 800718c:	08007159 	.word	0x08007159
 8007190:	08007159 	.word	0x08007159
 8007194:	08007159 	.word	0x08007159
 8007198:	08007159 	.word	0x08007159
 800719c:	080072e9 	.word	0x080072e9
 80071a0:	0800720d 	.word	0x0800720d
 80071a4:	080072cb 	.word	0x080072cb
 80071a8:	08007159 	.word	0x08007159
 80071ac:	08007159 	.word	0x08007159
 80071b0:	0800730b 	.word	0x0800730b
 80071b4:	08007159 	.word	0x08007159
 80071b8:	0800720d 	.word	0x0800720d
 80071bc:	08007159 	.word	0x08007159
 80071c0:	08007159 	.word	0x08007159
 80071c4:	080072d3 	.word	0x080072d3
 80071c8:	680b      	ldr	r3, [r1, #0]
 80071ca:	1d1a      	adds	r2, r3, #4
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	600a      	str	r2, [r1, #0]
 80071d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071d8:	2301      	movs	r3, #1
 80071da:	e0a3      	b.n	8007324 <_printf_i+0x1f4>
 80071dc:	6825      	ldr	r5, [r4, #0]
 80071de:	6808      	ldr	r0, [r1, #0]
 80071e0:	062e      	lsls	r6, r5, #24
 80071e2:	f100 0304 	add.w	r3, r0, #4
 80071e6:	d50a      	bpl.n	80071fe <_printf_i+0xce>
 80071e8:	6805      	ldr	r5, [r0, #0]
 80071ea:	600b      	str	r3, [r1, #0]
 80071ec:	2d00      	cmp	r5, #0
 80071ee:	da03      	bge.n	80071f8 <_printf_i+0xc8>
 80071f0:	232d      	movs	r3, #45	; 0x2d
 80071f2:	426d      	negs	r5, r5
 80071f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071f8:	485e      	ldr	r0, [pc, #376]	; (8007374 <_printf_i+0x244>)
 80071fa:	230a      	movs	r3, #10
 80071fc:	e019      	b.n	8007232 <_printf_i+0x102>
 80071fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007202:	6805      	ldr	r5, [r0, #0]
 8007204:	600b      	str	r3, [r1, #0]
 8007206:	bf18      	it	ne
 8007208:	b22d      	sxthne	r5, r5
 800720a:	e7ef      	b.n	80071ec <_printf_i+0xbc>
 800720c:	680b      	ldr	r3, [r1, #0]
 800720e:	6825      	ldr	r5, [r4, #0]
 8007210:	1d18      	adds	r0, r3, #4
 8007212:	6008      	str	r0, [r1, #0]
 8007214:	0628      	lsls	r0, r5, #24
 8007216:	d501      	bpl.n	800721c <_printf_i+0xec>
 8007218:	681d      	ldr	r5, [r3, #0]
 800721a:	e002      	b.n	8007222 <_printf_i+0xf2>
 800721c:	0669      	lsls	r1, r5, #25
 800721e:	d5fb      	bpl.n	8007218 <_printf_i+0xe8>
 8007220:	881d      	ldrh	r5, [r3, #0]
 8007222:	4854      	ldr	r0, [pc, #336]	; (8007374 <_printf_i+0x244>)
 8007224:	2f6f      	cmp	r7, #111	; 0x6f
 8007226:	bf0c      	ite	eq
 8007228:	2308      	moveq	r3, #8
 800722a:	230a      	movne	r3, #10
 800722c:	2100      	movs	r1, #0
 800722e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007232:	6866      	ldr	r6, [r4, #4]
 8007234:	60a6      	str	r6, [r4, #8]
 8007236:	2e00      	cmp	r6, #0
 8007238:	bfa2      	ittt	ge
 800723a:	6821      	ldrge	r1, [r4, #0]
 800723c:	f021 0104 	bicge.w	r1, r1, #4
 8007240:	6021      	strge	r1, [r4, #0]
 8007242:	b90d      	cbnz	r5, 8007248 <_printf_i+0x118>
 8007244:	2e00      	cmp	r6, #0
 8007246:	d04d      	beq.n	80072e4 <_printf_i+0x1b4>
 8007248:	4616      	mov	r6, r2
 800724a:	fbb5 f1f3 	udiv	r1, r5, r3
 800724e:	fb03 5711 	mls	r7, r3, r1, r5
 8007252:	5dc7      	ldrb	r7, [r0, r7]
 8007254:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007258:	462f      	mov	r7, r5
 800725a:	42bb      	cmp	r3, r7
 800725c:	460d      	mov	r5, r1
 800725e:	d9f4      	bls.n	800724a <_printf_i+0x11a>
 8007260:	2b08      	cmp	r3, #8
 8007262:	d10b      	bne.n	800727c <_printf_i+0x14c>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	07df      	lsls	r7, r3, #31
 8007268:	d508      	bpl.n	800727c <_printf_i+0x14c>
 800726a:	6923      	ldr	r3, [r4, #16]
 800726c:	6861      	ldr	r1, [r4, #4]
 800726e:	4299      	cmp	r1, r3
 8007270:	bfde      	ittt	le
 8007272:	2330      	movle	r3, #48	; 0x30
 8007274:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007278:	f106 36ff 	addle.w	r6, r6, #4294967295
 800727c:	1b92      	subs	r2, r2, r6
 800727e:	6122      	str	r2, [r4, #16]
 8007280:	f8cd a000 	str.w	sl, [sp]
 8007284:	464b      	mov	r3, r9
 8007286:	aa03      	add	r2, sp, #12
 8007288:	4621      	mov	r1, r4
 800728a:	4640      	mov	r0, r8
 800728c:	f7ff fee2 	bl	8007054 <_printf_common>
 8007290:	3001      	adds	r0, #1
 8007292:	d14c      	bne.n	800732e <_printf_i+0x1fe>
 8007294:	f04f 30ff 	mov.w	r0, #4294967295
 8007298:	b004      	add	sp, #16
 800729a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800729e:	4835      	ldr	r0, [pc, #212]	; (8007374 <_printf_i+0x244>)
 80072a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	680e      	ldr	r6, [r1, #0]
 80072a8:	061f      	lsls	r7, r3, #24
 80072aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80072ae:	600e      	str	r6, [r1, #0]
 80072b0:	d514      	bpl.n	80072dc <_printf_i+0x1ac>
 80072b2:	07d9      	lsls	r1, r3, #31
 80072b4:	bf44      	itt	mi
 80072b6:	f043 0320 	orrmi.w	r3, r3, #32
 80072ba:	6023      	strmi	r3, [r4, #0]
 80072bc:	b91d      	cbnz	r5, 80072c6 <_printf_i+0x196>
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	f023 0320 	bic.w	r3, r3, #32
 80072c4:	6023      	str	r3, [r4, #0]
 80072c6:	2310      	movs	r3, #16
 80072c8:	e7b0      	b.n	800722c <_printf_i+0xfc>
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	f043 0320 	orr.w	r3, r3, #32
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	2378      	movs	r3, #120	; 0x78
 80072d4:	4828      	ldr	r0, [pc, #160]	; (8007378 <_printf_i+0x248>)
 80072d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072da:	e7e3      	b.n	80072a4 <_printf_i+0x174>
 80072dc:	065e      	lsls	r6, r3, #25
 80072de:	bf48      	it	mi
 80072e0:	b2ad      	uxthmi	r5, r5
 80072e2:	e7e6      	b.n	80072b2 <_printf_i+0x182>
 80072e4:	4616      	mov	r6, r2
 80072e6:	e7bb      	b.n	8007260 <_printf_i+0x130>
 80072e8:	680b      	ldr	r3, [r1, #0]
 80072ea:	6826      	ldr	r6, [r4, #0]
 80072ec:	6960      	ldr	r0, [r4, #20]
 80072ee:	1d1d      	adds	r5, r3, #4
 80072f0:	600d      	str	r5, [r1, #0]
 80072f2:	0635      	lsls	r5, r6, #24
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	d501      	bpl.n	80072fc <_printf_i+0x1cc>
 80072f8:	6018      	str	r0, [r3, #0]
 80072fa:	e002      	b.n	8007302 <_printf_i+0x1d2>
 80072fc:	0671      	lsls	r1, r6, #25
 80072fe:	d5fb      	bpl.n	80072f8 <_printf_i+0x1c8>
 8007300:	8018      	strh	r0, [r3, #0]
 8007302:	2300      	movs	r3, #0
 8007304:	6123      	str	r3, [r4, #16]
 8007306:	4616      	mov	r6, r2
 8007308:	e7ba      	b.n	8007280 <_printf_i+0x150>
 800730a:	680b      	ldr	r3, [r1, #0]
 800730c:	1d1a      	adds	r2, r3, #4
 800730e:	600a      	str	r2, [r1, #0]
 8007310:	681e      	ldr	r6, [r3, #0]
 8007312:	6862      	ldr	r2, [r4, #4]
 8007314:	2100      	movs	r1, #0
 8007316:	4630      	mov	r0, r6
 8007318:	f7f8 ff62 	bl	80001e0 <memchr>
 800731c:	b108      	cbz	r0, 8007322 <_printf_i+0x1f2>
 800731e:	1b80      	subs	r0, r0, r6
 8007320:	6060      	str	r0, [r4, #4]
 8007322:	6863      	ldr	r3, [r4, #4]
 8007324:	6123      	str	r3, [r4, #16]
 8007326:	2300      	movs	r3, #0
 8007328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800732c:	e7a8      	b.n	8007280 <_printf_i+0x150>
 800732e:	6923      	ldr	r3, [r4, #16]
 8007330:	4632      	mov	r2, r6
 8007332:	4649      	mov	r1, r9
 8007334:	4640      	mov	r0, r8
 8007336:	47d0      	blx	sl
 8007338:	3001      	adds	r0, #1
 800733a:	d0ab      	beq.n	8007294 <_printf_i+0x164>
 800733c:	6823      	ldr	r3, [r4, #0]
 800733e:	079b      	lsls	r3, r3, #30
 8007340:	d413      	bmi.n	800736a <_printf_i+0x23a>
 8007342:	68e0      	ldr	r0, [r4, #12]
 8007344:	9b03      	ldr	r3, [sp, #12]
 8007346:	4298      	cmp	r0, r3
 8007348:	bfb8      	it	lt
 800734a:	4618      	movlt	r0, r3
 800734c:	e7a4      	b.n	8007298 <_printf_i+0x168>
 800734e:	2301      	movs	r3, #1
 8007350:	4632      	mov	r2, r6
 8007352:	4649      	mov	r1, r9
 8007354:	4640      	mov	r0, r8
 8007356:	47d0      	blx	sl
 8007358:	3001      	adds	r0, #1
 800735a:	d09b      	beq.n	8007294 <_printf_i+0x164>
 800735c:	3501      	adds	r5, #1
 800735e:	68e3      	ldr	r3, [r4, #12]
 8007360:	9903      	ldr	r1, [sp, #12]
 8007362:	1a5b      	subs	r3, r3, r1
 8007364:	42ab      	cmp	r3, r5
 8007366:	dcf2      	bgt.n	800734e <_printf_i+0x21e>
 8007368:	e7eb      	b.n	8007342 <_printf_i+0x212>
 800736a:	2500      	movs	r5, #0
 800736c:	f104 0619 	add.w	r6, r4, #25
 8007370:	e7f5      	b.n	800735e <_printf_i+0x22e>
 8007372:	bf00      	nop
 8007374:	08007649 	.word	0x08007649
 8007378:	0800765a 	.word	0x0800765a

0800737c <memcpy>:
 800737c:	440a      	add	r2, r1
 800737e:	4291      	cmp	r1, r2
 8007380:	f100 33ff 	add.w	r3, r0, #4294967295
 8007384:	d100      	bne.n	8007388 <memcpy+0xc>
 8007386:	4770      	bx	lr
 8007388:	b510      	push	{r4, lr}
 800738a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800738e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007392:	4291      	cmp	r1, r2
 8007394:	d1f9      	bne.n	800738a <memcpy+0xe>
 8007396:	bd10      	pop	{r4, pc}

08007398 <memmove>:
 8007398:	4288      	cmp	r0, r1
 800739a:	b510      	push	{r4, lr}
 800739c:	eb01 0402 	add.w	r4, r1, r2
 80073a0:	d902      	bls.n	80073a8 <memmove+0x10>
 80073a2:	4284      	cmp	r4, r0
 80073a4:	4623      	mov	r3, r4
 80073a6:	d807      	bhi.n	80073b8 <memmove+0x20>
 80073a8:	1e43      	subs	r3, r0, #1
 80073aa:	42a1      	cmp	r1, r4
 80073ac:	d008      	beq.n	80073c0 <memmove+0x28>
 80073ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073b6:	e7f8      	b.n	80073aa <memmove+0x12>
 80073b8:	4402      	add	r2, r0
 80073ba:	4601      	mov	r1, r0
 80073bc:	428a      	cmp	r2, r1
 80073be:	d100      	bne.n	80073c2 <memmove+0x2a>
 80073c0:	bd10      	pop	{r4, pc}
 80073c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073ca:	e7f7      	b.n	80073bc <memmove+0x24>

080073cc <_free_r>:
 80073cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073ce:	2900      	cmp	r1, #0
 80073d0:	d048      	beq.n	8007464 <_free_r+0x98>
 80073d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073d6:	9001      	str	r0, [sp, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f1a1 0404 	sub.w	r4, r1, #4
 80073de:	bfb8      	it	lt
 80073e0:	18e4      	addlt	r4, r4, r3
 80073e2:	f000 f8d3 	bl	800758c <__malloc_lock>
 80073e6:	4a20      	ldr	r2, [pc, #128]	; (8007468 <_free_r+0x9c>)
 80073e8:	9801      	ldr	r0, [sp, #4]
 80073ea:	6813      	ldr	r3, [r2, #0]
 80073ec:	4615      	mov	r5, r2
 80073ee:	b933      	cbnz	r3, 80073fe <_free_r+0x32>
 80073f0:	6063      	str	r3, [r4, #4]
 80073f2:	6014      	str	r4, [r2, #0]
 80073f4:	b003      	add	sp, #12
 80073f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073fa:	f000 b8cd 	b.w	8007598 <__malloc_unlock>
 80073fe:	42a3      	cmp	r3, r4
 8007400:	d90b      	bls.n	800741a <_free_r+0x4e>
 8007402:	6821      	ldr	r1, [r4, #0]
 8007404:	1862      	adds	r2, r4, r1
 8007406:	4293      	cmp	r3, r2
 8007408:	bf04      	itt	eq
 800740a:	681a      	ldreq	r2, [r3, #0]
 800740c:	685b      	ldreq	r3, [r3, #4]
 800740e:	6063      	str	r3, [r4, #4]
 8007410:	bf04      	itt	eq
 8007412:	1852      	addeq	r2, r2, r1
 8007414:	6022      	streq	r2, [r4, #0]
 8007416:	602c      	str	r4, [r5, #0]
 8007418:	e7ec      	b.n	80073f4 <_free_r+0x28>
 800741a:	461a      	mov	r2, r3
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	b10b      	cbz	r3, 8007424 <_free_r+0x58>
 8007420:	42a3      	cmp	r3, r4
 8007422:	d9fa      	bls.n	800741a <_free_r+0x4e>
 8007424:	6811      	ldr	r1, [r2, #0]
 8007426:	1855      	adds	r5, r2, r1
 8007428:	42a5      	cmp	r5, r4
 800742a:	d10b      	bne.n	8007444 <_free_r+0x78>
 800742c:	6824      	ldr	r4, [r4, #0]
 800742e:	4421      	add	r1, r4
 8007430:	1854      	adds	r4, r2, r1
 8007432:	42a3      	cmp	r3, r4
 8007434:	6011      	str	r1, [r2, #0]
 8007436:	d1dd      	bne.n	80073f4 <_free_r+0x28>
 8007438:	681c      	ldr	r4, [r3, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	6053      	str	r3, [r2, #4]
 800743e:	4421      	add	r1, r4
 8007440:	6011      	str	r1, [r2, #0]
 8007442:	e7d7      	b.n	80073f4 <_free_r+0x28>
 8007444:	d902      	bls.n	800744c <_free_r+0x80>
 8007446:	230c      	movs	r3, #12
 8007448:	6003      	str	r3, [r0, #0]
 800744a:	e7d3      	b.n	80073f4 <_free_r+0x28>
 800744c:	6825      	ldr	r5, [r4, #0]
 800744e:	1961      	adds	r1, r4, r5
 8007450:	428b      	cmp	r3, r1
 8007452:	bf04      	itt	eq
 8007454:	6819      	ldreq	r1, [r3, #0]
 8007456:	685b      	ldreq	r3, [r3, #4]
 8007458:	6063      	str	r3, [r4, #4]
 800745a:	bf04      	itt	eq
 800745c:	1949      	addeq	r1, r1, r5
 800745e:	6021      	streq	r1, [r4, #0]
 8007460:	6054      	str	r4, [r2, #4]
 8007462:	e7c7      	b.n	80073f4 <_free_r+0x28>
 8007464:	b003      	add	sp, #12
 8007466:	bd30      	pop	{r4, r5, pc}
 8007468:	20000128 	.word	0x20000128

0800746c <_malloc_r>:
 800746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746e:	1ccd      	adds	r5, r1, #3
 8007470:	f025 0503 	bic.w	r5, r5, #3
 8007474:	3508      	adds	r5, #8
 8007476:	2d0c      	cmp	r5, #12
 8007478:	bf38      	it	cc
 800747a:	250c      	movcc	r5, #12
 800747c:	2d00      	cmp	r5, #0
 800747e:	4606      	mov	r6, r0
 8007480:	db01      	blt.n	8007486 <_malloc_r+0x1a>
 8007482:	42a9      	cmp	r1, r5
 8007484:	d903      	bls.n	800748e <_malloc_r+0x22>
 8007486:	230c      	movs	r3, #12
 8007488:	6033      	str	r3, [r6, #0]
 800748a:	2000      	movs	r0, #0
 800748c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800748e:	f000 f87d 	bl	800758c <__malloc_lock>
 8007492:	4921      	ldr	r1, [pc, #132]	; (8007518 <_malloc_r+0xac>)
 8007494:	680a      	ldr	r2, [r1, #0]
 8007496:	4614      	mov	r4, r2
 8007498:	b99c      	cbnz	r4, 80074c2 <_malloc_r+0x56>
 800749a:	4f20      	ldr	r7, [pc, #128]	; (800751c <_malloc_r+0xb0>)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	b923      	cbnz	r3, 80074aa <_malloc_r+0x3e>
 80074a0:	4621      	mov	r1, r4
 80074a2:	4630      	mov	r0, r6
 80074a4:	f000 f862 	bl	800756c <_sbrk_r>
 80074a8:	6038      	str	r0, [r7, #0]
 80074aa:	4629      	mov	r1, r5
 80074ac:	4630      	mov	r0, r6
 80074ae:	f000 f85d 	bl	800756c <_sbrk_r>
 80074b2:	1c43      	adds	r3, r0, #1
 80074b4:	d123      	bne.n	80074fe <_malloc_r+0x92>
 80074b6:	230c      	movs	r3, #12
 80074b8:	6033      	str	r3, [r6, #0]
 80074ba:	4630      	mov	r0, r6
 80074bc:	f000 f86c 	bl	8007598 <__malloc_unlock>
 80074c0:	e7e3      	b.n	800748a <_malloc_r+0x1e>
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	1b5b      	subs	r3, r3, r5
 80074c6:	d417      	bmi.n	80074f8 <_malloc_r+0x8c>
 80074c8:	2b0b      	cmp	r3, #11
 80074ca:	d903      	bls.n	80074d4 <_malloc_r+0x68>
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	441c      	add	r4, r3
 80074d0:	6025      	str	r5, [r4, #0]
 80074d2:	e004      	b.n	80074de <_malloc_r+0x72>
 80074d4:	6863      	ldr	r3, [r4, #4]
 80074d6:	42a2      	cmp	r2, r4
 80074d8:	bf0c      	ite	eq
 80074da:	600b      	streq	r3, [r1, #0]
 80074dc:	6053      	strne	r3, [r2, #4]
 80074de:	4630      	mov	r0, r6
 80074e0:	f000 f85a 	bl	8007598 <__malloc_unlock>
 80074e4:	f104 000b 	add.w	r0, r4, #11
 80074e8:	1d23      	adds	r3, r4, #4
 80074ea:	f020 0007 	bic.w	r0, r0, #7
 80074ee:	1ac2      	subs	r2, r0, r3
 80074f0:	d0cc      	beq.n	800748c <_malloc_r+0x20>
 80074f2:	1a1b      	subs	r3, r3, r0
 80074f4:	50a3      	str	r3, [r4, r2]
 80074f6:	e7c9      	b.n	800748c <_malloc_r+0x20>
 80074f8:	4622      	mov	r2, r4
 80074fa:	6864      	ldr	r4, [r4, #4]
 80074fc:	e7cc      	b.n	8007498 <_malloc_r+0x2c>
 80074fe:	1cc4      	adds	r4, r0, #3
 8007500:	f024 0403 	bic.w	r4, r4, #3
 8007504:	42a0      	cmp	r0, r4
 8007506:	d0e3      	beq.n	80074d0 <_malloc_r+0x64>
 8007508:	1a21      	subs	r1, r4, r0
 800750a:	4630      	mov	r0, r6
 800750c:	f000 f82e 	bl	800756c <_sbrk_r>
 8007510:	3001      	adds	r0, #1
 8007512:	d1dd      	bne.n	80074d0 <_malloc_r+0x64>
 8007514:	e7cf      	b.n	80074b6 <_malloc_r+0x4a>
 8007516:	bf00      	nop
 8007518:	20000128 	.word	0x20000128
 800751c:	2000012c 	.word	0x2000012c

08007520 <_realloc_r>:
 8007520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007522:	4607      	mov	r7, r0
 8007524:	4614      	mov	r4, r2
 8007526:	460e      	mov	r6, r1
 8007528:	b921      	cbnz	r1, 8007534 <_realloc_r+0x14>
 800752a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800752e:	4611      	mov	r1, r2
 8007530:	f7ff bf9c 	b.w	800746c <_malloc_r>
 8007534:	b922      	cbnz	r2, 8007540 <_realloc_r+0x20>
 8007536:	f7ff ff49 	bl	80073cc <_free_r>
 800753a:	4625      	mov	r5, r4
 800753c:	4628      	mov	r0, r5
 800753e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007540:	f000 f830 	bl	80075a4 <_malloc_usable_size_r>
 8007544:	42a0      	cmp	r0, r4
 8007546:	d20f      	bcs.n	8007568 <_realloc_r+0x48>
 8007548:	4621      	mov	r1, r4
 800754a:	4638      	mov	r0, r7
 800754c:	f7ff ff8e 	bl	800746c <_malloc_r>
 8007550:	4605      	mov	r5, r0
 8007552:	2800      	cmp	r0, #0
 8007554:	d0f2      	beq.n	800753c <_realloc_r+0x1c>
 8007556:	4631      	mov	r1, r6
 8007558:	4622      	mov	r2, r4
 800755a:	f7ff ff0f 	bl	800737c <memcpy>
 800755e:	4631      	mov	r1, r6
 8007560:	4638      	mov	r0, r7
 8007562:	f7ff ff33 	bl	80073cc <_free_r>
 8007566:	e7e9      	b.n	800753c <_realloc_r+0x1c>
 8007568:	4635      	mov	r5, r6
 800756a:	e7e7      	b.n	800753c <_realloc_r+0x1c>

0800756c <_sbrk_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4d06      	ldr	r5, [pc, #24]	; (8007588 <_sbrk_r+0x1c>)
 8007570:	2300      	movs	r3, #0
 8007572:	4604      	mov	r4, r0
 8007574:	4608      	mov	r0, r1
 8007576:	602b      	str	r3, [r5, #0]
 8007578:	f7fa fa54 	bl	8001a24 <_sbrk>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d102      	bne.n	8007586 <_sbrk_r+0x1a>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	b103      	cbz	r3, 8007586 <_sbrk_r+0x1a>
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	2000035c 	.word	0x2000035c

0800758c <__malloc_lock>:
 800758c:	4801      	ldr	r0, [pc, #4]	; (8007594 <__malloc_lock+0x8>)
 800758e:	f000 b811 	b.w	80075b4 <__retarget_lock_acquire_recursive>
 8007592:	bf00      	nop
 8007594:	20000364 	.word	0x20000364

08007598 <__malloc_unlock>:
 8007598:	4801      	ldr	r0, [pc, #4]	; (80075a0 <__malloc_unlock+0x8>)
 800759a:	f000 b80c 	b.w	80075b6 <__retarget_lock_release_recursive>
 800759e:	bf00      	nop
 80075a0:	20000364 	.word	0x20000364

080075a4 <_malloc_usable_size_r>:
 80075a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075a8:	1f18      	subs	r0, r3, #4
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	bfbc      	itt	lt
 80075ae:	580b      	ldrlt	r3, [r1, r0]
 80075b0:	18c0      	addlt	r0, r0, r3
 80075b2:	4770      	bx	lr

080075b4 <__retarget_lock_acquire_recursive>:
 80075b4:	4770      	bx	lr

080075b6 <__retarget_lock_release_recursive>:
 80075b6:	4770      	bx	lr

080075b8 <_init>:
 80075b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ba:	bf00      	nop
 80075bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075be:	bc08      	pop	{r3}
 80075c0:	469e      	mov	lr, r3
 80075c2:	4770      	bx	lr

080075c4 <_fini>:
 80075c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c6:	bf00      	nop
 80075c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ca:	bc08      	pop	{r3}
 80075cc:	469e      	mov	lr, r3
 80075ce:	4770      	bx	lr
